/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Model;
using It.FattureInCloud.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace It.FattureInCloud.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing IssuedDocumentPreCreateInfo
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class IssuedDocumentPreCreateInfoTests : IDisposable
    {
        private IssuedDocumentPreCreateInfo instance;

        public IssuedDocumentPreCreateInfoTests()
        {
            var body = "{'numerations':{'2018':{'AB123':2},'2019':{'123':3}},'dn_numerations':{'2017':{'':1000},'2018':{'':112}},'default_values':{'default_template':{'id':111,'type':'standard','name':'Light Smoke'},'dn_template':{'id':222,'type':'delivery_note','name':'DDT 1'},'ai_template':{'id':333,'type':'accompanying_invoice','name':'FT Accompagnatoria 1'},'notes':'','rivalsa':0,'cassa':0,'withholding_tax':0,'withholding_tax_taxable':100,'other_withholding_tax':0,'use_gross_prices':false,'payment_method':{'id':123321,'name':'Bonifico bancario','is_default':true,'details':[{'title':'Banca','description':'Indesa'},{'title':'IBAN','description':'IT17QA12345600000003498936'},{'title':'Intestatario','description':'Mario Rossi'}],'bank_iban':'IT17QA12345600000003498936','bank_name':'Indesa','bank_beneficiary':'Mario Rossi','ei_payment_method':'MP05'}},'extra_data_default_values':{'ts_communication':false,'ts_tipo_spesa':'SR','ts_flag_tipo_spesa':0,'ts_pagamento_tracciato':false},'items_default_values':{'vat':{'id':0,'value':22,'description':'','notes':'','e_invoice':true,'ei_type':'0','ei_description':'','is_disabled':false,'editable':false,'default':true}},'countries_list':['Italia','Afghanistan','Albania'],'currencies_list':[{'id':'AED','symbol':'AED','html_symbol':'AED','exchange_rate':'4.09500'},{'id':'ALL','symbol':'ALL','html_symbol':'ALL','exchange_rate':'121.50000'}],'templates_list':[{'id':10,'name':'New Standard S1'},{'id':11,'name':'New Standard S2'}],'dn_templates_list':[{'id':660,'name':'DDT 1'},{'id':680,'name':'DDT Prova'}],'ai_templates_list':[{'id':663,'name':'FT Accompagnatoria 1'}],'payment_methods_list':[{'id':123321,'name':'Bonifico bancario','is_default':true,'details':[{'title':'Banca','description':'Indesa'},{'title':'IBAN','description':'IT17QA12345600000003498936'},{'title':'Intestatario','description':'Mario Rossi'}],'bank_iban':'IT17QA12345600000003498936','bank_name':'Indesa','bank_beneficiary':'Mario Rossi','ei_payment_method':'MP05'}],'payment_accounts_list':[{'id':21,'name':'Indesa - Carta conto'},{'id':287,'name':'Bonifico_Bancario'}],'vat_types_list':[{'id':1409,'value':15,'description':'ALIQUOTA #1234#','ei_type':'0','is_disabled':false},{'id':1332,'value':0,'description':'Non imp. art. 17 c. 6 lett. A TER DPR 633/72','ei_type':'0','is_disabled':false}]}";
            instance = JsonConvert.DeserializeObject<IssuedDocumentPreCreateInfo>(body);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IssuedDocumentPreCreateInfo
        /// </summary>
        [Fact]
        public void IssuedDocumentPreCreateInfoInstanceTest()
        {
            Assert.IsType<IssuedDocumentPreCreateInfo>(instance);
        }


        /// <summary>
        /// Test the property 'Numerations'
        /// </summary>
        [Fact]
        public void NumerationsTest()
        {
            Assert.IsType<Dictionary<string, Dictionary<string, int>>>(instance.Numerations);
        }
        /// <summary>
        /// Test the property 'DnNumerations'
        /// </summary>
        [Fact]
        public void DnNumerationsTest()
        {
            Assert.IsType<Dictionary<string, Dictionary<string, int>>>(instance.DnNumerations);
        }
        /// <summary>
        /// Test the property 'DefaultValues'
        /// </summary>
        [Fact]
        public void DefaultValuesTest()
        {
            Assert.IsType<IssuedDocumentPreCreateInfoDefaultValues>(instance.DefaultValues);
        }
        /// <summary>
        /// Test the property 'ExtraDataDefaultValues'
        /// </summary>
        [Fact]
        public void ExtraDataDefaultValuesTest()
        {
            Assert.IsType<IssuedDocumentPreCreateInfoExtraDataDefaultValues>(instance.ExtraDataDefaultValues);
        }
        /// <summary>
        /// Test the property 'ItemsDefaultValues'
        /// </summary>
        [Fact]
        public void ItemsDefaultValuesTest()
        {
            Assert.IsType<IssuedDocumentPreCreateInfoItemsDefaultValues>(instance.ItemsDefaultValues);
        }
        /// <summary>
        /// Test the property 'CountriesList'
        /// </summary>
        [Fact]
        public void CountriesListTest()
        {
            Assert.IsType<List<string>>(instance.CountriesList);
        }
        /// <summary>
        /// Test the property 'CurrenciesList'
        /// </summary>
        [Fact]
        public void CurrenciesListTest()
        {
            Assert.IsType<List<Currency>>(instance.CurrenciesList);
        }
        /// <summary>
        /// Test the property 'TemplatesList'
        /// </summary>
        [Fact]
        public void TemplatesListTest()
        {
            Assert.IsType<List<DocumentTemplate>>(instance.TemplatesList);
        }
        /// <summary>
        /// Test the property 'DnTemplatesList'
        /// </summary>
        [Fact]
        public void DnTemplatesListTest()
        {
            Assert.IsType<List<DocumentTemplate>>(instance.DnTemplatesList);
        }
        /// <summary>
        /// Test the property 'AiTemplatesList'
        /// </summary>
        [Fact]
        public void AiTemplatesListTest()
        {
            Assert.IsType<List<DocumentTemplate>>(instance.AiTemplatesList);
        }
        /// <summary>
        /// Test the property 'PaymentMethodsList'
        /// </summary>
        [Fact]
        public void PaymentMethodsListTest()
        {
            Assert.IsType<List<PaymentMethod>>(instance.PaymentMethodsList);
        }
        /// <summary>
        /// Test the property 'PaymentAccountsList'
        /// </summary>
        [Fact]
        public void PaymentAccountsListTest()
        {
            Assert.IsType<List<PaymentAccount>>(instance.PaymentAccountsList);
        }
        /// <summary>
        /// Test the property 'VatTypesList'
        /// </summary>
        [Fact]
        public void VatTypesListTest()
        {
            Assert.IsType<List<VatType>>(instance.VatTypesList);
        }

    }

}
