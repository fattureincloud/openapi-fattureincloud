/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Model;
using It.FattureInCloud.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace It.FattureInCloud.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing IssuedDocumentPreCreateInfoDefaultValues
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class IssuedDocumentPreCreateInfoDefaultValuesTests : IDisposable
    {
        private IssuedDocumentPreCreateInfoDefaultValues instance;

        public IssuedDocumentPreCreateInfoDefaultValuesTests()
        {
            var body = "{ 'default_template': { 'id': 111, 'type': 'standard', 'name': 'Light Smoke' }, 'dn_template': { 'id': 222, 'type': 'delivery_note', 'name': 'DDT 1' }, 'ai_template': { 'id': 333, 'type': 'accompanying_invoice', 'name': 'FT Accompagnatoria 1' }, 'notes': '', 'rivalsa': 0, 'cassa': 0, 'withholding_tax': 0, 'withholding_tax_taxable': 100, 'other_withholding_tax': 0, 'use_gross_prices': false, 'payment_method': { 'id': 123321, 'name': 'Bonifico bancario', 'is_default': true, 'details': [ { 'title': 'Banca', 'description': 'Indesa' }, { 'title': 'IBAN', 'description': 'IT17QA12345600000003498936' }, { 'title': 'Intestatario', 'description': 'Mario Rossi' } ] } }";
            instance = JsonConvert.DeserializeObject<IssuedDocumentPreCreateInfoDefaultValues>(body);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IssuedDocumentPreCreateInfoDefaultValues
        /// </summary>
        [Fact]
        public void IssuedDocumentPreCreateInfoDefaultValuesInstanceTest()
        {
            Assert.IsType<IssuedDocumentPreCreateInfoDefaultValues>(instance);
        }


        /// <summary>
        /// Test the property 'DefaultTemplate'
        /// </summary>
        [Fact]
        public void DefaultTemplateTest()
        {
            Assert.IsType<DocumentTemplate>(instance.DefaultTemplate);
        }
        /// <summary>
        /// Test the property 'DnTemplate'
        /// </summary>
        [Fact]
        public void DnTemplateTest()
        {
            Assert.IsType<DocumentTemplate>(instance.DnTemplate);
        }
        /// <summary>
        /// Test the property 'AiTemplate'
        /// </summary>
        [Fact]
        public void AiTemplateTest()
        {
            Assert.IsType<DocumentTemplate>(instance.AiTemplate);
        }
        /// <summary>
        /// Test the property 'Notes'
        /// </summary>
        [Fact]
        public void NotesTest()
        {
            Assert.IsType<string>(instance.Notes);
        }
        /// <summary>
        /// Test the property 'Rivalsa'
        /// </summary>
        [Fact]
        public void RivalsaTest()
        {
            Assert.IsType<decimal>(instance.Rivalsa);
        }
        /// <summary>
        /// Test the property 'Cassa'
        /// </summary>
        [Fact]
        public void CassaTest()
        {
            Assert.IsType<decimal>(instance.Cassa);
        }
        /// <summary>
        /// Test the property 'WithholdingTax'
        /// </summary>
        [Fact]
        public void WithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.WithholdingTax);
        }
        /// <summary>
        /// Test the property 'WithholdingTaxTaxable'
        /// </summary>
        [Fact]
        public void WithholdingTaxTaxableTest()
        {
            Assert.IsType<decimal>(instance.WithholdingTaxTaxable);
        }
        /// <summary>
        /// Test the property 'OtherWithholdingTax'
        /// </summary>
        [Fact]
        public void OtherWithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.OtherWithholdingTax);
        }
        /// <summary>
        /// Test the property 'UseGrossPrices'
        /// </summary>
        [Fact]
        public void UseGrossPricesTest()
        {
            Assert.IsType<bool>(instance.UseGrossPrices);
        }
        /// <summary>
        /// Test the property 'PaymentMethod'
        /// </summary>
        [Fact]
        public void PaymentMethodTest()
        {
            Assert.IsType<PaymentMethod>(instance.PaymentMethod);
        }

    }

}
