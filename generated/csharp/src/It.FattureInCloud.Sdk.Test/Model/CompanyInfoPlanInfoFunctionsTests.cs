/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Model;
using It.FattureInCloud.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace It.FattureInCloud.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing CompanyInfoPlanInfoFunctions
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class CompanyInfoPlanInfoFunctionsTests : IDisposable
    {
        private CompanyInfoPlanInfoFunctions instance;

        public CompanyInfoPlanInfoFunctionsTests()
        {
            var body = "{ 'document_attachments': true, 'archive': true, 'payment_notifications': true, 'paypal': true, 'receipts': true, 'e_invoice': true, 'genius': true, 'stock': true, 'smtp': true, 'mail_tracking': true, 'subaccounts': true, 'tessera_sanitaria': true, 'recurring': true, 'sofort': false, 'cerved': true, 'ts_digital': true, 'ts_pay': true, 'ts_invoice_trading': true }";
            instance = JsonConvert.DeserializeObject<CompanyInfoPlanInfoFunctions>(body);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CompanyInfoPlanInfoFunctions
        /// </summary>
        [Fact]
        public void CompanyInfoPlanInfoFunctionsInstanceTest()
        {
            Assert.IsType<CompanyInfoPlanInfoFunctions>(instance);
        }


        /// <summary>
        /// Test the property 'Archive'
        /// </summary>
        [Fact]
        public void ArchiveTest()
        {
            Assert.IsType<bool>(instance.Archive);
        }
        /// <summary>
        /// Test the property 'Cerved'
        /// </summary>
        [Fact]
        public void CervedTest()
        {
            Assert.IsType<bool>(instance.Cerved);
        }
        /// <summary>
        /// Test the property 'DocumentAttachments'
        /// </summary>
        [Fact]
        public void DocumentAttachmentsTest()
        {
            Assert.IsType<bool>(instance.DocumentAttachments);
        }
        /// <summary>
        /// Test the property 'EInvoice'
        /// </summary>
        [Fact]
        public void EInvoiceTest()
        {
            Assert.IsType<bool>(instance.EInvoice);
        }
        /// <summary>
        /// Test the property 'Genius'
        /// </summary>
        [Fact]
        public void GeniusTest()
        {
            Assert.IsType<bool>(instance.Genius);
        }
        /// <summary>
        /// Test the property 'MailTracking'
        /// </summary>
        [Fact]
        public void MailTrackingTest()
        {
            Assert.IsType<bool>(instance.MailTracking);
        }
        /// <summary>
        /// Test the property 'PaymentNotifications'
        /// </summary>
        [Fact]
        public void PaymentNotificationsTest()
        {
            Assert.IsType<bool>(instance.PaymentNotifications);
        }
        /// <summary>
        /// Test the property 'Paypal'
        /// </summary>
        [Fact]
        public void PaypalTest()
        {
            Assert.IsType<bool>(instance.Paypal);
        }
        /// <summary>
        /// Test the property 'Receipts'
        /// </summary>
        [Fact]
        public void ReceiptsTest()
        {
            Assert.IsType<bool>(instance.Receipts);
        }
        /// <summary>
        /// Test the property 'Recurring'
        /// </summary>
        [Fact]
        public void RecurringTest()
        {
            Assert.IsType<bool>(instance.Recurring);
        }
        /// <summary>
        /// Test the property 'Smtp'
        /// </summary>
        [Fact]
        public void SmtpTest()
        {
            Assert.IsType<bool>(instance.Smtp);
        }
        /// <summary>
        /// Test the property 'Sofort'
        /// </summary>
        [Fact]
        public void SofortTest()
        {
            Assert.IsType<bool>(instance.Sofort);
        }
        /// <summary>
        /// Test the property 'Stock'
        /// </summary>
        [Fact]
        public void StockTest()
        {
            Assert.IsType<bool>(instance.Stock);
        }
        /// <summary>
        /// Test the property 'Subaccounts'
        /// </summary>
        [Fact]
        public void SubaccountsTest()
        {
            Assert.IsType<bool>(instance.Subaccounts);
        }
        /// <summary>
        /// Test the property 'TesseraSanitaria'
        /// </summary>
        [Fact]
        public void TesseraSanitariaTest()
        {
            Assert.IsType<bool>(instance.TesseraSanitaria);
        }
        /// <summary>
        /// Test the property 'TsDigital'
        /// </summary>
        [Fact]
        public void TsDigitalTest()
        {
            Assert.IsType<bool>(instance.TsDigital);
        }
        /// <summary>
        /// Test the property 'TsInvoiceTrading'
        /// </summary>
        [Fact]
        public void TsInvoiceTradingTest()
        {
            Assert.IsType<bool>(instance.TsInvoiceTrading);
        }
        /// <summary>
        /// Test the property 'TsPay'
        /// </summary>
        [Fact]
        public void TsPayTest()
        {
            Assert.IsType<bool>(instance.TsPay);
        }

    }

}
