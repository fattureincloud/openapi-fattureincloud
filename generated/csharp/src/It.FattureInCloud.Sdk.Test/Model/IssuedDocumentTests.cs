/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Model;
using It.FattureInCloud.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace It.FattureInCloud.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing IssuedDocument
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class IssuedDocumentTests : IDisposable
    {
        private IssuedDocument instance;

        public IssuedDocumentTests()
        {
            var body = "{ 'id': 12345, 'type': 'receipt', 'year': 2021, 'numeration': 'rec123', 'subject': '', 'visible_subject': '', 'rc_center': '', 'ei_cassa_type': '', 'ei_withholding_tax_causal': 'a', 'ei_other_withholding_tax_type': 'a', 'ei_other_withholding_tax_causal': 'c', 'stamp_duty': 0, 'use_gross_prices': false, 'e_invoice': false, 'delivery_note': false, 'accompanying_invoice': false, 'amount_net': 68.18, 'amount_vat': 6.82, 'amount_gross': 75, 'amount_due_discount': 1, 'amount_rivalsa': 0, 'amount_cassa': 0, 'amount_withholding_tax': 0, 'amount_other_withholding_tax': 0, 'h_margins': 15, 'v_margins': 16, 'show_payment_method': false, 'show_payments': true, 'show_totals': 'all', 'show_notification_button': false, 'is_marked': false, 'date': '2021-08-20', 'number': 1, 'notes': '', 'rivalsa': 0, 'cassa': 0, 'withholding_tax': 0, 'withholding_tax_taxable': 100, 'other_withholding_tax': 0, 'use_split_payment': false, 'attachment_url': 'kdijrnf893hnwkfk45f50f.pdf', 'seen_date': '2020-08-23', 'next_due_date': '2020-08-23', 'url': 'y12h45rn9yf2mse0p43t7ec90vr.pdf', 'show_tspay_button': false, 'dn_number' : 3, 'dn_date' : '2020-10-21', 'dn_ai_packages_number' : 4, 'dn_ai_weight' : 3, 'dn_ai_causal' : 'causal', 'dn_ai_destination' : 'dest', 'dn_ai_transporter' : 'trasp', 'dn_ai_notes' : 'notes', 'amount_rivalsa_taxable': 3, 'amount_global_cassa_taxable': 3, 'amount_cassa_taxable': 3, 'amount_cassa2': 3, 'amount_cassa2_taxable': 3, 'amount_withholding_tax_taxable': 3, 'amount_enasarco_taxable': 3, 'amount_other_withholding_tax_taxable': 3, 'ei_cassa2_type': 3, 'attachment_token': 'asdaosdjaoisndoa', 'entity': { 'id': 54321, 'name': 'Mary Red S.r.L.', 'vat_number': 'IT05432181211', 'tax_code': 'IT05432181211', 'address_street': 'Corso impero, 66', 'address_postal_code': '20900', 'address_city': 'Milano', 'address_province': 'MI', 'address_extra': '', 'country': 'Italia', 'certified_email': 'mary@pec.red.com', 'ei_code': 'ABCXCR1' }, 'currency': { 'id': 'EUR', 'exchange_rate': '1.00000', 'symbol': 'â‚¬' }, 'language': { 'code': 'it', 'name': 'Italiano' }, 'payment_method': { 'id': 4, 'name': 'Credit card' }, 'items_list': [ { 'product_id': 5432, 'code': 'SG3', 'name': 'Soggiorno', 'measure': '', 'net_price': 68.18182, 'category': '', 'id': 277876033, 'gross_price': 75, 'apply_withholding_taxes': true, 'discount': 0, 'discount_highlight': false, 'in_dn': false, 'qty': 1, 'vat': { 'id': 3, 'value': 10, 'description': '' }, 'stock': false, 'description': '', 'not_taxable': false } ], 'payments_list': [ { 'amount': 75, 'due_date': '2020-08-23', 'paid_date': '2020-10-10', 'id': 69078013, 'payment_terms': { 'days': 0, 'type': 'standard' }, 'status': 'not_paid', 'payment_account': null } ], 'template': { 'id': 2821, 'name': 'Light Smoke' }, 'extra_data': { 'ts_status': 1 }, 'acc_inv_template': { 'id': 4 }, 'delivery_note_template': { 'id': 54321 }, 'ei_raw': { 'prop': true }, 'ei_data': { 'bank_name': 'Sao Paulo' } }";
            instance = JsonConvert.DeserializeObject<IssuedDocument>(body);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IssuedDocument
        /// </summary>
        [Fact]
        public void IssuedDocumentInstanceTest()
        {
            Assert.IsType<IssuedDocument>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            Assert.IsType<int>(instance.Id);
        }
        /// <summary>
        /// Test the property 'Entity'
        /// </summary>
        [Fact]
        public void EntityTest()
        {
            Assert.IsType<Entity>(instance.Entity);
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            Assert.IsType<IssuedDocumentType>(instance.Type);
        }
        /// <summary>
        /// Test the property 'Number'
        /// </summary>
        [Fact]
        public void NumberTest()
        {
            Assert.IsType<int>(instance.Number);
        }
        /// <summary>
        /// Test the property 'Numeration'
        /// </summary>
        [Fact]
        public void NumerationTest()
        {
            Assert.IsType<string>(instance.Numeration);
        }
        /// <summary>
        /// Test the property 'Date'
        /// </summary>
        [Fact]
        public void DateTest()
        {
            Assert.IsType<DateTime>(instance.Date);
        }
        /// <summary>
        /// Test the property 'Currency'
        /// </summary>
        [Fact]
        public void CurrencyTest()
        {
            Assert.IsType<Currency>(instance.Currency);
        }
        /// <summary>
        /// Test the property 'Language'
        /// </summary>
        [Fact]
        public void LanguageTest()
        {
            Assert.IsType<Language>(instance.Language);
        }
        /// <summary>
        /// Test the property 'Subject'
        /// </summary>
        [Fact]
        public void SubjectTest()
        {
            Assert.IsType<string>(instance.Subject);
        }
        /// <summary>
        /// Test the property 'VisibleSubject'
        /// </summary>
        [Fact]
        public void VisibleSubjectTest()
        {
            Assert.IsType<string>(instance.VisibleSubject);
        }
        /// <summary>
        /// Test the property 'RcCenter'
        /// </summary>
        [Fact]
        public void RcCenterTest()
        {
            Assert.IsType<string>(instance.RcCenter);
        }
        /// <summary>
        /// Test the property 'Notes'
        /// </summary>
        [Fact]
        public void NotesTest()
        {
            Assert.IsType<string>(instance.Notes);
        }
        /// <summary>
        /// Test the property 'Rivalsa'
        /// </summary>
        [Fact]
        public void RivalsaTest()
        {
            Assert.IsType<decimal>(instance.Rivalsa);
        }
        /// <summary>
        /// Test the property 'Cassa'
        /// </summary>
        [Fact]
        public void CassaTest()
        {
            Assert.IsType<decimal>(instance.Cassa);
        }
        /// <summary>
        /// Test the property 'WithholdingTax'
        /// </summary>
        [Fact]
        public void WithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.WithholdingTax);
        }
        /// <summary>
        /// Test the property 'WithholdingTaxTaxable'
        /// </summary>
        [Fact]
        public void WithholdingTaxTaxableTest()
        {
            Assert.IsType<decimal>(instance.WithholdingTaxTaxable);
        }
        /// <summary>
        /// Test the property 'OtherWithholdingTax'
        /// </summary>
        [Fact]
        public void OtherWithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.OtherWithholdingTax);
        }
        /// <summary>
        /// Test the property 'StampDuty'
        /// </summary>
        [Fact]
        public void StampDutyTest()
        {
            Assert.IsType<decimal>(instance.StampDuty);
        }
        /// <summary>
        /// Test the property 'PaymentMethod'
        /// </summary>
        [Fact]
        public void PaymentMethodTest()
        {
            Assert.IsType<PaymentMethod>(instance.PaymentMethod);
        }
        /// <summary>
        /// Test the property 'UseSplitPayment'
        /// </summary>
        [Fact]
        public void UseSplitPaymentTest()
        {
            Assert.IsType<bool>(instance.UseSplitPayment);
        }
        /// <summary>
        /// Test the property 'UseGrossPrices'
        /// </summary>
        [Fact]
        public void UseGrossPricesTest()
        {
            Assert.IsType<bool>(instance.UseGrossPrices);
        }
        /// <summary>
        /// Test the property 'EInvoice'
        /// </summary>
        [Fact]
        public void EInvoiceTest()
        {
            Assert.IsType<bool>(instance.EInvoice);
        }
        /// <summary>
        /// Test the property 'EiData'
        /// </summary>
        [Fact]
        public void EiDataTest()
        {
            Assert.IsType<IssuedDocumentEiData>(instance.EiData);
        }
        /// <summary>
        /// Test the property 'ItemsList'
        /// </summary>
        [Fact]
        public void ItemsListTest()
        {
            Assert.IsType<List<IssuedDocumentItemsListItem>>(instance.ItemsList);
        }
        /// <summary>
        /// Test the property 'PaymentsList'
        /// </summary>
        [Fact]
        public void PaymentsListTest()
        {
            Assert.IsType<List<IssuedDocumentPaymentsListItem>>(instance.PaymentsList);
        }
        /// <summary>
        /// Test the property 'Template'
        /// </summary>
        [Fact]
        public void TemplateTest()
        {
            Assert.IsType<DocumentTemplate>(instance.Template);
        }
        /// <summary>
        /// Test the property 'DeliveryNoteTemplate'
        /// </summary>
        [Fact]
        public void DeliveryNoteTemplateTest()
        {
            Assert.IsType<DocumentTemplate>(instance.DeliveryNoteTemplate);
        }
        /// <summary>
        /// Test the property 'AccInvTemplate'
        /// </summary>
        [Fact]
        public void AccInvTemplateTest()
        {
            Assert.IsType<DocumentTemplate>(instance.AccInvTemplate);
        }
        /// <summary>
        /// Test the property 'HMargins'
        /// </summary>
        [Fact]
        public void HMarginsTest()
        {
            Assert.IsType<int>(instance.HMargins);
        }
        /// <summary>
        /// Test the property 'ShowPayments'
        /// </summary>
        [Fact]
        public void ShowPaymentsTest()
        {
            Assert.IsType<bool>(instance.ShowPayments);
        }
        /// <summary>
        /// Test the property 'ShowPaymentMethod'
        /// </summary>
        [Fact]
        public void ShowPaymentMethodTest()
        {
            Assert.IsType<bool>(instance.ShowPaymentMethod);
        }
        /// <summary>
        /// Test the property 'ShowTotals'
        /// </summary>
        [Fact]
        public void ShowTotalsTest()
        {
            Assert.IsType<ShowTotalsMode>(instance.ShowTotals);
        }
        /// <summary>
        /// Test the property 'VMargins'
        /// </summary>
        [Fact]
        public void VMarginsTest()
        {
            Assert.IsType<int>(instance.VMargins);
        }
        /// <summary>
        /// Test the property 'ShowNotificationButton'
        /// </summary>
        [Fact]
        public void ShowNotificationButtonTest()
        {
            Assert.IsType<bool>(instance.ShowNotificationButton);
        }
        /// <summary>
        /// Test the property 'DeliveryNote'
        /// </summary>
        [Fact]
        public void DeliveryNoteTest()
        {
            Assert.IsType<bool>(instance.DeliveryNote);
        }
        /// <summary>
        /// Test the property 'AccompanyingInvoice'
        /// </summary>
        [Fact]
        public void AccompanyingInvoiceTest()
        {
            Assert.IsType<bool>(instance.AccompanyingInvoice);
        }
        /// <summary>
        /// Test the property 'DnNumber'
        /// </summary>
        [Fact]
        public void DnNumberTest()
        {
            Assert.IsType<int>(instance.DnNumber);
        }
        /// <summary>
        /// Test the property 'DnDate'
        /// </summary>
        [Fact]
        public void DnDateTest()
        {
            Assert.IsType<DateTime>(instance.DnDate);
        }
        /// <summary>
        /// Test the property 'DnAiPackagesNumber'
        /// </summary>
        [Fact]
        public void DnAiPackagesNumberTest()
        {
            Assert.IsType<string>(instance.DnAiPackagesNumber);
        }
        /// <summary>
        /// Test the property 'DnAiWeight'
        /// </summary>
        [Fact]
        public void DnAiWeightTest()
        {
            Assert.IsType<string>(instance.DnAiWeight);
        }
        /// <summary>
        /// Test the property 'DnAiCausal'
        /// </summary>
        [Fact]
        public void DnAiCausalTest()
        {
            Assert.IsType<string>(instance.DnAiCausal);
        }
        /// <summary>
        /// Test the property 'DnAiDestination'
        /// </summary>
        [Fact]
        public void DnAiDestinationTest()
        {
            Assert.IsType<string>(instance.DnAiDestination);
        }
        /// <summary>
        /// Test the property 'DnAiTransporter'
        /// </summary>
        [Fact]
        public void DnAiTransporterTest()
        {
            Assert.IsType<string>(instance.DnAiTransporter);
        }
        /// <summary>
        /// Test the property 'DnAiNotes'
        /// </summary>
        [Fact]
        public void DnAiNotesTest()
        {
            Assert.IsType<string>(instance.DnAiNotes);
        }
        /// <summary>
        /// Test the property 'IsMarked'
        /// </summary>
        [Fact]
        public void IsMarkedTest()
        {
            Assert.IsType<bool>(instance.IsMarked);
        }
        /// <summary>
        /// Test the property 'AmountNet'
        /// </summary>
        [Fact]
        public void AmountNetTest()
        {
            Assert.IsType<decimal>(instance.AmountNet);
        }
        /// <summary>
        /// Test the property 'AmountVat'
        /// </summary>
        [Fact]
        public void AmountVatTest()
        {
            Assert.IsType<decimal>(instance.AmountVat);
        }
        /// <summary>
        /// Test the property 'AmountGross'
        /// </summary>
        [Fact]
        public void AmountGrossTest()
        {
            Assert.IsType<decimal>(instance.AmountGross);
        }
        /// <summary>
        /// Test the property 'AmountRivalsa'
        /// </summary>
        [Fact]
        public void AmountRivalsaTest()
        {
            Assert.IsType<decimal>(instance.AmountRivalsa);
        }
        /// <summary>
        /// Test the property 'AmountCassa'
        /// </summary>
        [Fact]
        public void AmountCassaTest()
        {
            Assert.IsType<decimal>(instance.AmountCassa);
        }
        /// <summary>
        /// Test the property 'AmountWithholdingTax'
        /// </summary>
        [Fact]
        public void AmountWithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.AmountWithholdingTax);
        }
        /// <summary>
        /// Test the property 'AmountOtherWithholdingTax'
        /// </summary>
        [Fact]
        public void AmountOtherWithholdingTaxTest()
        {
            Assert.IsType<decimal>(instance.AmountOtherWithholdingTax);
        }
        /// <summary>
        /// Test the property 'ExtraData'
        /// </summary>
        [Fact]
        public void ExtraDataTest()
        {
            Assert.IsType<IssuedDocumentExtraData>(instance.ExtraData);
        }
        /// <summary>
        /// Test the property 'SeenDate'
        /// </summary>
        [Fact]
        public void SeenDateTest()
        {
            Assert.IsType<DateTime>(instance.SeenDate);
        }
        /// <summary>
        /// Test the property 'NextDueDate'
        /// </summary>
        [Fact]
        public void NextDueDateTest()
        {
            Assert.IsType<DateTime>(instance.NextDueDate);
        }
        /// <summary>
        /// Test the property 'Url'
        /// </summary>
        [Fact]
        public void UrlTest()
        {
            Assert.IsType<string>(instance.Url);
        }
        /// <summary>
        /// Test the property 'AttachmentUrl'
        /// </summary>
        [Fact]
        public void AttachmentUrlTest()
        {
            Assert.IsType<string>(instance.AttachmentUrl);
        }
        /// <summary>
        /// Test the property 'AttachmentToken'
        /// </summary>
        [Fact]
        public void AttachmentTokenTest()
        {
            Assert.IsType<string>(instance.AttachmentToken);
        }
        /// <summary>
        /// Test the property 'EiRaw'
        /// </summary>
        [Fact]
        public void EiRawTest()
        {
            Assert.IsType<Newtonsoft.Json.Linq.JObject>(instance.EiRaw);
        }
        /// <summary>
        /// Test the property 'ShowTspayButton'
        /// </summary>
        [Fact]
        public void ShowTspayButtonTest()
        {
            Assert.IsType<bool>(instance.ShowTspayButton);
        }
        /// <summary>
        /// Test the property 'Year'
        /// </summary>
        [Fact]
        public void YearTest()
        {
            Assert.IsType<int>(instance.Year);
        }
        /// <summary>
        /// Test the property 'AmountRivalsaTaxable'
        /// </summary>
        [Fact]
        public void AmountRivalsaTaxableTest()
        {
            Assert.IsType<decimal>(instance.AmountRivalsaTaxable);
        }
        /// <summary>
        /// Test the property 'AmountGlobalCassaTaxable'
        /// </summary>
        [Fact]
        public void AmountGlobalCassaTaxableTest()
        {
            Assert.IsType<decimal>(instance.AmountGlobalCassaTaxable);
        }
        /// <summary>
        /// Test the property 'AmountCassaTaxable'
        /// </summary>
        [Fact]
        public void AmountCassaTaxableTest()
        {
            Assert.IsType<decimal>(instance.AmountCassaTaxable);
        }
        /// <summary>
        /// Test the property 'AmountCassa2'
        /// </summary>
        [Fact]
        public void AmountCassa2Test()
        {
            Assert.IsType<decimal>(instance.AmountCassa2);
        }
        /// <summary>
        /// Test the property 'AmountCassa2Taxable'
        /// </summary>
        [Fact]
        public void AmountCassa2TaxableTest()
        {
            Assert.IsType<decimal>(instance.AmountCassa2Taxable);
        }
        /// <summary>
        /// Test the property 'AmountWithholdingTaxTaxable'
        /// </summary>
        [Fact]
        public void AmountWithholdingTaxTaxableTest()
        {
            Assert.IsType<decimal>(instance.AmountWithholdingTaxTaxable);
        }
        /// <summary>
        /// Test the property 'AmountEnasarcoTaxable'
        /// </summary>
        [Fact]
        public void AmountEnasarcoTaxableTest()
        {
            Assert.IsType<decimal>(instance.AmountEnasarcoTaxable);
        }
        /// <summary>
        /// Test the property 'AmountOtherWithholdingTaxTaxable'
        /// </summary>
        [Fact]
        public void AmountOtherWithholdingTaxTaxableTest()
        {
            Assert.IsType<decimal>(instance.AmountOtherWithholdingTaxTaxable);
        }
        /// <summary>
        /// Test the property 'EiCassaType'
        /// </summary>
        [Fact]
        public void EiCassaTypeTest()
        {
            Assert.IsType<string>(instance.EiCassaType);
        }
        /// <summary>
        /// Test the property 'EiCassa2Type'
        /// </summary>
        [Fact]
        public void EiCassa2TypeTest()
        {
            Assert.IsType<string>(instance.EiCassa2Type);
        }
        /// <summary>
        /// Test the property 'EiWithholdingTaxCausal'
        /// </summary>
        [Fact]
        public void EiWithholdingTaxCausalTest()
        {
            Assert.IsType<string>(instance.EiWithholdingTaxCausal);
        }
        /// <summary>
        /// Test the property 'EiOtherWithholdingTaxType'
        /// </summary>
        [Fact]
        public void EiOtherWithholdingTaxTypeTest()
        {
            Assert.IsType<string>(instance.EiOtherWithholdingTaxType);
        }
        /// <summary>
        /// Test the property 'EiOtherWithholdingTaxCausal'
        /// </summary>
        [Fact]
        public void EiOtherWithholdingTaxCausalTest()
        {
            Assert.IsType<string>(instance.EiOtherWithholdingTaxCausal);
        }
        /// <summary>
        /// Test the property 'AmountDueDiscount'
        /// </summary>
        [Fact]
        public void AmountDueDiscountTest()
        {
            Assert.IsType<decimal>(instance.AmountDueDiscount);
        }

    }

}
