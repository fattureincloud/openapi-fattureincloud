/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Model;
using It.FattureInCloud.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace It.FattureInCloud.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing Product
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ProductTests : IDisposable
    {
        private Product instance;

        public ProductTests()
        {
            var body = "{ 'id': 12345, 'name': 'Tavolo di marmo', 'code': 'TAVOLO003', 'net_price': 240, 'gross_price': 280, 'use_gross_price': false, 'net_cost': 0, 'measure': '', 'description': 'Tavolo in marmo pregiato', 'category': 'arredamento', 'in_stock': true, 'notes': '', 'stock_initial': 99, 'stock_current': 98, 'average_cost': 200, 'average_price': 300, 'created_at': '2021-10-10', 'updated_at': '', 'default_vat': { 'id': 3, 'value': 22, 'description': 'Non imponibile art. 123', 'notes': 'IVA non imponibile ai sensi dell articolo 123, comma 2', 'is_disabled': false } }";
            instance = JsonConvert.DeserializeObject<Product>(body);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Product
        /// </summary>
        [Fact]
        public void ProductInstanceTest()
        {
            Assert.IsType<Product>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            Assert.IsType<int>(instance.Id);
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            Assert.IsType<string>(instance.Name);
        }
        /// <summary>
        /// Test the property 'Code'
        /// </summary>
        [Fact]
        public void CodeTest()
        {
            Assert.IsType<string>(instance.Code);
        }
        /// <summary>
        /// Test the property 'NetPrice'
        /// </summary>
        [Fact]
        public void NetPriceTest()
        {
            Assert.IsType<decimal>(instance.NetPrice);
        }
        /// <summary>
        /// Test the property 'GrossPrice'
        /// </summary>
        [Fact]
        public void GrossPriceTest()
        {
            Assert.IsType<decimal>(instance.GrossPrice);
        }
        /// <summary>
        /// Test the property 'UseGrossPrice'
        /// </summary>
        [Fact]
        public void UseGrossPriceTest()
        {
            Assert.IsType<bool>(instance.UseGrossPrice);
        }
        /// <summary>
        /// Test the property 'DefaultVat'
        /// </summary>
        [Fact]
        public void DefaultVatTest()
        {
            Assert.IsType<VatType>(instance.DefaultVat);
        }
        /// <summary>
        /// Test the property 'NetCost'
        /// </summary>
        [Fact]
        public void NetCostTest()
        {
            Assert.IsType<decimal>(instance.NetCost);
        }
        /// <summary>
        /// Test the property 'Measure'
        /// </summary>
        [Fact]
        public void MeasureTest()
        {
            Assert.IsType<string>(instance.Measure);
        }
        /// <summary>
        /// Test the property 'Description'
        /// </summary>
        [Fact]
        public void DescriptionTest()
        {
            Assert.IsType<string>(instance.Description);
        }
        /// <summary>
        /// Test the property 'Category'
        /// </summary>
        [Fact]
        public void CategoryTest()
        {
            Assert.IsType<string>(instance.Category);
        }
        /// <summary>
        /// Test the property 'Notes'
        /// </summary>
        [Fact]
        public void NotesTest()
        {
            Assert.IsType<string>(instance.Notes);
        }
        /// <summary>
        /// Test the property 'InStock'
        /// </summary>
        [Fact]
        public void InStockTest()
        {
            Assert.IsType<bool>(instance.InStock);
        }
        /// <summary>
        /// Test the property 'StockInitial'
        /// </summary>
        [Fact]
        public void StockInitialTest()
        {
            Assert.IsType<decimal>(instance.StockInitial);
        }
        /// <summary>
        /// Test the property 'StockCurrent'
        /// </summary>
        [Fact]
        public void StockCurrentTest()
        {
            Assert.IsType<decimal>(instance.StockCurrent);
        }
        /// <summary>
        /// Test the property 'AverageCost'
        /// </summary>
        [Fact]
        public void AverageCostTest()
        {
            Assert.IsType<decimal>(instance.AverageCost);
        }
        /// <summary>
        /// Test the property 'AveragePrice'
        /// </summary>
        [Fact]
        public void AveragePriceTest()
        {
            Assert.IsType<decimal>(instance.AveragePrice);
        }
        /// <summary>
        /// Test the property 'CreatedAt'
        /// </summary>
        [Fact]
        public void CreatedAtTest()
        {
            Assert.IsType<string>(instance.CreatedAt);
        }
        /// <summary>
        /// Test the property 'UpdatedAt'
        /// </summary>
        [Fact]
        public void UpdatedAtTest()
        {
            Assert.IsType<string>(instance.UpdatedAt);
        }

    }

}
