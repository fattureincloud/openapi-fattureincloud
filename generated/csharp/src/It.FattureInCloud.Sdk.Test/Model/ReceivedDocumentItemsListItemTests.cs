/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Model;
using It.FattureInCloud.Sdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace It.FattureInCloud.Sdk.Test.Model
{
    /// <summary>
    ///  Class for testing ReceivedDocumentItemsListItem
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ReceivedDocumentItemsListItemTests : IDisposable
    {
        private ReceivedDocumentItemsListItem instance;

        public ReceivedDocumentItemsListItemTests()
        {
            var body = "{ 'id': 12345, 'product_id': 54321, 'code': 'pdr01', 'measure': 'very big', 'name': 'prod uan', 'net_price': 100, 'category': 'other', 'qty': 1, 'stock': 99, 'vat': { 'id': 1020, 'value': 0, 'description': 'PA Non imp art. 2', 'is_disabled': false } }";
            instance = JsonConvert.DeserializeObject<ReceivedDocumentItemsListItem>(body);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ReceivedDocumentItemsListItem
        /// </summary>
        [Fact]
        public void ReceivedDocumentItemsListInstanceTest()
        {
            Assert.IsType<ReceivedDocumentItemsListItem>(instance);
        }


        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Fact]
        public void IdTest()
        {
            Assert.IsType<int>(instance.Id);
        }
        /// <summary>
        /// Test the property 'ProductId'
        /// </summary>
        [Fact]
        public void ProductIdTest()
        {
            Assert.IsType<int>(instance.ProductId);
        }
        /// <summary>
        /// Test the property 'Code'
        /// </summary>
        [Fact]
        public void CodeTest()
        {
            Assert.IsType<string>(instance.Code);
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            Assert.IsType<string>(instance.Name);
        }
        /// <summary>
        /// Test the property 'Measure'
        /// </summary>
        [Fact]
        public void MeasureTest()
        {
            Assert.IsType<string>(instance.Measure);
        }
        /// <summary>
        /// Test the property 'NetPrice'
        /// </summary>
        [Fact]
        public void NetPriceTest()
        {
            Assert.IsType<decimal>(instance.NetPrice);
        }
        /// <summary>
        /// Test the property 'Category'
        /// </summary>
        [Fact]
        public void CategoryTest()
        {
            Assert.IsType<string>(instance.Category);
        }
        /// <summary>
        /// Test the property 'Qty'
        /// </summary>
        [Fact]
        public void QtyTest()
        {
            Assert.IsType<int>(instance.Id);
        }
        /// <summary>
        /// Test the property 'Vat'
        /// </summary>
        [Fact]
        public void VatTest()
        {
            Assert.IsType<decimal>(instance.Qty);
        }
        /// <summary>
        /// Test the property 'Stock'
        /// </summary>
        [Fact]
        public void StockTest()
        {
            Assert.IsType<decimal>(instance.Stock);
        }

    }

}
