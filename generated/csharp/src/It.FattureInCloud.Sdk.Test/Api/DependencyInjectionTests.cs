/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Api;
using It.FattureInCloud.Sdk.Extensions;
using Xunit;

namespace It.FattureInCloud.Sdk.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                OAuthToken oauthToken1 = new("token", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(oauthToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                OAuthToken oauthToken = new("token", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(oauthToken);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    OAuthToken oauthToken1 = new("token", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(oauthToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    OAuthToken oauthToken1 = new("token", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(oauthToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var archiveApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IArchiveApi>();
            Assert.True(archiveApi.HttpClient.BaseAddress != null);

            var cashbookApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICashbookApi>();
            Assert.True(cashbookApi.HttpClient.BaseAddress != null);

            var clientsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);

            var companiesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ICompaniesApi>();
            Assert.True(companiesApi.HttpClient.BaseAddress != null);

            var emailsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IEmailsApi>();
            Assert.True(emailsApi.HttpClient.BaseAddress != null);

            var infoApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IInfoApi>();
            Assert.True(infoApi.HttpClient.BaseAddress != null);

            var issuedDocumentsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IIssuedDocumentsApi>();
            Assert.True(issuedDocumentsApi.HttpClient.BaseAddress != null);

            var issuedEInvoicesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IIssuedEInvoicesApi>();
            Assert.True(issuedEInvoicesApi.HttpClient.BaseAddress != null);

            var priceListsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IPriceListsApi>();
            Assert.True(priceListsApi.HttpClient.BaseAddress != null);

            var productsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);

            var receiptsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReceiptsApi>();
            Assert.True(receiptsApi.HttpClient.BaseAddress != null);

            var receivedDocumentsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IReceivedDocumentsApi>();
            Assert.True(receivedDocumentsApi.HttpClient.BaseAddress != null);

            var settingsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISettingsApi>();
            Assert.True(settingsApi.HttpClient.BaseAddress != null);

            var suppliersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);

            var taxesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<ITaxesApi>();
            Assert.True(taxesApi.HttpClient.BaseAddress != null);

            var userApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var archiveApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IArchiveApi>();
            Assert.True(archiveApi.HttpClient.BaseAddress != null);

            var cashbookApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICashbookApi>();
            Assert.True(cashbookApi.HttpClient.BaseAddress != null);

            var clientsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);

            var companiesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ICompaniesApi>();
            Assert.True(companiesApi.HttpClient.BaseAddress != null);

            var emailsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IEmailsApi>();
            Assert.True(emailsApi.HttpClient.BaseAddress != null);

            var infoApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IInfoApi>();
            Assert.True(infoApi.HttpClient.BaseAddress != null);

            var issuedDocumentsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IIssuedDocumentsApi>();
            Assert.True(issuedDocumentsApi.HttpClient.BaseAddress != null);

            var issuedEInvoicesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IIssuedEInvoicesApi>();
            Assert.True(issuedEInvoicesApi.HttpClient.BaseAddress != null);

            var priceListsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IPriceListsApi>();
            Assert.True(priceListsApi.HttpClient.BaseAddress != null);

            var productsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);

            var receiptsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReceiptsApi>();
            Assert.True(receiptsApi.HttpClient.BaseAddress != null);

            var receivedDocumentsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IReceivedDocumentsApi>();
            Assert.True(receivedDocumentsApi.HttpClient.BaseAddress != null);

            var settingsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISettingsApi>();
            Assert.True(settingsApi.HttpClient.BaseAddress != null);

            var suppliersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);

            var taxesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<ITaxesApi>();
            Assert.True(taxesApi.HttpClient.BaseAddress != null);

            var userApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var archiveApi = _hostUsingAddWithAClient.Services.GetRequiredService<IArchiveApi>();
            Assert.True(archiveApi.HttpClient.BaseAddress != null);
            
            var cashbookApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICashbookApi>();
            Assert.True(cashbookApi.HttpClient.BaseAddress != null);
            
            var clientsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);
            
            var companiesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ICompaniesApi>();
            Assert.True(companiesApi.HttpClient.BaseAddress != null);
            
            var emailsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IEmailsApi>();
            Assert.True(emailsApi.HttpClient.BaseAddress != null);
            
            var infoApi = _hostUsingAddWithAClient.Services.GetRequiredService<IInfoApi>();
            Assert.True(infoApi.HttpClient.BaseAddress != null);
            
            var issuedDocumentsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IIssuedDocumentsApi>();
            Assert.True(issuedDocumentsApi.HttpClient.BaseAddress != null);
            
            var issuedEInvoicesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IIssuedEInvoicesApi>();
            Assert.True(issuedEInvoicesApi.HttpClient.BaseAddress != null);
            
            var priceListsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IPriceListsApi>();
            Assert.True(priceListsApi.HttpClient.BaseAddress != null);
            
            var productsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);
            
            var receiptsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReceiptsApi>();
            Assert.True(receiptsApi.HttpClient.BaseAddress != null);
            
            var receivedDocumentsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IReceivedDocumentsApi>();
            Assert.True(receivedDocumentsApi.HttpClient.BaseAddress != null);
            
            var settingsApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISettingsApi>();
            Assert.True(settingsApi.HttpClient.BaseAddress != null);
            
            var suppliersApi = _hostUsingAddWithAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);
            
            var taxesApi = _hostUsingAddWithAClient.Services.GetRequiredService<ITaxesApi>();
            Assert.True(taxesApi.HttpClient.BaseAddress != null);
            
            var userApi = _hostUsingAddWithAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);
            
            var webhooksApi = _hostUsingAddWithAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var archiveApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IArchiveApi>();
            Assert.True(archiveApi.HttpClient.BaseAddress != null);

            var cashbookApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICashbookApi>();
            Assert.True(cashbookApi.HttpClient.BaseAddress != null);

            var clientsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IClientsApi>();
            Assert.True(clientsApi.HttpClient.BaseAddress != null);

            var companiesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ICompaniesApi>();
            Assert.True(companiesApi.HttpClient.BaseAddress != null);

            var emailsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IEmailsApi>();
            Assert.True(emailsApi.HttpClient.BaseAddress != null);

            var infoApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IInfoApi>();
            Assert.True(infoApi.HttpClient.BaseAddress != null);

            var issuedDocumentsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IIssuedDocumentsApi>();
            Assert.True(issuedDocumentsApi.HttpClient.BaseAddress != null);

            var issuedEInvoicesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IIssuedEInvoicesApi>();
            Assert.True(issuedEInvoicesApi.HttpClient.BaseAddress != null);

            var priceListsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IPriceListsApi>();
            Assert.True(priceListsApi.HttpClient.BaseAddress != null);

            var productsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IProductsApi>();
            Assert.True(productsApi.HttpClient.BaseAddress != null);

            var receiptsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReceiptsApi>();
            Assert.True(receiptsApi.HttpClient.BaseAddress != null);

            var receivedDocumentsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IReceivedDocumentsApi>();
            Assert.True(receivedDocumentsApi.HttpClient.BaseAddress != null);

            var settingsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISettingsApi>();
            Assert.True(settingsApi.HttpClient.BaseAddress != null);

            var suppliersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ISuppliersApi>();
            Assert.True(suppliersApi.HttpClient.BaseAddress != null);

            var taxesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<ITaxesApi>();
            Assert.True(taxesApi.HttpClient.BaseAddress != null);

            var userApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IUserApi>();
            Assert.True(userApi.HttpClient.BaseAddress != null);

            var webhooksApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IWebhooksApi>();
            Assert.True(webhooksApi.HttpClient.BaseAddress != null);
        }
    }
}
