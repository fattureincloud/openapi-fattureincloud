/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.3
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;
using Moq;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Api;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing SuppliersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SuppliersApiTests : IDisposable
    {
        Mock<ISuppliersApi> instance = new Mock<ISuppliersApi>();
        string createSupplierResponseBody;
        string getSupplierResponseBody;
        string listSuppliersResponseBody;
        string modifySupplierResponseBody;

        public SuppliersApiTests()
        {
            createSupplierResponseBody = "{ 'data': { 'type': 'company', 'id': 12345, 'code': 'AE86', 'name': 'Mario Rossi S.R.L.', 'first_name': 'Mario', 'last_name': 'Rossi', 'contact_person': '', 'vat_number': '111222333', 'tax_code': '111122233', 'address_street': 'Corso Magellano, 46', 'address_postal_code': '20146', 'address_city': 'Milano', 'address_province': 'MI', 'address_extra': '', 'country': 'Italia', 'email': 'mario.rossi@example.com', 'certified_email': 'mario.rossi@pec.example.com', 'phone': '1234567890', 'fax': '123456789', 'notes': '' }}";
            var createSupplierResponse = JsonConvert.DeserializeObject<CreateSupplierResponse>(createSupplierResponseBody);
            instance
                .Setup(p => p.CreateSupplier(Moq.It.IsAny<int>(), Moq.It.IsAny<CreateSupplierRequest>(), 0))
                .Returns(createSupplierResponse);

            getSupplierResponseBody = "{ 'data': { 'type': 'company', 'id': 12345, 'code': 'AE86', 'name': 'Mario Rossi S.R.L.', 'first_name': 'Mario', 'last_name': 'Rossi', 'contact_person': '', 'vat_number': '111222333', 'tax_code': '111122233', 'address_street': 'Corso Magellano, 46', 'address_postal_code': '20146', 'address_city': 'Milano', 'address_province': 'MI', 'address_extra': '', 'country': 'Italia', 'email': 'mario.rossi@example.com', 'certified_email': 'mario.rossi@pec.example.com', 'phone': '1234567890', 'fax': '123456789', 'notes': '' }}";
            var getSupplierResponse = JsonConvert.DeserializeObject<GetSupplierResponse>(getSupplierResponseBody);
            instance
                .Setup(p => p.GetSupplier(Moq.It.IsAny<int>(), Moq.It.IsAny<int>(), Moq.It.IsAny<string>(), Moq.It.IsAny<string>(), 0))
                .Returns(getSupplierResponse);

            listSuppliersResponseBody = "{'first_page_url':'page=1','from':1,'last_page':2,'last_page_url':'page=2','next_page_url':'page=2','path':'/entities/suppliers','per_page':50,'to':55,'total':55,'data':[{'id':12345,'code':'AE86','name':'Mario Rossi S.R.L.','type':'company','first_name':'Mario','last_name':'Rossi','contact_person':'','vat_number':'111222333','tax_code':'111122233','address_street':'Corso Magellano, 46','address_postal_code':'20146','address_city':'Milano','address_province':'MI','address_extra':'','country':'Italia','email':'mario.rossi@example.com','certified_email':'mario.rossi@pec.example.com','phone':'1234567890','fax':'123456789','notes':'','created_at':'2021-15-08','updated_at':'2021-15-08'},{'id':12346,'code':'GT86','name':'Maria Grossi S.R.L.','type':'company','first_name':'','last_name':'','contact_person':'','vat_number':'200020102020','tax_code':'200020102020','address_street':'Vicolo stretto, 32','address_postal_code':'20146','address_city':'Milano','address_province':'MI','address_extra':'','country':'Italia','email':'maria.grossi@example.com','certified_email':'maria.grossi@pec.example.com','phone':'0987654321','fax':'098765432','notes':'','created_at':'2021-15-09','updated_at':'2021-15-09'}]}";
            var listSuppliersResponse = JsonConvert.DeserializeObject<ListSuppliersResponse>(listSuppliersResponseBody);
            instance
                .Setup(p => p.ListSuppliers(Moq.It.IsAny<int>(), Moq.It.IsAny<string>(), Moq.It.IsAny<string>(), Moq.It.IsAny<string>(), Moq.It.IsAny<int>(), Moq.It.IsAny<int>(), Moq.It.IsAny<string>(), 0))
                .Returns(listSuppliersResponse);

            modifySupplierResponseBody = "{ 'data': { 'type': 'company', 'id': 12345, 'code': 'AE86', 'name': 'Mario Rossi S.R.L.', 'first_name': 'Mario', 'last_name': 'Rossi', 'contact_person': '', 'vat_number': '111222333', 'tax_code': '111122233', 'address_street': 'Corso Magellano, 46', 'address_postal_code': '20146', 'address_city': 'Milano', 'address_province': 'MI', 'address_extra': '', 'country': 'Italia', 'email': 'mario.rossi@example.com', 'certified_email': 'mario.rossi@pec.example.com', 'phone': '1234567890', 'fax': '123456789', 'notes': '' }}";
            var modifySupplierResponse = JsonConvert.DeserializeObject<ModifySupplierResponse>(modifySupplierResponseBody);
            instance
                .Setup(p => p.ModifySupplier(Moq.It.IsAny<int>(), Moq.It.IsAny<int>(), Moq.It.IsAny<ModifySupplierRequest>(), 0))
                .Returns(modifySupplierResponse);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SuppliersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            Assert.IsType<Mock<ISuppliersApi>>(instance);
        }

        /// <summary>
        /// Test CreateSupplier
        /// </summary>
        [Fact]
        public void CreateSupplierTest()
        {
            int companyId = 2;
            CreateSupplierRequest createSupplierRequest = new CreateSupplierRequest();

            var response = instance.Object.CreateSupplier(companyId, createSupplierRequest);
            JObject obj = JObject.Parse(createSupplierResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }

        /// <summary>
        /// Test DeleteSupplier
        /// </summary>
        [Fact]
        public void DeleteSupplierTest()
        {
            Assert.True(true);
        }

        /// <summary>
        /// Test GetSupplier
        /// </summary>
        [Fact]
        public void GetSupplierTest()
        {
            int companyId = 2;
            int supplierId = 12345;
            string fields = "";
            string fieldset = "";

            var response = instance.Object.GetSupplier(companyId, supplierId, fields, fieldset);
            JObject obj = JObject.Parse(getSupplierResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }

        /// <summary>
        /// Test ListSuppliers
        /// </summary>
        [Fact]
        public void ListSuppliersTest()
        {
            int companyId = 1;
            string fields = "";
            string fieldset = "";
            string sort = "";
            int? page = 5;
            int? perPage = 5;
            var response = instance.Object.ListSuppliers(companyId, fields, fieldset, sort, page, perPage);
            JObject obj = JObject.Parse(listSuppliersResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }

        /// <summary>
        /// Test ModifySupplier
        /// </summary>
        [Fact]
        public void ModifySupplierTest()
        {
            int companyId = 2;
            int supplierId = 12345;
            ModifySupplierRequest modifySupplierRequest = new ModifySupplierRequest();

            var response = instance.Object.ModifySupplier(companyId, supplierId, modifySupplierRequest);
            JObject obj = JObject.Parse(modifySupplierResponseBody);

            Assert.True(JToken.DeepEquals(obj, JObject.FromObject(response)));
        }
    }
}
