/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Register some webhooks Subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWebhooksSubscriptionResponse</returns>
        CreateWebhooksSubscriptionResponse CreateWebhooksSubscription(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Register some webhooks Subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWebhooksSubscriptionResponse</returns>
        ApiResponse<CreateWebhooksSubscriptionResponse> CreateWebhooksSubscriptionWithHttpInfo(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0);
        /// <summary>
        /// Delete Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhooksSubscription(int companyId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// Delete Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// Get Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Get a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWebhooksSubscriptionResponse</returns>
        GetWebhooksSubscriptionResponse GetWebhooksSubscription(int companyId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// Get Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Get a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWebhooksSubscriptionResponse</returns>
        ApiResponse<GetWebhooksSubscriptionResponse> GetWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// List Webhooks Subscriptions
        /// </summary>
        /// <remarks>
        /// List active webhooks subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWebhooksSubscriptionsResponse</returns>
        ListWebhooksSubscriptionsResponse ListWebhooksSubscriptions(int companyId, int operationIndex = 0);

        /// <summary>
        /// List Webhooks Subscriptions
        /// </summary>
        /// <remarks>
        /// List active webhooks subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWebhooksSubscriptionsResponse</returns>
        ApiResponse<ListWebhooksSubscriptionsResponse> ListWebhooksSubscriptionsWithHttpInfo(int companyId, int operationIndex = 0);
        /// <summary>
        /// Modify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Edit a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyWebhooksSubscriptionResponse</returns>
        ModifyWebhooksSubscriptionResponse ModifyWebhooksSubscription(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0);

        /// <summary>
        /// Modify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Edit a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyWebhooksSubscriptionResponse</returns>
        ApiResponse<ModifyWebhooksSubscriptionResponse> ModifyWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0);
        /// <summary>
        /// Verify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Verify a webhook subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void VerifyWebhooksSubscription(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0);

        /// <summary>
        /// Verify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Verify a webhook subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerifyWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Register some webhooks Subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebhooksSubscriptionResponse</returns>
        System.Threading.Tasks.Task<CreateWebhooksSubscriptionResponse> CreateWebhooksSubscriptionAsync(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a Webhook Subscription
        /// </summary>
        /// <remarks>
        /// Register some webhooks Subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebhooksSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWebhooksSubscriptionResponse>> CreateWebhooksSubscriptionWithHttpInfoAsync(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhooksSubscriptionAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Delete a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Get a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhooksSubscriptionResponse</returns>
        System.Threading.Tasks.Task<GetWebhooksSubscriptionResponse> GetWebhooksSubscriptionAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Get a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhooksSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhooksSubscriptionResponse>> GetWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Webhooks Subscriptions
        /// </summary>
        /// <remarks>
        /// List active webhooks subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWebhooksSubscriptionsResponse</returns>
        System.Threading.Tasks.Task<ListWebhooksSubscriptionsResponse> ListWebhooksSubscriptionsAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Webhooks Subscriptions
        /// </summary>
        /// <remarks>
        /// List active webhooks subscriptions.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWebhooksSubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWebhooksSubscriptionsResponse>> ListWebhooksSubscriptionsWithHttpInfoAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Modify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Edit a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyWebhooksSubscriptionResponse</returns>
        System.Threading.Tasks.Task<ModifyWebhooksSubscriptionResponse> ModifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Edit a webhooks subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyWebhooksSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyWebhooksSubscriptionResponse>> ModifyWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Verify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Verify a webhook subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VerifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Verify Webhooks Subscription
        /// </summary>
        /// <remarks>
        /// Verify a webhook subscription.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifyWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private It.FattureInCloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(string basePath)
        {
            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                new It.FattureInCloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(It.FattureInCloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(It.FattureInCloud.Sdk.Client.ISynchronousClient client, It.FattureInCloud.Sdk.Client.IAsynchronousClient asyncClient, It.FattureInCloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public It.FattureInCloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Webhook Subscription Register some webhooks Subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWebhooksSubscriptionResponse</returns>
        public CreateWebhooksSubscriptionResponse CreateWebhooksSubscription(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateWebhooksSubscriptionResponse> localVarResponse = CreateWebhooksSubscriptionWithHttpInfo(companyId, createWebhooksSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Webhook Subscription Register some webhooks Subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWebhooksSubscriptionResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<CreateWebhooksSubscriptionResponse> CreateWebhooksSubscriptionWithHttpInfo(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->CreateWebhooksSubscription");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createWebhooksSubscriptionRequest;

            localVarRequestOptions.Operation = "WebhooksApi.CreateWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWebhooksSubscriptionResponse>("/c/{company_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Webhook Subscription Register some webhooks Subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWebhooksSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<CreateWebhooksSubscriptionResponse> CreateWebhooksSubscriptionAsync(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateWebhooksSubscriptionResponse> localVarResponse = await CreateWebhooksSubscriptionWithHttpInfoAsync(companyId, createWebhooksSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Webhook Subscription Register some webhooks Subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWebhooksSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<CreateWebhooksSubscriptionResponse>> CreateWebhooksSubscriptionWithHttpInfoAsync(int companyId, CreateWebhooksSubscriptionRequest createWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->CreateWebhooksSubscription");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createWebhooksSubscriptionRequest;

            localVarRequestOptions.Operation = "WebhooksApi.CreateWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWebhooksSubscriptionResponse>("/c/{company_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhooks Subscription Delete a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhooksSubscription(int companyId, string subscriptionId, int operationIndex = 0)
        {
            DeleteWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId);
        }

        /// <summary>
        /// Delete Webhooks Subscription Delete a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->DeleteWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->DeleteWebhooksSubscription");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhooks Subscription Delete a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhooksSubscriptionAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteWebhooksSubscriptionWithHttpInfoAsync(companyId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Webhooks Subscription Delete a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->DeleteWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->DeleteWebhooksSubscription");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.DeleteWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhooks Subscription Get a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWebhooksSubscriptionResponse</returns>
        public GetWebhooksSubscriptionResponse GetWebhooksSubscription(int companyId, string subscriptionId, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetWebhooksSubscriptionResponse> localVarResponse = GetWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhooks Subscription Get a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWebhooksSubscriptionResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetWebhooksSubscriptionResponse> GetWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->GetWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->GetWebhooksSubscription");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWebhooksSubscriptionResponse>("/c/{company_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhooks Subscription Get a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhooksSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhooksSubscriptionResponse> GetWebhooksSubscriptionAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetWebhooksSubscriptionResponse> localVarResponse = await GetWebhooksSubscriptionWithHttpInfoAsync(companyId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhooks Subscription Get a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhooksSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetWebhooksSubscriptionResponse>> GetWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->GetWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->GetWebhooksSubscription");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.GetWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWebhooksSubscriptionResponse>("/c/{company_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks Subscriptions List active webhooks subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWebhooksSubscriptionsResponse</returns>
        public ListWebhooksSubscriptionsResponse ListWebhooksSubscriptions(int companyId, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListWebhooksSubscriptionsResponse> localVarResponse = ListWebhooksSubscriptionsWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks Subscriptions List active webhooks subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWebhooksSubscriptionsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ListWebhooksSubscriptionsResponse> ListWebhooksSubscriptionsWithHttpInfo(int companyId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->ListWebhooksSubscriptions");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.ListWebhooksSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListWebhooksSubscriptionsResponse>("/c/{company_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebhooksSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks Subscriptions List active webhooks subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWebhooksSubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<ListWebhooksSubscriptionsResponse> ListWebhooksSubscriptionsAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListWebhooksSubscriptionsResponse> localVarResponse = await ListWebhooksSubscriptionsWithHttpInfoAsync(companyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks Subscriptions List active webhooks subscriptions.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWebhooksSubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ListWebhooksSubscriptionsResponse>> ListWebhooksSubscriptionsWithHttpInfoAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->ListWebhooksSubscriptions");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter

            localVarRequestOptions.Operation = "WebhooksApi.ListWebhooksSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListWebhooksSubscriptionsResponse>("/c/{company_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebhooksSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Webhooks Subscription Edit a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyWebhooksSubscriptionResponse</returns>
        public ModifyWebhooksSubscriptionResponse ModifyWebhooksSubscription(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyWebhooksSubscriptionResponse> localVarResponse = ModifyWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId, modifyWebhooksSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Webhooks Subscription Edit a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyWebhooksSubscriptionResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ModifyWebhooksSubscriptionResponse> ModifyWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->ModifyWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->ModifyWebhooksSubscription");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = modifyWebhooksSubscriptionRequest;

            localVarRequestOptions.Operation = "WebhooksApi.ModifyWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyWebhooksSubscriptionResponse>("/c/{company_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Webhooks Subscription Edit a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyWebhooksSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<ModifyWebhooksSubscriptionResponse> ModifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyWebhooksSubscriptionResponse> localVarResponse = await ModifyWebhooksSubscriptionWithHttpInfoAsync(companyId, subscriptionId, modifyWebhooksSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Webhooks Subscription Edit a webhooks subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="modifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyWebhooksSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ModifyWebhooksSubscriptionResponse>> ModifyWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, ModifyWebhooksSubscriptionRequest modifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->ModifyWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->ModifyWebhooksSubscription");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = modifyWebhooksSubscriptionRequest;

            localVarRequestOptions.Operation = "WebhooksApi.ModifyWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyWebhooksSubscriptionResponse>("/c/{company_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Webhooks Subscription Verify a webhook subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void VerifyWebhooksSubscription(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0)
        {
            VerifyWebhooksSubscriptionWithHttpInfo(companyId, subscriptionId, verifyWebhooksSubscriptionRequest);
        }

        /// <summary>
        /// Verify Webhooks Subscription Verify a webhook subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> VerifyWebhooksSubscriptionWithHttpInfo(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->VerifyWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->VerifyWebhooksSubscription");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = verifyWebhooksSubscriptionRequest;

            localVarRequestOptions.Operation = "WebhooksApi.VerifyWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/c/{company_id}/subscriptions/{subscription_id}/verify", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify Webhooks Subscription Verify a webhook subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VerifyWebhooksSubscriptionAsync(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await VerifyWebhooksSubscriptionWithHttpInfoAsync(companyId, subscriptionId, verifyWebhooksSubscriptionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Verify Webhooks Subscription Verify a webhook subscription.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="subscriptionId">The ID of the subscription.</param>
        /// <param name="verifyWebhooksSubscriptionRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> VerifyWebhooksSubscriptionWithHttpInfoAsync(int companyId, string subscriptionId, VerifyWebhooksSubscriptionRequest verifyWebhooksSubscriptionRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling WebhooksApi->VerifyWebhooksSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling WebhooksApi->VerifyWebhooksSubscription");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = verifyWebhooksSubscriptionRequest;

            localVarRequestOptions.Operation = "WebhooksApi.VerifyWebhooksSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/c/{company_id}/subscriptions/{subscription_id}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyWebhooksSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
