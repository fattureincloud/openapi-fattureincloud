/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuedDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Issued Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateIssuedDocumentResponse</returns>
        CreateIssuedDocumentResponse CreateIssuedDocument(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create Issued Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateIssuedDocumentResponse</returns>
        ApiResponse<CreateIssuedDocumentResponse> CreateIssuedDocumentWithHttpInfo(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0);
        /// <summary>
        /// Delete Bin Issued Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Issued Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteBinIssuedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Delete Bin Issued Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Issued Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBinIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Delete Issued Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteIssuedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Delete Issued Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Delete Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteIssuedDocumentAttachment(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Delete Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteIssuedDocumentAttachmentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBinIssuedDocumentResponse</returns>
        GetBinIssuedDocumentResponse GetBinIssuedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBinIssuedDocumentResponse</returns>
        ApiResponse<GetBinIssuedDocumentResponse> GetBinIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Get Email Data
        /// </summary>
        /// <remarks>
        /// Gets the pre-compiled email details.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailDataResponse</returns>
        GetEmailDataResponse GetEmailData(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Get Email Data
        /// </summary>
        /// <remarks>
        /// Gets the pre-compiled email details.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailDataResponse</returns>
        ApiResponse<GetEmailDataResponse> GetEmailDataWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Get Existing Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExistingIssuedDocumentTotalsResponse</returns>
        GetExistingIssuedDocumentTotalsResponse GetExistingIssuedDocumentTotals(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0);

        /// <summary>
        /// Get Existing Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExistingIssuedDocumentTotalsResponse</returns>
        ApiResponse<GetExistingIssuedDocumentTotalsResponse> GetExistingIssuedDocumentTotalsWithHttpInfo(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0);
        /// <summary>
        /// Get Issued Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document. 
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuedDocumentResponse</returns>
        GetIssuedDocumentResponse GetIssuedDocument(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0);

        /// <summary>
        /// Get Issued Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document. 
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuedDocumentResponse</returns>
        ApiResponse<GetIssuedDocumentResponse> GetIssuedDocumentWithHttpInfo(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0);
        /// <summary>
        /// Get Issued Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuedDocumentPreCreateInfoResponse</returns>
        GetIssuedDocumentPreCreateInfoResponse GetIssuedDocumentPreCreateInfo(int companyId, string type, int operationIndex = 0);

        /// <summary>
        /// Get Issued Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuedDocumentPreCreateInfoResponse</returns>
        ApiResponse<GetIssuedDocumentPreCreateInfoResponse> GetIssuedDocumentPreCreateInfoWithHttpInfo(int companyId, string type, int operationIndex = 0);
        /// <summary>
        /// Get New Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNewIssuedDocumentTotalsResponse</returns>
        GetNewIssuedDocumentTotalsResponse GetNewIssuedDocumentTotals(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0);

        /// <summary>
        /// Get New Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNewIssuedDocumentTotalsResponse</returns>
        ApiResponse<GetNewIssuedDocumentTotalsResponse> GetNewIssuedDocumentTotalsWithHttpInfo(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0);
        /// <summary>
        /// Join Issued Documents
        /// </summary>
        /// <remarks>
        /// Joins issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JoinIssuedDocumentsResponse</returns>
        JoinIssuedDocumentsResponse JoinIssuedDocuments(int companyId, string ids, int group = default, string type = default, int operationIndex = 0);

        /// <summary>
        /// Join Issued Documents
        /// </summary>
        /// <remarks>
        /// Joins issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JoinIssuedDocumentsResponse</returns>
        ApiResponse<JoinIssuedDocumentsResponse> JoinIssuedDocumentsWithHttpInfo(int companyId, string ids, int group = default, string type = default, int operationIndex = 0);
        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListBinIssuedDocuments</returns>
        ListBinIssuedDocuments ListBinIssuedDocuments(int companyId, int operationIndex = 0);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListBinIssuedDocuments</returns>
        ApiResponse<ListBinIssuedDocuments> ListBinIssuedDocumentsWithHttpInfo(int companyId, int operationIndex = 0);
        /// <summary>
        /// List Issued Documents
        /// </summary>
        /// <remarks>
        /// Lists the issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListIssuedDocumentsResponse</returns>
        ListIssuedDocumentsResponse ListIssuedDocuments(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0);

        /// <summary>
        /// List Issued Documents
        /// </summary>
        /// <remarks>
        /// Lists the issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListIssuedDocumentsResponse</returns>
        ApiResponse<ListIssuedDocumentsResponse> ListIssuedDocumentsWithHttpInfo(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0);
        /// <summary>
        /// Modify Issued Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyIssuedDocumentResponse</returns>
        ModifyIssuedDocumentResponse ModifyIssuedDocument(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0);

        /// <summary>
        /// Modify Issued Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyIssuedDocumentResponse</returns>
        ApiResponse<ModifyIssuedDocumentResponse> ModifyIssuedDocumentWithHttpInfo(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0);
        /// <summary>
        /// Recover Issued Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Issued Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RecoverBinIssuedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Recover Issued Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Issued Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecoverBinIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Schedule Email
        /// </summary>
        /// <remarks>
        /// Schedules the sending of a document by email.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ScheduleEmail(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0);

        /// <summary>
        /// Schedule Email
        /// </summary>
        /// <remarks>
        /// Schedules the sending of a document by email.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ScheduleEmailWithHttpInfo(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0);
        /// <summary>
        /// Transform Issued Document
        /// </summary>
        /// <remarks>
        /// Transforms the document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransformIssuedDocumentResponse</returns>
        TransformIssuedDocumentResponse TransformIssuedDocument(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0);

        /// <summary>
        /// Transform Issued Document
        /// </summary>
        /// <remarks>
        /// Transforms the document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransformIssuedDocumentResponse</returns>
        ApiResponse<TransformIssuedDocumentResponse> TransformIssuedDocumentWithHttpInfo(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0);
        /// <summary>
        /// Upload Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadIssuedDocumentAttachmentResponse</returns>
        UploadIssuedDocumentAttachmentResponse UploadIssuedDocumentAttachment(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0);

        /// <summary>
        /// Upload Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadIssuedDocumentAttachmentResponse</returns>
        ApiResponse<UploadIssuedDocumentAttachmentResponse> UploadIssuedDocumentAttachmentWithHttpInfo(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuedDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Issued Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateIssuedDocumentResponse</returns>
        System.Threading.Tasks.Task<CreateIssuedDocumentResponse> CreateIssuedDocumentAsync(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Issued Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateIssuedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateIssuedDocumentResponse>> CreateIssuedDocumentWithHttpInfoAsync(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Bin Issued Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Issued Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBinIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Bin Issued Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Issued Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBinIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Issued Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Issued Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteIssuedDocumentAttachmentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteIssuedDocumentAttachmentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBinIssuedDocumentResponse</returns>
        System.Threading.Tasks.Task<GetBinIssuedDocumentResponse> GetBinIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBinIssuedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBinIssuedDocumentResponse>> GetBinIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Email Data
        /// </summary>
        /// <remarks>
        /// Gets the pre-compiled email details.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailDataResponse</returns>
        System.Threading.Tasks.Task<GetEmailDataResponse> GetEmailDataAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Email Data
        /// </summary>
        /// <remarks>
        /// Gets the pre-compiled email details.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailDataResponse>> GetEmailDataWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Existing Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExistingIssuedDocumentTotalsResponse</returns>
        System.Threading.Tasks.Task<GetExistingIssuedDocumentTotalsResponse> GetExistingIssuedDocumentTotalsAsync(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Existing Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExistingIssuedDocumentTotalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExistingIssuedDocumentTotalsResponse>> GetExistingIssuedDocumentTotalsWithHttpInfoAsync(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Issued Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document. 
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuedDocumentResponse</returns>
        System.Threading.Tasks.Task<GetIssuedDocumentResponse> GetIssuedDocumentAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Issued Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document. 
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIssuedDocumentResponse>> GetIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Issued Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuedDocumentPreCreateInfoResponse</returns>
        System.Threading.Tasks.Task<GetIssuedDocumentPreCreateInfoResponse> GetIssuedDocumentPreCreateInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Issued Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuedDocumentPreCreateInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIssuedDocumentPreCreateInfoResponse>> GetIssuedDocumentPreCreateInfoWithHttpInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get New Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNewIssuedDocumentTotalsResponse</returns>
        System.Threading.Tasks.Task<GetNewIssuedDocumentTotalsResponse> GetNewIssuedDocumentTotalsAsync(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get New Issued Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNewIssuedDocumentTotalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetNewIssuedDocumentTotalsResponse>> GetNewIssuedDocumentTotalsWithHttpInfoAsync(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Join Issued Documents
        /// </summary>
        /// <remarks>
        /// Joins issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JoinIssuedDocumentsResponse</returns>
        System.Threading.Tasks.Task<JoinIssuedDocumentsResponse> JoinIssuedDocumentsAsync(int companyId, string ids, int group = default, string type = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Join Issued Documents
        /// </summary>
        /// <remarks>
        /// Joins issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JoinIssuedDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JoinIssuedDocumentsResponse>> JoinIssuedDocumentsWithHttpInfoAsync(int companyId, string ids, int group = default, string type = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBinIssuedDocuments</returns>
        System.Threading.Tasks.Task<ListBinIssuedDocuments> ListBinIssuedDocumentsAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Issued Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBinIssuedDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListBinIssuedDocuments>> ListBinIssuedDocumentsWithHttpInfoAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Issued Documents
        /// </summary>
        /// <remarks>
        /// Lists the issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIssuedDocumentsResponse</returns>
        System.Threading.Tasks.Task<ListIssuedDocumentsResponse> ListIssuedDocumentsAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Issued Documents
        /// </summary>
        /// <remarks>
        /// Lists the issued documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIssuedDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListIssuedDocumentsResponse>> ListIssuedDocumentsWithHttpInfoAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Modify Issued Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyIssuedDocumentResponse</returns>
        System.Threading.Tasks.Task<ModifyIssuedDocumentResponse> ModifyIssuedDocumentAsync(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Issued Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyIssuedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyIssuedDocumentResponse>> ModifyIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Recover Issued Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Issued Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecoverBinIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recover Issued Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Issued Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecoverBinIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Schedule Email
        /// </summary>
        /// <remarks>
        /// Schedules the sending of a document by email.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ScheduleEmailAsync(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule Email
        /// </summary>
        /// <remarks>
        /// Schedules the sending of a document by email.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScheduleEmailWithHttpInfoAsync(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Transform Issued Document
        /// </summary>
        /// <remarks>
        /// Transforms the document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransformIssuedDocumentResponse</returns>
        System.Threading.Tasks.Task<TransformIssuedDocumentResponse> TransformIssuedDocumentAsync(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transform Issued Document
        /// </summary>
        /// <remarks>
        /// Transforms the document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransformIssuedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransformIssuedDocumentResponse>> TransformIssuedDocumentWithHttpInfoAsync(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Upload Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadIssuedDocumentAttachmentResponse</returns>
        System.Threading.Tasks.Task<UploadIssuedDocumentAttachmentResponse> UploadIssuedDocumentAttachmentAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Issued Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadIssuedDocumentAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadIssuedDocumentAttachmentResponse>> UploadIssuedDocumentAttachmentWithHttpInfoAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIssuedDocumentsApi : IIssuedDocumentsApiSync, IIssuedDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IssuedDocumentsApi : IIssuedDocumentsApi
    {
        private It.FattureInCloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuedDocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IssuedDocumentsApi(string basePath)
        {
            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                new It.FattureInCloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IssuedDocumentsApi(It.FattureInCloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IssuedDocumentsApi(It.FattureInCloud.Sdk.Client.ISynchronousClient client, It.FattureInCloud.Sdk.Client.IAsynchronousClient asyncClient, It.FattureInCloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public It.FattureInCloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Issued Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateIssuedDocumentResponse</returns>
        public CreateIssuedDocumentResponse CreateIssuedDocument(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateIssuedDocumentResponse> localVarResponse = CreateIssuedDocumentWithHttpInfo(companyId, createIssuedDocumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Issued Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateIssuedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<CreateIssuedDocumentResponse> CreateIssuedDocumentWithHttpInfo(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->CreateIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createIssuedDocumentRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.CreateIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateIssuedDocumentResponse>("/c/{company_id}/issued_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Issued Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateIssuedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<CreateIssuedDocumentResponse> CreateIssuedDocumentAsync(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateIssuedDocumentResponse> localVarResponse = await CreateIssuedDocumentWithHttpInfoAsync(companyId, createIssuedDocumentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Issued Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createIssuedDocumentRequest">The Issued Document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateIssuedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<CreateIssuedDocumentResponse>> CreateIssuedDocumentWithHttpInfoAsync(int companyId, CreateIssuedDocumentRequest createIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->CreateIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createIssuedDocumentRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.CreateIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateIssuedDocumentResponse>("/c/{company_id}/issued_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Bin Issued Document Delete Bin Issued Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteBinIssuedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            DeleteBinIssuedDocumentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Delete Bin Issued Document Delete Bin Issued Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteBinIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->DeleteBinIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->DeleteBinIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.DeleteBinIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/bin/issued_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBinIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Bin Issued Document Delete Bin Issued Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBinIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteBinIssuedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Bin Issued Document Delete Bin Issued Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteBinIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->DeleteBinIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->DeleteBinIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.DeleteBinIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/bin/issued_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBinIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Issued Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteIssuedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            DeleteIssuedDocumentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Delete Issued Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->DeleteIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->DeleteIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.DeleteIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/issued_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Issued Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteIssuedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Issued Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->DeleteIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->DeleteIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.DeleteIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/issued_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Issued Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteIssuedDocumentAttachment(int companyId, int documentId, int operationIndex = 0)
        {
            DeleteIssuedDocumentAttachmentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Delete Issued Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteIssuedDocumentAttachmentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->DeleteIssuedDocumentAttachment");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->DeleteIssuedDocumentAttachment");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.DeleteIssuedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/issued_documents/{document_id}/attachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIssuedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Issued Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteIssuedDocumentAttachmentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteIssuedDocumentAttachmentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Issued Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteIssuedDocumentAttachmentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->DeleteIssuedDocumentAttachment");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->DeleteIssuedDocumentAttachment");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.DeleteIssuedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/issued_documents/{document_id}/attachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteIssuedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBinIssuedDocumentResponse</returns>
        public GetBinIssuedDocumentResponse GetBinIssuedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse> localVarResponse = GetBinIssuedDocumentWithHttpInfo(companyId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBinIssuedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse> GetBinIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetBinIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetBinIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetBinIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBinIssuedDocumentResponse>("/c/{company_id}/bin/issued_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBinIssuedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetBinIssuedDocumentResponse> GetBinIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse> localVarResponse = await GetBinIssuedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBinIssuedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse>> GetBinIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetBinIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetBinIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetBinIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBinIssuedDocumentResponse>("/c/{company_id}/bin/issued_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Data Gets the pre-compiled email details.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailDataResponse</returns>
        public GetEmailDataResponse GetEmailData(int companyId, int documentId, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetEmailDataResponse> localVarResponse = GetEmailDataWithHttpInfo(companyId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Data Gets the pre-compiled email details.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailDataResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetEmailDataResponse> GetEmailDataWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetEmailData");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetEmailData");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetEmailData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailDataResponse>("/c/{company_id}/issued_documents/{document_id}/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Email Data Gets the pre-compiled email details.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailDataResponse</returns>
        public async System.Threading.Tasks.Task<GetEmailDataResponse> GetEmailDataAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetEmailDataResponse> localVarResponse = await GetEmailDataWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Data Gets the pre-compiled email details.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailDataResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetEmailDataResponse>> GetEmailDataWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetEmailData");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetEmailData");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetEmailData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailDataResponse>("/c/{company_id}/issued_documents/{document_id}/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Existing Issued Document Totals Returns the totals for a specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExistingIssuedDocumentTotalsResponse</returns>
        public GetExistingIssuedDocumentTotalsResponse GetExistingIssuedDocumentTotals(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingIssuedDocumentTotalsResponse> localVarResponse = GetExistingIssuedDocumentTotalsWithHttpInfo(companyId, documentId, getExistingIssuedDocumentTotalsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Existing Issued Document Totals Returns the totals for a specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExistingIssuedDocumentTotalsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingIssuedDocumentTotalsResponse> GetExistingIssuedDocumentTotalsWithHttpInfo(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetExistingIssuedDocumentTotals");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetExistingIssuedDocumentTotals");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = getExistingIssuedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetExistingIssuedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetExistingIssuedDocumentTotalsResponse>("/c/{company_id}/issued_documents/{document_id}/totals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExistingIssuedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Existing Issued Document Totals Returns the totals for a specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExistingIssuedDocumentTotalsResponse</returns>
        public async System.Threading.Tasks.Task<GetExistingIssuedDocumentTotalsResponse> GetExistingIssuedDocumentTotalsAsync(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingIssuedDocumentTotalsResponse> localVarResponse = await GetExistingIssuedDocumentTotalsWithHttpInfoAsync(companyId, documentId, getExistingIssuedDocumentTotalsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Existing Issued Document Totals Returns the totals for a specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExistingIssuedDocumentTotalsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingIssuedDocumentTotalsResponse>> GetExistingIssuedDocumentTotalsWithHttpInfoAsync(int companyId, int documentId, GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetExistingIssuedDocumentTotals");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetExistingIssuedDocumentTotals");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = getExistingIssuedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetExistingIssuedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetExistingIssuedDocumentTotalsResponse>("/c/{company_id}/issued_documents/{document_id}/totals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExistingIssuedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Issued Document Gets the specified document. 
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuedDocumentResponse</returns>
        public GetIssuedDocumentResponse GetIssuedDocument(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentResponse> localVarResponse = GetIssuedDocumentWithHttpInfo(companyId, documentId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Issued Document Gets the specified document. 
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentResponse> GetIssuedDocumentWithHttpInfo(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIssuedDocumentResponse>("/c/{company_id}/issued_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Issued Document Gets the specified document. 
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetIssuedDocumentResponse> GetIssuedDocumentAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentResponse> localVarResponse = await GetIssuedDocumentWithHttpInfoAsync(companyId, documentId, fields, fieldset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Issued Document Gets the specified document. 
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentResponse>> GetIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->GetIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIssuedDocumentResponse>("/c/{company_id}/issued_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Issued Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIssuedDocumentPreCreateInfoResponse</returns>
        public GetIssuedDocumentPreCreateInfoResponse GetIssuedDocumentPreCreateInfo(int companyId, string type, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentPreCreateInfoResponse> localVarResponse = GetIssuedDocumentPreCreateInfoWithHttpInfo(companyId, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Issued Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIssuedDocumentPreCreateInfoResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentPreCreateInfoResponse> GetIssuedDocumentPreCreateInfoWithHttpInfo(int companyId, string type, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetIssuedDocumentPreCreateInfo");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling IssuedDocumentsApi->GetIssuedDocumentPreCreateInfo");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetIssuedDocumentPreCreateInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIssuedDocumentPreCreateInfoResponse>("/c/{company_id}/issued_documents/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocumentPreCreateInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Issued Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIssuedDocumentPreCreateInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetIssuedDocumentPreCreateInfoResponse> GetIssuedDocumentPreCreateInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentPreCreateInfoResponse> localVarResponse = await GetIssuedDocumentPreCreateInfoWithHttpInfoAsync(companyId, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Issued Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIssuedDocumentPreCreateInfoResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetIssuedDocumentPreCreateInfoResponse>> GetIssuedDocumentPreCreateInfoWithHttpInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetIssuedDocumentPreCreateInfo");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling IssuedDocumentsApi->GetIssuedDocumentPreCreateInfo");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetIssuedDocumentPreCreateInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIssuedDocumentPreCreateInfoResponse>("/c/{company_id}/issued_documents/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIssuedDocumentPreCreateInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get New Issued Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNewIssuedDocumentTotalsResponse</returns>
        public GetNewIssuedDocumentTotalsResponse GetNewIssuedDocumentTotals(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetNewIssuedDocumentTotalsResponse> localVarResponse = GetNewIssuedDocumentTotalsWithHttpInfo(companyId, getNewIssuedDocumentTotalsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get New Issued Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNewIssuedDocumentTotalsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetNewIssuedDocumentTotalsResponse> GetNewIssuedDocumentTotalsWithHttpInfo(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetNewIssuedDocumentTotals");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = getNewIssuedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetNewIssuedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetNewIssuedDocumentTotalsResponse>("/c/{company_id}/issued_documents/totals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewIssuedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get New Issued Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNewIssuedDocumentTotalsResponse</returns>
        public async System.Threading.Tasks.Task<GetNewIssuedDocumentTotalsResponse> GetNewIssuedDocumentTotalsAsync(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetNewIssuedDocumentTotalsResponse> localVarResponse = await GetNewIssuedDocumentTotalsWithHttpInfoAsync(companyId, getNewIssuedDocumentTotalsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get New Issued Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewIssuedDocumentTotalsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNewIssuedDocumentTotalsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetNewIssuedDocumentTotalsResponse>> GetNewIssuedDocumentTotalsWithHttpInfoAsync(int companyId, GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->GetNewIssuedDocumentTotals");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = getNewIssuedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.GetNewIssuedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetNewIssuedDocumentTotalsResponse>("/c/{company_id}/issued_documents/totals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewIssuedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join Issued Documents Joins issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>JoinIssuedDocumentsResponse</returns>
        public JoinIssuedDocumentsResponse JoinIssuedDocuments(int companyId, string ids, int group = default, string type = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<JoinIssuedDocumentsResponse> localVarResponse = JoinIssuedDocumentsWithHttpInfo(companyId, ids, group, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join Issued Documents Joins issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of JoinIssuedDocumentsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<JoinIssuedDocumentsResponse> JoinIssuedDocumentsWithHttpInfo(int companyId, string ids, int group = default, string type = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->JoinIssuedDocuments");
            }

            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'ids' when calling IssuedDocumentsApi->JoinIssuedDocuments");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.JoinIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<JoinIssuedDocumentsResponse>("/c/{company_id}/issued_documents/join", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Join Issued Documents Joins issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JoinIssuedDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<JoinIssuedDocumentsResponse> JoinIssuedDocumentsAsync(int companyId, string ids, int group = default, string type = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<JoinIssuedDocumentsResponse> localVarResponse = await JoinIssuedDocumentsWithHttpInfoAsync(companyId, ids, group, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Join Issued Documents Joins issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="ids">Ids of the documents.</param>
        /// <param name="group">Group items. (optional)</param>
        /// <param name="type">Type of the documents to be joined (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JoinIssuedDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<JoinIssuedDocumentsResponse>> JoinIssuedDocumentsWithHttpInfoAsync(int companyId, string ids, int group = default, string type = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->JoinIssuedDocuments");
            }

            // verify the required parameter 'ids' is set
            if (ids == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'ids' when calling IssuedDocumentsApi->JoinIssuedDocuments");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "ids", ids));
            if (group != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "group", group));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.JoinIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<JoinIssuedDocumentsResponse>("/c/{company_id}/issued_documents/join", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JoinIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListBinIssuedDocuments</returns>
        public ListBinIssuedDocuments ListBinIssuedDocuments(int companyId, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListBinIssuedDocuments> localVarResponse = ListBinIssuedDocumentsWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListBinIssuedDocuments</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ListBinIssuedDocuments> ListBinIssuedDocumentsWithHttpInfo(int companyId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ListBinIssuedDocuments");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ListBinIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListBinIssuedDocuments>("/c/{company_id}/bin/issued_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBinIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBinIssuedDocuments</returns>
        public async System.Threading.Tasks.Task<ListBinIssuedDocuments> ListBinIssuedDocumentsAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListBinIssuedDocuments> localVarResponse = await ListBinIssuedDocumentsWithHttpInfoAsync(companyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Issued Documents List Get bin issued documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBinIssuedDocuments)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ListBinIssuedDocuments>> ListBinIssuedDocumentsWithHttpInfoAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ListBinIssuedDocuments");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ListBinIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListBinIssuedDocuments>("/c/{company_id}/bin/issued_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBinIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Issued Documents Lists the issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListIssuedDocumentsResponse</returns>
        public ListIssuedDocumentsResponse ListIssuedDocuments(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListIssuedDocumentsResponse> localVarResponse = ListIssuedDocumentsWithHttpInfo(companyId, type, fields, fieldset, sort, page, perPage, q, inclusive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Issued Documents Lists the issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListIssuedDocumentsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ListIssuedDocumentsResponse> ListIssuedDocumentsWithHttpInfo(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ListIssuedDocuments");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling IssuedDocumentsApi->ListIssuedDocuments");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (inclusive != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "inclusive", inclusive));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ListIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListIssuedDocumentsResponse>("/c/{company_id}/issued_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Issued Documents Lists the issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListIssuedDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<ListIssuedDocumentsResponse> ListIssuedDocumentsAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListIssuedDocumentsResponse> localVarResponse = await ListIssuedDocumentsWithHttpInfoAsync(companyId, type, fields, fieldset, sort, page, perPage, q, inclusive, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Issued Documents Lists the issued documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the issued document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="inclusive">(Only for type &#x3D; delivery_notes) Include invoices delivery notes. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListIssuedDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ListIssuedDocumentsResponse>> ListIssuedDocumentsWithHttpInfoAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int inclusive = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ListIssuedDocuments");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling IssuedDocumentsApi->ListIssuedDocuments");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }
            if (inclusive != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "inclusive", inclusive));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ListIssuedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListIssuedDocumentsResponse>("/c/{company_id}/issued_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListIssuedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Issued Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyIssuedDocumentResponse</returns>
        public ModifyIssuedDocumentResponse ModifyIssuedDocument(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyIssuedDocumentResponse> localVarResponse = ModifyIssuedDocumentWithHttpInfo(companyId, documentId, modifyIssuedDocumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Issued Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyIssuedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ModifyIssuedDocumentResponse> ModifyIssuedDocumentWithHttpInfo(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ModifyIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->ModifyIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyIssuedDocumentRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ModifyIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyIssuedDocumentResponse>("/c/{company_id}/issued_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Issued Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyIssuedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ModifyIssuedDocumentResponse> ModifyIssuedDocumentAsync(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyIssuedDocumentResponse> localVarResponse = await ModifyIssuedDocumentWithHttpInfoAsync(companyId, documentId, modifyIssuedDocumentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Issued Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyIssuedDocumentRequest">The modified document (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyIssuedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ModifyIssuedDocumentResponse>> ModifyIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, ModifyIssuedDocumentRequest modifyIssuedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ModifyIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->ModifyIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyIssuedDocumentRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ModifyIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyIssuedDocumentResponse>("/c/{company_id}/issued_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recover Issued Document From The Bin Recover Issued Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RecoverBinIssuedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            RecoverBinIssuedDocumentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Recover Issued Document From The Bin Recover Issued Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> RecoverBinIssuedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->RecoverBinIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->RecoverBinIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.RecoverBinIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/c/{company_id}/bin/issued_documents/{document_id}/recover", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecoverBinIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recover Issued Document From The Bin Recover Issued Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecoverBinIssuedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await RecoverBinIssuedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Recover Issued Document From The Bin Recover Issued Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> RecoverBinIssuedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->RecoverBinIssuedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->RecoverBinIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "IssuedDocumentsApi.RecoverBinIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/c/{company_id}/bin/issued_documents/{document_id}/recover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecoverBinIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule Email Schedules the sending of a document by email.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ScheduleEmail(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0)
        {
            ScheduleEmailWithHttpInfo(companyId, documentId, scheduleEmailRequest);
        }

        /// <summary>
        /// Schedule Email Schedules the sending of a document by email.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> ScheduleEmailWithHttpInfo(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ScheduleEmail");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->ScheduleEmail");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = scheduleEmailRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ScheduleEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/c/{company_id}/issued_documents/{document_id}/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Schedule Email Schedules the sending of a document by email.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ScheduleEmailAsync(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await ScheduleEmailWithHttpInfoAsync(companyId, documentId, scheduleEmailRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Schedule Email Schedules the sending of a document by email.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="scheduleEmailRequest">Email Schedule (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> ScheduleEmailWithHttpInfoAsync(int companyId, int documentId, ScheduleEmailRequest scheduleEmailRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->ScheduleEmail");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling IssuedDocumentsApi->ScheduleEmail");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = scheduleEmailRequest;

            localVarRequestOptions.Operation = "IssuedDocumentsApi.ScheduleEmail";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/c/{company_id}/issued_documents/{document_id}/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleEmail", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transform Issued Document Transforms the document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransformIssuedDocumentResponse</returns>
        public TransformIssuedDocumentResponse TransformIssuedDocument(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<TransformIssuedDocumentResponse> localVarResponse = TransformIssuedDocumentWithHttpInfo(companyId, originalDocumentId, newType, type, eInvoice, transformKeepCopy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transform Issued Document Transforms the document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransformIssuedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<TransformIssuedDocumentResponse> TransformIssuedDocumentWithHttpInfo(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->TransformIssuedDocument");
            }

            // verify the required parameter 'originalDocumentId' is set
            if (originalDocumentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'originalDocumentId' when calling IssuedDocumentsApi->TransformIssuedDocument");
            }

            // verify the required parameter 'newType' is set
            if (newType == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'newType' when calling IssuedDocumentsApi->TransformIssuedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "original_document_id", originalDocumentId));
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "new_type", newType));
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (eInvoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "e_invoice", eInvoice));
            }
            if (transformKeepCopy != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "transform_keep_copy", transformKeepCopy));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.TransformIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransformIssuedDocumentResponse>("/c/{company_id}/issued_documents/transform", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransformIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transform Issued Document Transforms the document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransformIssuedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<TransformIssuedDocumentResponse> TransformIssuedDocumentAsync(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<TransformIssuedDocumentResponse> localVarResponse = await TransformIssuedDocumentWithHttpInfoAsync(companyId, originalDocumentId, newType, type, eInvoice, transformKeepCopy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transform Issued Document Transforms the document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="originalDocumentId">Original document id.</param>
        /// <param name="newType">New document type.</param>
        /// <param name="type">Current document type. (optional)</param>
        /// <param name="eInvoice">New document e_invoice. (optional)</param>
        /// <param name="transformKeepCopy">Keep the old document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransformIssuedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<TransformIssuedDocumentResponse>> TransformIssuedDocumentWithHttpInfoAsync(int companyId, int originalDocumentId, string newType, string type = default, int eInvoice = default, int transformKeepCopy = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->TransformIssuedDocument");
            }

            // verify the required parameter 'originalDocumentId' is set
            if (originalDocumentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'originalDocumentId' when calling IssuedDocumentsApi->TransformIssuedDocument");
            }

            // verify the required parameter 'newType' is set
            if (newType == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'newType' when calling IssuedDocumentsApi->TransformIssuedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "original_document_id", originalDocumentId));
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "new_type", newType));
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (eInvoice != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "e_invoice", eInvoice));
            }
            if (transformKeepCopy != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "transform_keep_copy", transformKeepCopy));
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.TransformIssuedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransformIssuedDocumentResponse>("/c/{company_id}/issued_documents/transform", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransformIssuedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Issued Document Attachment Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadIssuedDocumentAttachmentResponse</returns>
        public UploadIssuedDocumentAttachmentResponse UploadIssuedDocumentAttachment(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<UploadIssuedDocumentAttachmentResponse> localVarResponse = UploadIssuedDocumentAttachmentWithHttpInfo(companyId, filename, attachment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Issued Document Attachment Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadIssuedDocumentAttachmentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<UploadIssuedDocumentAttachmentResponse> UploadIssuedDocumentAttachmentWithHttpInfo(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->UploadIssuedDocumentAttachment");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (filename != null)
            {
                localVarRequestOptions.FormParameters.Add("filename", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(filename)); // form parameter
            }
            if (attachment != null)
            {
                localVarRequestOptions.FileParameters.Add("attachment", attachment);
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.UploadIssuedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadIssuedDocumentAttachmentResponse>("/c/{company_id}/issued_documents/attachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadIssuedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Issued Document Attachment Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadIssuedDocumentAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<UploadIssuedDocumentAttachmentResponse> UploadIssuedDocumentAttachmentAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<UploadIssuedDocumentAttachmentResponse> localVarResponse = await UploadIssuedDocumentAttachmentWithHttpInfoAsync(companyId, filename, attachment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Issued Document Attachment Uploads an attachment destined to an issued document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadIssuedDocumentAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<UploadIssuedDocumentAttachmentResponse>> UploadIssuedDocumentAttachmentWithHttpInfoAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling IssuedDocumentsApi->UploadIssuedDocumentAttachment");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (filename != null)
            {
                localVarRequestOptions.FormParameters.Add("filename", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(filename)); // form parameter
            }
            if (attachment != null)
            {
                localVarRequestOptions.FileParameters.Add("attachment", attachment);
            }

            localVarRequestOptions.Operation = "IssuedDocumentsApi.UploadIssuedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UploadIssuedDocumentAttachmentResponse>("/c/{company_id}/issued_documents/attachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadIssuedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
