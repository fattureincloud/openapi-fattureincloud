/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using It.FattureInCloud.Sdk.Client;
using It.FattureInCloud.Sdk.Model;

namespace It.FattureInCloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceivedDocumentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Received Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateReceivedDocumentResponse</returns>
        CreateReceivedDocumentResponse CreateReceivedDocument(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0);

        /// <summary>
        /// Create Received Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateReceivedDocumentResponse</returns>
        ApiResponse<CreateReceivedDocumentResponse> CreateReceivedDocumentWithHttpInfo(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0);
        /// <summary>
        /// Delete Bin Received Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Received Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteBinReceivedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Delete Bin Received Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Received Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBinReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Delete Received Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteReceivedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Delete Received Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Delete Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteReceivedDocumentAttachment(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Delete Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReceivedDocumentAttachmentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBinIssuedDocumentResponse</returns>
        GetBinIssuedDocumentResponse GetBinReceivedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBinIssuedDocumentResponse</returns>
        ApiResponse<GetBinIssuedDocumentResponse> GetBinReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Get Existing Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExistingReceivedDocumentTotalsResponse</returns>
        GetExistingReceivedDocumentTotalsResponse GetExistingReceivedDocumentTotals(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0);

        /// <summary>
        /// Get Existing Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExistingReceivedDocumentTotalsResponse</returns>
        ApiResponse<GetExistingReceivedDocumentTotalsResponse> GetExistingReceivedDocumentTotalsWithHttpInfo(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0);
        /// <summary>
        /// Get New Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNewReceivedDocumentTotalsResponse</returns>
        GetNewReceivedDocumentTotalsResponse GetNewReceivedDocumentTotals(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0);

        /// <summary>
        /// Get New Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNewReceivedDocumentTotalsResponse</returns>
        ApiResponse<GetNewReceivedDocumentTotalsResponse> GetNewReceivedDocumentTotalsWithHttpInfo(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0);
        /// <summary>
        /// Get Received Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReceivedDocumentResponse</returns>
        GetReceivedDocumentResponse GetReceivedDocument(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0);

        /// <summary>
        /// Get Received Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReceivedDocumentResponse</returns>
        ApiResponse<GetReceivedDocumentResponse> GetReceivedDocumentWithHttpInfo(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0);
        /// <summary>
        /// Get Received Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReceivedDocumentPreCreateInfoResponse</returns>
        GetReceivedDocumentPreCreateInfoResponse GetReceivedDocumentPreCreateInfo(int companyId, string type, int operationIndex = 0);

        /// <summary>
        /// Get Received Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReceivedDocumentPreCreateInfoResponse</returns>
        ApiResponse<GetReceivedDocumentPreCreateInfoResponse> GetReceivedDocumentPreCreateInfoWithHttpInfo(int companyId, string type, int operationIndex = 0);
        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin Received documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListBinReceivedDocuments</returns>
        ListBinReceivedDocuments ListBinReceivedDocuments(int companyId, int operationIndex = 0);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin Received documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListBinReceivedDocuments</returns>
        ApiResponse<ListBinReceivedDocuments> ListBinReceivedDocumentsWithHttpInfo(int companyId, int operationIndex = 0);
        /// <summary>
        /// List Received Documents
        /// </summary>
        /// <remarks>
        /// Lists the received documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListReceivedDocumentsResponse</returns>
        ListReceivedDocumentsResponse ListReceivedDocuments(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0);

        /// <summary>
        /// List Received Documents
        /// </summary>
        /// <remarks>
        /// Lists the received documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListReceivedDocumentsResponse</returns>
        ApiResponse<ListReceivedDocumentsResponse> ListReceivedDocumentsWithHttpInfo(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0);
        /// <summary>
        /// Modify Received Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyReceivedDocumentResponse</returns>
        ModifyReceivedDocumentResponse ModifyReceivedDocument(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0);

        /// <summary>
        /// Modify Received Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyReceivedDocumentResponse</returns>
        ApiResponse<ModifyReceivedDocumentResponse> ModifyReceivedDocumentWithHttpInfo(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0);
        /// <summary>
        /// Recover Received Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Received Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RecoverBinReceivedDocument(int companyId, int documentId, int operationIndex = 0);

        /// <summary>
        /// Recover Received Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Received Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RecoverBinReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0);
        /// <summary>
        /// Upload Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadReceivedDocumentAttachmentResponse</returns>
        UploadReceivedDocumentAttachmentResponse UploadReceivedDocumentAttachment(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0);

        /// <summary>
        /// Upload Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadReceivedDocumentAttachmentResponse</returns>
        ApiResponse<UploadReceivedDocumentAttachmentResponse> UploadReceivedDocumentAttachmentWithHttpInfo(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceivedDocumentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Received Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReceivedDocumentResponse</returns>
        System.Threading.Tasks.Task<CreateReceivedDocumentResponse> CreateReceivedDocumentAsync(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create Received Document
        /// </summary>
        /// <remarks>
        /// Creates a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReceivedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReceivedDocumentResponse>> CreateReceivedDocumentWithHttpInfoAsync(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Bin Received Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Received Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBinReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Bin Received Document
        /// </summary>
        /// <remarks>
        /// Delete Bin Received Document
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBinReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Received Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Received Document
        /// </summary>
        /// <remarks>
        /// Deletes the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Delete Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReceivedDocumentAttachmentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Removes the attachment of the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReceivedDocumentAttachmentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBinIssuedDocumentResponse</returns>
        System.Threading.Tasks.Task<GetBinIssuedDocumentResponse> GetBinReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin issued documents detail
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBinIssuedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBinIssuedDocumentResponse>> GetBinReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Existing Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExistingReceivedDocumentTotalsResponse</returns>
        System.Threading.Tasks.Task<GetExistingReceivedDocumentTotalsResponse> GetExistingReceivedDocumentTotalsAsync(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Existing Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExistingReceivedDocumentTotalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExistingReceivedDocumentTotalsResponse>> GetExistingReceivedDocumentTotalsWithHttpInfoAsync(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get New Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNewReceivedDocumentTotalsResponse</returns>
        System.Threading.Tasks.Task<GetNewReceivedDocumentTotalsResponse> GetNewReceivedDocumentTotalsAsync(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get New Received Document Totals
        /// </summary>
        /// <remarks>
        /// Returns the totals for a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNewReceivedDocumentTotalsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetNewReceivedDocumentTotalsResponse>> GetNewReceivedDocumentTotalsWithHttpInfoAsync(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Received Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceivedDocumentResponse</returns>
        System.Threading.Tasks.Task<GetReceivedDocumentResponse> GetReceivedDocumentAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Received Document
        /// </summary>
        /// <remarks>
        /// Gets the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceivedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReceivedDocumentResponse>> GetReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Received Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceivedDocumentPreCreateInfoResponse</returns>
        System.Threading.Tasks.Task<GetReceivedDocumentPreCreateInfoResponse> GetReceivedDocumentPreCreateInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Received Document Pre-Create Info
        /// </summary>
        /// <remarks>
        /// Retrieves the information useful while creating a new document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceivedDocumentPreCreateInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReceivedDocumentPreCreateInfoResponse>> GetReceivedDocumentPreCreateInfoWithHttpInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin Received documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBinReceivedDocuments</returns>
        System.Threading.Tasks.Task<ListBinReceivedDocuments> ListBinReceivedDocumentsAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Bin Received Documents List
        /// </summary>
        /// <remarks>
        /// Get bin Received documents list
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBinReceivedDocuments)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListBinReceivedDocuments>> ListBinReceivedDocumentsWithHttpInfoAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// List Received Documents
        /// </summary>
        /// <remarks>
        /// Lists the received documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReceivedDocumentsResponse</returns>
        System.Threading.Tasks.Task<ListReceivedDocumentsResponse> ListReceivedDocumentsAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Received Documents
        /// </summary>
        /// <remarks>
        /// Lists the received documents.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReceivedDocumentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReceivedDocumentsResponse>> ListReceivedDocumentsWithHttpInfoAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Modify Received Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyReceivedDocumentResponse</returns>
        System.Threading.Tasks.Task<ModifyReceivedDocumentResponse> ModifyReceivedDocumentAsync(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Modify Received Document
        /// </summary>
        /// <remarks>
        /// Modifies the specified document.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyReceivedDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ModifyReceivedDocumentResponse>> ModifyReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Recover Received Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Received Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RecoverBinReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Recover Received Document From The Bin
        /// </summary>
        /// <remarks>
        /// Recover Received Document From The Bin
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RecoverBinReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Upload Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadReceivedDocumentAttachmentResponse</returns>
        System.Threading.Tasks.Task<UploadReceivedDocumentAttachmentResponse> UploadReceivedDocumentAttachmentAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Upload Received Document Attachment
        /// </summary>
        /// <remarks>
        /// Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </remarks>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadReceivedDocumentAttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadReceivedDocumentAttachmentResponse>> UploadReceivedDocumentAttachmentWithHttpInfoAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReceivedDocumentsApi : IReceivedDocumentsApiSync, IReceivedDocumentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReceivedDocumentsApi : IReceivedDocumentsApi
    {
        private It.FattureInCloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceivedDocumentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReceivedDocumentsApi(string basePath)
        {
            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                new It.FattureInCloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReceivedDocumentsApi(It.FattureInCloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = It.FattureInCloud.Sdk.Client.Configuration.MergeConfigurations(
                It.FattureInCloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new It.FattureInCloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReceivedDocumentsApi(It.FattureInCloud.Sdk.Client.ISynchronousClient client, It.FattureInCloud.Sdk.Client.IAsynchronousClient asyncClient, It.FattureInCloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = It.FattureInCloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public It.FattureInCloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public It.FattureInCloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Received Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateReceivedDocumentResponse</returns>
        public CreateReceivedDocumentResponse CreateReceivedDocument(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateReceivedDocumentResponse> localVarResponse = CreateReceivedDocumentWithHttpInfo(companyId, createReceivedDocumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Received Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateReceivedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<CreateReceivedDocumentResponse> CreateReceivedDocumentWithHttpInfo(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->CreateReceivedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createReceivedDocumentRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.CreateReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateReceivedDocumentResponse>("/c/{company_id}/received_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Received Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReceivedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<CreateReceivedDocumentResponse> CreateReceivedDocumentAsync(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<CreateReceivedDocumentResponse> localVarResponse = await CreateReceivedDocumentWithHttpInfoAsync(companyId, createReceivedDocumentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Received Document Creates a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="createReceivedDocumentRequest">Document to create (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReceivedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<CreateReceivedDocumentResponse>> CreateReceivedDocumentWithHttpInfoAsync(int companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->CreateReceivedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = createReceivedDocumentRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.CreateReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateReceivedDocumentResponse>("/c/{company_id}/received_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Bin Received Document Delete Bin Received Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteBinReceivedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            DeleteBinReceivedDocumentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Delete Bin Received Document Delete Bin Received Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteBinReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->DeleteBinReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->DeleteBinReceivedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.DeleteBinReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/bin/received_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBinReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Bin Received Document Delete Bin Received Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBinReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteBinReceivedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Bin Received Document Delete Bin Received Document
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteBinReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->DeleteBinReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->DeleteBinReceivedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.DeleteBinReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/bin/received_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBinReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Received Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteReceivedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            DeleteReceivedDocumentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Delete Received Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->DeleteReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->DeleteReceivedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.DeleteReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/received_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Received Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteReceivedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Received Document Deletes the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->DeleteReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->DeleteReceivedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.DeleteReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/received_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Received Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteReceivedDocumentAttachment(int companyId, int documentId, int operationIndex = 0)
        {
            DeleteReceivedDocumentAttachmentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Delete Received Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> DeleteReceivedDocumentAttachmentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->DeleteReceivedDocumentAttachment");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->DeleteReceivedDocumentAttachment");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.DeleteReceivedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/c/{company_id}/received_documents/{document_id}/attachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReceivedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Received Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReceivedDocumentAttachmentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await DeleteReceivedDocumentAttachmentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Received Document Attachment Removes the attachment of the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> DeleteReceivedDocumentAttachmentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->DeleteReceivedDocumentAttachment");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->DeleteReceivedDocumentAttachment");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.DeleteReceivedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/c/{company_id}/received_documents/{document_id}/attachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReceivedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBinIssuedDocumentResponse</returns>
        public GetBinIssuedDocumentResponse GetBinReceivedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse> localVarResponse = GetBinReceivedDocumentWithHttpInfo(companyId, documentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBinIssuedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse> GetBinReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetBinReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->GetBinReceivedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetBinReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBinIssuedDocumentResponse>("/c/{company_id}/bin/received_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBinIssuedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetBinIssuedDocumentResponse> GetBinReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse> localVarResponse = await GetBinReceivedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin issued documents detail
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBinIssuedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetBinIssuedDocumentResponse>> GetBinReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetBinReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->GetBinReceivedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetBinReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBinIssuedDocumentResponse>("/c/{company_id}/bin/received_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBinReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Existing Received Document Totals Returns the totals for the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExistingReceivedDocumentTotalsResponse</returns>
        public GetExistingReceivedDocumentTotalsResponse GetExistingReceivedDocumentTotals(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingReceivedDocumentTotalsResponse> localVarResponse = GetExistingReceivedDocumentTotalsWithHttpInfo(companyId, documentId, getExistingReceivedDocumentTotalsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Existing Received Document Totals Returns the totals for the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExistingReceivedDocumentTotalsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingReceivedDocumentTotalsResponse> GetExistingReceivedDocumentTotalsWithHttpInfo(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetExistingReceivedDocumentTotals");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->GetExistingReceivedDocumentTotals");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = getExistingReceivedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetExistingReceivedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetExistingReceivedDocumentTotalsResponse>("/c/{company_id}/received_documents/{document_id}/totals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExistingReceivedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Existing Received Document Totals Returns the totals for the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExistingReceivedDocumentTotalsResponse</returns>
        public async System.Threading.Tasks.Task<GetExistingReceivedDocumentTotalsResponse> GetExistingReceivedDocumentTotalsAsync(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingReceivedDocumentTotalsResponse> localVarResponse = await GetExistingReceivedDocumentTotalsWithHttpInfoAsync(companyId, documentId, getExistingReceivedDocumentTotalsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Existing Received Document Totals Returns the totals for the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="getExistingReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExistingReceivedDocumentTotalsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetExistingReceivedDocumentTotalsResponse>> GetExistingReceivedDocumentTotalsWithHttpInfoAsync(int companyId, int documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetExistingReceivedDocumentTotals");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->GetExistingReceivedDocumentTotals");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = getExistingReceivedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetExistingReceivedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetExistingReceivedDocumentTotalsResponse>("/c/{company_id}/received_documents/{document_id}/totals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetExistingReceivedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get New Received Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetNewReceivedDocumentTotalsResponse</returns>
        public GetNewReceivedDocumentTotalsResponse GetNewReceivedDocumentTotals(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetNewReceivedDocumentTotalsResponse> localVarResponse = GetNewReceivedDocumentTotalsWithHttpInfo(companyId, getNewReceivedDocumentTotalsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get New Received Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetNewReceivedDocumentTotalsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetNewReceivedDocumentTotalsResponse> GetNewReceivedDocumentTotalsWithHttpInfo(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetNewReceivedDocumentTotals");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = getNewReceivedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetNewReceivedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetNewReceivedDocumentTotalsResponse>("/c/{company_id}/received_documents/totals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewReceivedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get New Received Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetNewReceivedDocumentTotalsResponse</returns>
        public async System.Threading.Tasks.Task<GetNewReceivedDocumentTotalsResponse> GetNewReceivedDocumentTotalsAsync(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetNewReceivedDocumentTotalsResponse> localVarResponse = await GetNewReceivedDocumentTotalsWithHttpInfoAsync(companyId, getNewReceivedDocumentTotalsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get New Received Document Totals Returns the totals for a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="getNewReceivedDocumentTotalsRequest">Received document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetNewReceivedDocumentTotalsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetNewReceivedDocumentTotalsResponse>> GetNewReceivedDocumentTotalsWithHttpInfoAsync(int companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetNewReceivedDocumentTotals");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.Data = getNewReceivedDocumentTotalsRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetNewReceivedDocumentTotals";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetNewReceivedDocumentTotalsResponse>("/c/{company_id}/received_documents/totals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNewReceivedDocumentTotals", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Received Document Gets the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReceivedDocumentResponse</returns>
        public GetReceivedDocumentResponse GetReceivedDocument(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentResponse> localVarResponse = GetReceivedDocumentWithHttpInfo(companyId, documentId, fields, fieldset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Received Document Gets the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReceivedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentResponse> GetReceivedDocumentWithHttpInfo(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->GetReceivedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetReceivedDocumentResponse>("/c/{company_id}/received_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Received Document Gets the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceivedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<GetReceivedDocumentResponse> GetReceivedDocumentAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentResponse> localVarResponse = await GetReceivedDocumentWithHttpInfoAsync(companyId, documentId, fields, fieldset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Received Document Gets the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceivedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentResponse>> GetReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, string fields = default, string fieldset = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->GetReceivedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetReceivedDocumentResponse>("/c/{company_id}/received_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Received Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReceivedDocumentPreCreateInfoResponse</returns>
        public GetReceivedDocumentPreCreateInfoResponse GetReceivedDocumentPreCreateInfo(int companyId, string type, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentPreCreateInfoResponse> localVarResponse = GetReceivedDocumentPreCreateInfoWithHttpInfo(companyId, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Received Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReceivedDocumentPreCreateInfoResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentPreCreateInfoResponse> GetReceivedDocumentPreCreateInfoWithHttpInfo(int companyId, string type, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetReceivedDocumentPreCreateInfo");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ReceivedDocumentsApi->GetReceivedDocumentPreCreateInfo");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetReceivedDocumentPreCreateInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetReceivedDocumentPreCreateInfoResponse>("/c/{company_id}/received_documents/info", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceivedDocumentPreCreateInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Received Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReceivedDocumentPreCreateInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetReceivedDocumentPreCreateInfoResponse> GetReceivedDocumentPreCreateInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentPreCreateInfoResponse> localVarResponse = await GetReceivedDocumentPreCreateInfoWithHttpInfoAsync(companyId, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Received Document Pre-Create Info Retrieves the information useful while creating a new document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReceivedDocumentPreCreateInfoResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<GetReceivedDocumentPreCreateInfoResponse>> GetReceivedDocumentPreCreateInfoWithHttpInfoAsync(int companyId, string type, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->GetReceivedDocumentPreCreateInfo");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ReceivedDocumentsApi->GetReceivedDocumentPreCreateInfo");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.GetReceivedDocumentPreCreateInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetReceivedDocumentPreCreateInfoResponse>("/c/{company_id}/received_documents/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReceivedDocumentPreCreateInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin Received documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListBinReceivedDocuments</returns>
        public ListBinReceivedDocuments ListBinReceivedDocuments(int companyId, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListBinReceivedDocuments> localVarResponse = ListBinReceivedDocumentsWithHttpInfo(companyId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin Received documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListBinReceivedDocuments</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ListBinReceivedDocuments> ListBinReceivedDocumentsWithHttpInfo(int companyId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->ListBinReceivedDocuments");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.ListBinReceivedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListBinReceivedDocuments>("/c/{company_id}/bin/received_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBinReceivedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin Received documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBinReceivedDocuments</returns>
        public async System.Threading.Tasks.Task<ListBinReceivedDocuments> ListBinReceivedDocumentsAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListBinReceivedDocuments> localVarResponse = await ListBinReceivedDocumentsWithHttpInfoAsync(companyId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bin Received Documents List Get bin Received documents list
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBinReceivedDocuments)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ListBinReceivedDocuments>> ListBinReceivedDocumentsWithHttpInfoAsync(int companyId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->ListBinReceivedDocuments");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.ListBinReceivedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListBinReceivedDocuments>("/c/{company_id}/bin/received_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBinReceivedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Received Documents Lists the received documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListReceivedDocumentsResponse</returns>
        public ListReceivedDocumentsResponse ListReceivedDocuments(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListReceivedDocumentsResponse> localVarResponse = ListReceivedDocumentsWithHttpInfo(companyId, type, fields, fieldset, sort, page, perPage, q);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Received Documents Lists the received documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListReceivedDocumentsResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ListReceivedDocumentsResponse> ListReceivedDocumentsWithHttpInfo(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->ListReceivedDocuments");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ReceivedDocumentsApi->ListReceivedDocuments");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.ListReceivedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListReceivedDocumentsResponse>("/c/{company_id}/received_documents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReceivedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Received Documents Lists the received documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReceivedDocumentsResponse</returns>
        public async System.Threading.Tasks.Task<ListReceivedDocumentsResponse> ListReceivedDocumentsAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ListReceivedDocumentsResponse> localVarResponse = await ListReceivedDocumentsWithHttpInfoAsync(companyId, type, fields, fieldset, sort, page, perPage, q, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Received Documents Lists the received documents.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="type">The type of the received document.</param>
        /// <param name="fields">List of comma-separated fields. (optional)</param>
        /// <param name="fieldset">Name of the fieldset. (optional)</param>
        /// <param name="sort">List of comma-separated fields for result sorting (minus for desc sorting). (optional)</param>
        /// <param name="page">The page to retrieve. (optional, default to 1)</param>
        /// <param name="perPage">The size of the page. (optional, default to 5)</param>
        /// <param name="q">Query for filtering the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReceivedDocumentsResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ListReceivedDocumentsResponse>> ListReceivedDocumentsWithHttpInfoAsync(int companyId, string type, string fields = default, string fieldset = default, string sort = default, int page = default, int perPage = default, string q = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->ListReceivedDocuments");
            }

            // verify the required parameter 'type' is set
            if (type == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'type' when calling ReceivedDocumentsApi->ListReceivedDocuments");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (fieldset != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "fieldset", fieldset));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (perPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage));
            }
            if (q != null)
            {
                localVarRequestOptions.QueryParameters.Add(It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            }

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.ListReceivedDocuments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListReceivedDocumentsResponse>("/c/{company_id}/received_documents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReceivedDocuments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Received Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ModifyReceivedDocumentResponse</returns>
        public ModifyReceivedDocumentResponse ModifyReceivedDocument(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyReceivedDocumentResponse> localVarResponse = ModifyReceivedDocumentWithHttpInfo(companyId, documentId, modifyReceivedDocumentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Received Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ModifyReceivedDocumentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<ModifyReceivedDocumentResponse> ModifyReceivedDocumentWithHttpInfo(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->ModifyReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->ModifyReceivedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyReceivedDocumentRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.ModifyReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ModifyReceivedDocumentResponse>("/c/{company_id}/received_documents/{document_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify Received Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ModifyReceivedDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ModifyReceivedDocumentResponse> ModifyReceivedDocumentAsync(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<ModifyReceivedDocumentResponse> localVarResponse = await ModifyReceivedDocumentWithHttpInfoAsync(companyId, documentId, modifyReceivedDocumentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Modify Received Document Modifies the specified document.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="modifyReceivedDocumentRequest">Modified document. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ModifyReceivedDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<ModifyReceivedDocumentResponse>> ModifyReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->ModifyReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->ModifyReceivedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter
            localVarRequestOptions.Data = modifyReceivedDocumentRequest;

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.ModifyReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ModifyReceivedDocumentResponse>("/c/{company_id}/received_documents/{document_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModifyReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recover Received Document From The Bin Recover Received Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RecoverBinReceivedDocument(int companyId, int documentId, int operationIndex = 0)
        {
            RecoverBinReceivedDocumentWithHttpInfo(companyId, documentId);
        }

        /// <summary>
        /// Recover Received Document From The Bin Recover Received Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<Object> RecoverBinReceivedDocumentWithHttpInfo(int companyId, int documentId, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->RecoverBinReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->RecoverBinReceivedDocument");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.RecoverBinReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/c/{company_id}/bin/received_documents/{document_id}/recover", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecoverBinReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Recover Received Document From The Bin Recover Received Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RecoverBinReceivedDocumentAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            await RecoverBinReceivedDocumentWithHttpInfoAsync(companyId, documentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Recover Received Document From The Bin Recover Received Document From The Bin
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="documentId">The ID of the document.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<Object>> RecoverBinReceivedDocumentWithHttpInfoAsync(int companyId, int documentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->RecoverBinReceivedDocument");
            }

            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'documentId' when calling ReceivedDocumentsApi->RecoverBinReceivedDocument");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            localVarRequestOptions.PathParameters.Add("document_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(documentId)); // path parameter

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.RecoverBinReceivedDocument";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/c/{company_id}/bin/received_documents/{document_id}/recover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RecoverBinReceivedDocument", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Received Document Attachment Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadReceivedDocumentAttachmentResponse</returns>
        public UploadReceivedDocumentAttachmentResponse UploadReceivedDocumentAttachment(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<UploadReceivedDocumentAttachmentResponse> localVarResponse = UploadReceivedDocumentAttachmentWithHttpInfo(companyId, filename, attachment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Received Document Attachment Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadReceivedDocumentAttachmentResponse</returns>
        public It.FattureInCloud.Sdk.Client.ApiResponse<UploadReceivedDocumentAttachmentResponse> UploadReceivedDocumentAttachmentWithHttpInfo(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->UploadReceivedDocumentAttachment");
            }

            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (filename != null)
            {
                localVarRequestOptions.FormParameters.Add("filename", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(filename)); // form parameter
            }
            if (attachment != null)
            {
                localVarRequestOptions.FileParameters.Add("attachment", attachment);
            }

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.UploadReceivedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadReceivedDocumentAttachmentResponse>("/c/{company_id}/received_documents/attachment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadReceivedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload Received Document Attachment Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadReceivedDocumentAttachmentResponse</returns>
        public async System.Threading.Tasks.Task<UploadReceivedDocumentAttachmentResponse> UploadReceivedDocumentAttachmentAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            It.FattureInCloud.Sdk.Client.ApiResponse<UploadReceivedDocumentAttachmentResponse> localVarResponse = await UploadReceivedDocumentAttachmentWithHttpInfoAsync(companyId, filename, attachment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload Received Document Attachment Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
        /// </summary>
        /// <exception cref="It.FattureInCloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">The ID of the company.</param>
        /// <param name="filename">Attachment file name (optional)</param>
        /// <param name="attachment">Attachment file [.png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadReceivedDocumentAttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<It.FattureInCloud.Sdk.Client.ApiResponse<UploadReceivedDocumentAttachmentResponse>> UploadReceivedDocumentAttachmentWithHttpInfoAsync(int companyId, string filename = default, System.IO.Stream attachment = default, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default)
        {
            // verify the required parameter 'companyId' is set
            if (companyId == null)
            {
                throw new It.FattureInCloud.Sdk.Client.ApiException(400, "Missing required parameter 'companyId' when calling ReceivedDocumentsApi->UploadReceivedDocumentAttachment");
            }


            It.FattureInCloud.Sdk.Client.RequestOptions localVarRequestOptions = new It.FattureInCloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = It.FattureInCloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("company_id", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(companyId)); // path parameter
            if (filename != null)
            {
                localVarRequestOptions.FormParameters.Add("filename", It.FattureInCloud.Sdk.Client.ClientUtils.ParameterToString(filename)); // form parameter
            }
            if (attachment != null)
            {
                localVarRequestOptions.FileParameters.Add("attachment", attachment);
            }

            localVarRequestOptions.Operation = "ReceivedDocumentsApi.UploadReceivedDocumentAttachment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2AuthenticationCodeFlow) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UploadReceivedDocumentAttachmentResponse>("/c/{company_id}/received_documents/attachment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadReceivedDocumentAttachment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
