// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// GetUserInfoResponse
    /// </summary>
    [DataContract(Name = "GetUserInfoResponse")]
    public partial class GetUserInfoResponse : IEquatable<GetUserInfoResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserInfoResponse" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="info">info.</param>
        /// <param name="emailConfirmationState">emailConfirmationState.</param>
        public GetUserInfoResponse(User data = default, GetUserInfoResponseInfo info = default, GetUserInfoResponseEmailConfirmationState emailConfirmationState = default)
        {
            this._Data = data;
            if (this.Data != null)
            {
                this._flagData = true;
            }
            this._Info = info;
            if (this.Info != null)
            {
                this._flagInfo = true;
            }
            this._EmailConfirmationState = emailConfirmationState;
            if (this.EmailConfirmationState != null)
            {
                this._flagEmailConfirmationState = true;
            }
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public User Data
        {
            get{ return _Data;}
            set
            {
                _Data = value;
                _flagData = true;
            }
        }
        private User _Data;
        private bool _flagData;

        /// <summary>
        /// Returns false as Data should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeData()
        {
            return _flagData;
        }
        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name = "info", EmitDefaultValue = true)]
        public GetUserInfoResponseInfo Info
        {
            get{ return _Info;}
            set
            {
                _Info = value;
                _flagInfo = true;
            }
        }
        private GetUserInfoResponseInfo _Info;
        private bool _flagInfo;

        /// <summary>
        /// Returns false as Info should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInfo()
        {
            return _flagInfo;
        }
        /// <summary>
        /// Gets or Sets EmailConfirmationState
        /// </summary>
        [DataMember(Name = "email_confirmation_state", EmitDefaultValue = true)]
        public GetUserInfoResponseEmailConfirmationState EmailConfirmationState
        {
            get{ return _EmailConfirmationState;}
            set
            {
                _EmailConfirmationState = value;
                _flagEmailConfirmationState = true;
            }
        }
        private GetUserInfoResponseEmailConfirmationState _EmailConfirmationState;
        private bool _flagEmailConfirmationState;

        /// <summary>
        /// Returns false as EmailConfirmationState should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmailConfirmationState()
        {
            return _flagEmailConfirmationState;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserInfoResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  EmailConfirmationState: ").Append(EmailConfirmationState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUserInfoResponse);
        }

        /// <summary>
        /// Returns true if GetUserInfoResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUserInfoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUserInfoResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Info == input.Info ||
                    (this.Info != null &&
                    this.Info.Equals(input.Info))
                ) && 
                (
                    this.EmailConfirmationState == input.EmailConfirmationState ||
                    (this.EmailConfirmationState != null &&
                    this.EmailConfirmationState.Equals(input.EmailConfirmationState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.Info != null)
                {
                    hashCode = (hashCode * 59) + this.Info.GetHashCode();
                }
                if (this.EmailConfirmationState != null)
                {
                    hashCode = (hashCode * 59) + this.EmailConfirmationState.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="GetUserInfoResponse" />
    /// </summary>
    public class GetUserInfoResponseJsonConverter : JsonConverter<GetUserInfoResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserInfoResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserInfoResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<User?> data = default;
            Option<GetUserInfoResponseInfo?> info = default;
            Option<GetUserInfoResponseEmailConfirmationState?> emailConfirmationState = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            data = new Option<User?>(JsonSerializer.Deserialize<User>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "info":
                            info = new Option<GetUserInfoResponseInfo?>(JsonSerializer.Deserialize<GetUserInfoResponseInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "email_confirmation_state":
                            emailConfirmationState = new Option<GetUserInfoResponseEmailConfirmationState?>(JsonSerializer.Deserialize<GetUserInfoResponseEmailConfirmationState>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class GetUserInfoResponse.");

            return new GetUserInfoResponse(data, info, emailConfirmationState);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserInfoResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserInfoResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserInfoResponse getUserInfoResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserInfoResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserInfoResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserInfoResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserInfoResponse getUserInfoResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserInfoResponse.DataOption.IsSet && getUserInfoResponse.Data == null)
                throw new ArgumentNullException(nameof(getUserInfoResponse.Data), "Property is required for class GetUserInfoResponse.");

            if (getUserInfoResponse.DataOption.IsSet)
            {
                writer.WritePropertyName("data");
                JsonSerializer.Serialize(writer, getUserInfoResponse.Data, jsonSerializerOptions);
            }
            if (getUserInfoResponse.InfoOption.IsSet)
                if (getUserInfoResponse.InfoOption.Value != null)
                {
                    writer.WritePropertyName("info");
                    JsonSerializer.Serialize(writer, getUserInfoResponse.Info, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("info");
            if (getUserInfoResponse.EmailConfirmationStateOption.IsSet)
                if (getUserInfoResponse.EmailConfirmationStateOption.Value != null)
                {
                    writer.WritePropertyName("email_confirmation_state");
                    JsonSerializer.Serialize(writer, getUserInfoResponse.EmailConfirmationState, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("email_confirmation_state");
        }
    }
}
