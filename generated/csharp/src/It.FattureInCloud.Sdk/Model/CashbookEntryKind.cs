// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Cashbook kind
    /// </summary>
    /// <value>Cashbook kind</value>
    public enum CashbookEntryKind
    {
        /// <summary>
        /// Enum Cashbook for value: cashbook
        /// </summary>
        Cashbook = 1,

        /// <summary>
        /// Enum IssuedDocument for value: issued_document
        /// </summary>
        IssuedDocument = 2,

        /// <summary>
        /// Enum ReceivedDocument for value: received_document
        /// </summary>
        ReceivedDocument = 3,

        /// <summary>
        /// Enum Tax for value: tax
        /// </summary>
        Tax = 4,

        /// <summary>
        /// Enum Receipt for value: receipt
        /// </summary>
        Receipt = 5
    }

    /// <summary>
    /// Converts <see cref="CashbookEntryKind"/> to and from the JSON value
    /// </summary>
    public static class CashbookEntryKindValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CashbookEntryKind"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CashbookEntryKind FromString(string value)
        {
            if (value.Equals("cashbook"))
                return CashbookEntryKind.Cashbook;

            if (value.Equals("issued_document"))
                return CashbookEntryKind.IssuedDocument;

            if (value.Equals("received_document"))
                return CashbookEntryKind.ReceivedDocument;

            if (value.Equals("tax"))
                return CashbookEntryKind.Tax;

            if (value.Equals("receipt"))
                return CashbookEntryKind.Receipt;

            throw new NotImplementedException($"Could not convert value to type CashbookEntryKind: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CashbookEntryKind"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CashbookEntryKind? FromStringOrDefault(string value)
        {
            if (value.Equals("cashbook"))
                return CashbookEntryKind.Cashbook;

            if (value.Equals("issued_document"))
                return CashbookEntryKind.IssuedDocument;

            if (value.Equals("received_document"))
                return CashbookEntryKind.ReceivedDocument;

            if (value.Equals("tax"))
                return CashbookEntryKind.Tax;

            if (value.Equals("receipt"))
                return CashbookEntryKind.Receipt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CashbookEntryKind"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(CashbookEntryKind value)
        {
            if (value == CashbookEntryKind.Cashbook)
                return "cashbook";

            if (value == CashbookEntryKind.IssuedDocument)
                return "issued_document";

            if (value == CashbookEntryKind.ReceivedDocument)
                return "received_document";

            if (value == CashbookEntryKind.Tax)
                return "tax";

            if (value == CashbookEntryKind.Receipt)
                return "receipt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CashbookEntryKind"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CashbookEntryKindJsonConverter : JsonConverter<CashbookEntryKind>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CashbookEntryKind Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CashbookEntryKind? result = rawValue == null
                ? null
                : CashbookEntryKindValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CashbookEntryKind to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntryKind"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CashbookEntryKind cashbookEntryKind, JsonSerializerOptions options)
        {
            writer.WriteStringValue(CashbookEntryKindValueConverter.ToJsonValue(cashbookEntryKind).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CashbookEntryKind"/>
    /// </summary>
    public class CashbookEntryKindNullableJsonConverter : JsonConverter<CashbookEntryKind?>
    {
        /// <summary>
        /// Returns a CashbookEntryKind from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CashbookEntryKind? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CashbookEntryKind? result = rawValue == null
                ? null
                : CashbookEntryKindValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CashbookEntryKind to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntryKind"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CashbookEntryKind? cashbookEntryKind, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cashbookEntryKind.HasValue ? CashbookEntryKindValueConverter.ToJsonValue(cashbookEntryKind.Value).ToString() : "null");
        }
    }
}
