// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Cashbook type
    /// </summary>
    /// <value>Cashbook type</value>
    public enum CashbookEntryType
    {
        /// <summary>
        /// Enum In for value: in
        /// </summary>
        In = 1,

        /// <summary>
        /// Enum Out for value: out
        /// </summary>
        Out = 2
    }

    /// <summary>
    /// Converts <see cref="CashbookEntryType"/> to and from the JSON value
    /// </summary>
    public static class CashbookEntryTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CashbookEntryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CashbookEntryType FromString(string value)
        {
            if (value.Equals("in"))
                return CashbookEntryType.In;

            if (value.Equals("out"))
                return CashbookEntryType.Out;

            throw new NotImplementedException($"Could not convert value to type CashbookEntryType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CashbookEntryType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CashbookEntryType? FromStringOrDefault(string value)
        {
            if (value.Equals("in"))
                return CashbookEntryType.In;

            if (value.Equals("out"))
                return CashbookEntryType.Out;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CashbookEntryType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(CashbookEntryType value)
        {
            if (value == CashbookEntryType.In)
                return "in";

            if (value == CashbookEntryType.Out)
                return "out";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CashbookEntryType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CashbookEntryTypeJsonConverter : JsonConverter<CashbookEntryType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CashbookEntryType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CashbookEntryType? result = rawValue == null
                ? null
                : CashbookEntryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CashbookEntryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CashbookEntryType cashbookEntryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(CashbookEntryTypeValueConverter.ToJsonValue(cashbookEntryType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CashbookEntryType"/>
    /// </summary>
    public class CashbookEntryTypeNullableJsonConverter : JsonConverter<CashbookEntryType?>
    {
        /// <summary>
        /// Returns a CashbookEntryType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CashbookEntryType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CashbookEntryType? result = rawValue == null
                ? null
                : CashbookEntryTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CashbookEntryType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntryType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CashbookEntryType? cashbookEntryType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cashbookEntryType.HasValue ? CashbookEntryTypeValueConverter.ToJsonValue(cashbookEntryType.Value).ToString() : "null");
        }
    }
}
