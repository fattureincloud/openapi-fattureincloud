// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Email recipient status
    /// </summary>
    /// <value>Email recipient status</value>
    public enum EmailRecipientStatus
    {
        /// <summary>
        /// Enum Unknown for value: unknown
        /// </summary>
        Unknown,

        /// <summary>
        /// Enum DocumentOpened for value: document_opened
        /// </summary>
        DocumentOpened,

        /// <summary>
        /// Enum EmailOpened for value: email_opened
        /// </summary>
        EmailOpened
    }

    /// <summary>
    /// Converts <see cref="EmailRecipientStatus"/> to and from the JSON value
    /// </summary>
    public static class EmailRecipientStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EmailRecipientStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmailRecipientStatus FromString(string value)
        {
            if (value.Equals("unknown"))
                return EmailRecipientStatus.Unknown;

            if (value.Equals("document_opened"))
                return EmailRecipientStatus.DocumentOpened;

            if (value.Equals("email_opened"))
                return EmailRecipientStatus.EmailOpened;

            throw new NotImplementedException($"Could not convert value to type EmailRecipientStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EmailRecipientStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmailRecipientStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("unknown"))
                return EmailRecipientStatus.Unknown;

            if (value.Equals("document_opened"))
                return EmailRecipientStatus.DocumentOpened;

            if (value.Equals("email_opened"))
                return EmailRecipientStatus.EmailOpened;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmailRecipientStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EmailRecipientStatus value)
        {
            if (value == EmailRecipientStatus.Unknown)
                return "unknown";

            if (value == EmailRecipientStatus.DocumentOpened)
                return "document_opened";

            if (value == EmailRecipientStatus.EmailOpened)
                return "email_opened";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailRecipientStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EmailRecipientStatusJsonConverter : JsonConverter<EmailRecipientStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmailRecipientStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmailRecipientStatus? result = rawValue == null
                ? null
                : EmailRecipientStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmailRecipientStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailRecipientStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmailRecipientStatus emailRecipientStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(EmailRecipientStatusValueConverter.ToJsonValue(emailRecipientStatus).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailRecipientStatus"/>
    /// </summary>
    public class EmailRecipientStatusNullableJsonConverter : JsonConverter<EmailRecipientStatus?>
    {
        /// <summary>
        /// Returns a EmailRecipientStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmailRecipientStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmailRecipientStatus? result = rawValue == null
                ? null
                : EmailRecipientStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmailRecipientStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailRecipientStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmailRecipientStatus? emailRecipientStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(emailRecipientStatus.HasValue ? EmailRecipientStatusValueConverter.ToJsonValue(emailRecipientStatus.Value).ToString() : "null");
        }
    }
}
