// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Company type
    /// </summary>
    /// <value>Company type</value>
    public enum CompanyType
    {
        /// <summary>
        /// Enum Company for value: company
        /// </summary>
        Company = 1,

        /// <summary>
        /// Enum Accountant for value: accountant
        /// </summary>
        Accountant = 2
    }

    /// <summary>
    /// Converts <see cref="CompanyType"/> to and from the JSON value
    /// </summary>
    public static class CompanyTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CompanyType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CompanyType FromString(string value)
        {
            if (value.Equals("company"))
                return CompanyType.Company;

            if (value.Equals("accountant"))
                return CompanyType.Accountant;

            throw new NotImplementedException($"Could not convert value to type CompanyType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="CompanyType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CompanyType? FromStringOrDefault(string value)
        {
            if (value.Equals("company"))
                return CompanyType.Company;

            if (value.Equals("accountant"))
                return CompanyType.Accountant;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CompanyType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(CompanyType value)
        {
            if (value == CompanyType.Company)
                return "company";

            if (value == CompanyType.Accountant)
                return "accountant";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CompanyType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CompanyTypeJsonConverter : JsonConverter<CompanyType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CompanyType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CompanyType? result = rawValue == null
                ? null
                : CompanyTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CompanyType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CompanyType companyType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(CompanyTypeValueConverter.ToJsonValue(companyType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CompanyType"/>
    /// </summary>
    public class CompanyTypeNullableJsonConverter : JsonConverter<CompanyType?>
    {
        /// <summary>
        /// Returns a CompanyType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CompanyType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            CompanyType? result = rawValue == null
                ? null
                : CompanyTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the CompanyType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CompanyType? companyType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(companyType.HasValue ? CompanyTypeValueConverter.ToJsonValue(companyType.Value).ToString() : "null");
        }
    }
}
