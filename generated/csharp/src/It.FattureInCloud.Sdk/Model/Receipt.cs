// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Receipt
    /// </summary>
    [DataContract(Name = "Receipt")]
    public partial class Receipt : IEquatable<Receipt>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ReceiptType? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private ReceiptType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Receipt" /> class.
        /// </summary>
        /// <param name="id">Receipt id.</param>
        /// <param name="date">Receipt date.</param>
        /// <param name="number">Receipt number.</param>
        /// <param name="numeration">Receipt numeration.</param>
        /// <param name="amountNet">Receipt total net amount.</param>
        /// <param name="amountVat">Receipt total vat amount.</param>
        /// <param name="amountGross">Receipt total gross amount.</param>
        /// <param name="useGrossPrices">Receipt uses gross prices.</param>
        /// <param name="type">type.</param>
        /// <param name="description">Receipt description.</param>
        /// <param name="rcCenter">Receipt revenue center.</param>
        /// <param name="createdAt">Receipt creation date.</param>
        /// <param name="updatedAt">Receipt last update date.</param>
        /// <param name="paymentAccount">paymentAccount.</param>
        /// <param name="itemsList">itemsList.</param>
        public Receipt(int id = default, DateOnly date = default, decimal number = default, string numeration = default, decimal amountNet = default, decimal amountVat = default, decimal amountGross = default, bool useGrossPrices = default, ReceiptType? type = default, string description = default, string rcCenter = default, string createdAt = default, string updatedAt = default, PaymentAccount paymentAccount = default, List<ReceiptItemsListItem> itemsList = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Date = date;
            if (this.Date != null)
            {
                this._flagDate = true;
            }
            this._Number = number;
            if (this.Number != null)
            {
                this._flagNumber = true;
            }
            this._Numeration = numeration;
            if (this.Numeration != null)
            {
                this._flagNumeration = true;
            }
            this._AmountNet = amountNet;
            if (this.AmountNet != null)
            {
                this._flagAmountNet = true;
            }
            this._AmountVat = amountVat;
            if (this.AmountVat != null)
            {
                this._flagAmountVat = true;
            }
            this._AmountGross = amountGross;
            if (this.AmountGross != null)
            {
                this._flagAmountGross = true;
            }
            this._UseGrossPrices = useGrossPrices;
            if (this.UseGrossPrices != null)
            {
                this._flagUseGrossPrices = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._RcCenter = rcCenter;
            if (this.RcCenter != null)
            {
                this._flagRcCenter = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._PaymentAccount = paymentAccount;
            if (this.PaymentAccount != null)
            {
                this._flagPaymentAccount = true;
            }
            this._ItemsList = itemsList;
            if (this.ItemsList != null)
            {
                this._flagItemsList = true;
            }
        }

        /// <summary>
        /// Receipt id
        /// </summary>
        /// <value>Receipt id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Receipt date
        /// </summary>
        /// <value>Receipt date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateOnly Date
        {
            get{ return _Date;}
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }
        private DateOnly _Date;
        private bool _flagDate;

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }
        /// <summary>
        /// Receipt number
        /// </summary>
        /// <value>Receipt number</value>
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public decimal Number
        {
            get{ return _Number;}
            set
            {
                _Number = value;
                _flagNumber = true;
            }
        }
        private decimal _Number;
        private bool _flagNumber;

        /// <summary>
        /// Returns false as Number should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumber()
        {
            return _flagNumber;
        }
        /// <summary>
        /// Receipt numeration
        /// </summary>
        /// <value>Receipt numeration</value>
        [DataMember(Name = "numeration", EmitDefaultValue = true)]
        public string Numeration
        {
            get{ return _Numeration;}
            set
            {
                _Numeration = value;
                _flagNumeration = true;
            }
        }
        private string _Numeration;
        private bool _flagNumeration;

        /// <summary>
        /// Returns false as Numeration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumeration()
        {
            return _flagNumeration;
        }
        /// <summary>
        /// Receipt total net amount
        /// </summary>
        /// <value>Receipt total net amount</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal AmountNet
        {
            get{ return _AmountNet;}
            set
            {
                _AmountNet = value;
                _flagAmountNet = true;
            }
        }
        private decimal _AmountNet;
        private bool _flagAmountNet;

        /// <summary>
        /// Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return _flagAmountNet;
        }
        /// <summary>
        /// Receipt total vat amount
        /// </summary>
        /// <value>Receipt total vat amount</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal AmountVat
        {
            get{ return _AmountVat;}
            set
            {
                _AmountVat = value;
                _flagAmountVat = true;
            }
        }
        private decimal _AmountVat;
        private bool _flagAmountVat;

        /// <summary>
        /// Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return _flagAmountVat;
        }
        /// <summary>
        /// Receipt total gross amount
        /// </summary>
        /// <value>Receipt total gross amount</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal AmountGross
        {
            get{ return _AmountGross;}
            set
            {
                _AmountGross = value;
                _flagAmountGross = true;
            }
        }
        private decimal _AmountGross;
        private bool _flagAmountGross;

        /// <summary>
        /// Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return _flagAmountGross;
        }
        /// <summary>
        /// Receipt uses gross prices
        /// </summary>
        /// <value>Receipt uses gross prices</value>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool UseGrossPrices
        {
            get{ return _UseGrossPrices;}
            set
            {
                _UseGrossPrices = value;
                _flagUseGrossPrices = true;
            }
        }
        private bool _UseGrossPrices;
        private bool _flagUseGrossPrices;

        /// <summary>
        /// Returns false as UseGrossPrices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrices()
        {
            return _flagUseGrossPrices;
        }
        /// <summary>
        /// Receipt description
        /// </summary>
        /// <value>Receipt description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Receipt revenue center
        /// </summary>
        /// <value>Receipt revenue center</value>
        [DataMember(Name = "rc_center", EmitDefaultValue = true)]
        public string RcCenter
        {
            get{ return _RcCenter;}
            set
            {
                _RcCenter = value;
                _flagRcCenter = true;
            }
        }
        private string _RcCenter;
        private bool _flagRcCenter;

        /// <summary>
        /// Returns false as RcCenter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCenter()
        {
            return _flagRcCenter;
        }
        /// <summary>
        /// Receipt creation date
        /// </summary>
        /// <value>Receipt creation date</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private string _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Receipt last update date
        /// </summary>
        /// <value>Receipt last update date</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private string _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [DataMember(Name = "payment_account", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccount
        {
            get{ return _PaymentAccount;}
            set
            {
                _PaymentAccount = value;
                _flagPaymentAccount = true;
            }
        }
        private PaymentAccount _PaymentAccount;
        private bool _flagPaymentAccount;

        /// <summary>
        /// Returns false as PaymentAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccount()
        {
            return _flagPaymentAccount;
        }
        /// <summary>
        /// Gets or Sets ItemsList
        /// </summary>
        [DataMember(Name = "items_list", EmitDefaultValue = true)]
        public List<ReceiptItemsListItem> ItemsList
        {
            get{ return _ItemsList;}
            set
            {
                _ItemsList = value;
                _flagItemsList = true;
            }
        }
        private List<ReceiptItemsListItem> _ItemsList;
        private bool _flagItemsList;

        /// <summary>
        /// Returns false as ItemsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsList()
        {
            return _flagItemsList;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Receipt);
        }

        /// <summary>
        /// Returns true if Receipt instances are equal
        /// </summary>
        /// <param name="input">Instance of Receipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Receipt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Date == input.Date ||
                    this.Date.Equals(input.Date)
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Numeration == input.Numeration ||
                    (this.Numeration != null &&
                    this.Numeration.Equals(input.Numeration))
                ) && 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.AmountVat == input.AmountVat ||
                    this.AmountVat.Equals(input.AmountVat)
                ) && 
                (
                    this.AmountGross == input.AmountGross ||
                    this.AmountGross.Equals(input.AmountGross)
                ) && 
                (
                    this.UseGrossPrices == input.UseGrossPrices ||
                    this.UseGrossPrices.Equals(input.UseGrossPrices)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RcCenter == input.RcCenter ||
                    (this.RcCenter != null &&
                    this.RcCenter.Equals(input.RcCenter))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.PaymentAccount == input.PaymentAccount ||
                    (this.PaymentAccount != null &&
                    this.PaymentAccount.Equals(input.PaymentAccount))
                ) && 
                (
                    this.ItemsList == input.ItemsList ||
                    this.ItemsList != null &&
                    input.ItemsList != null &&
                    this.ItemsList.SequenceEqual(input.ItemsList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Date.GetHashCode();
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                if (this.Numeration != null)
                {
                    hashCode = (hashCode * 59) + this.Numeration.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountNet.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountVat.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountGross.GetHashCode();
                hashCode = (hashCode * 59) + this.UseGrossPrices.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.RcCenter != null)
                {
                    hashCode = (hashCode * 59) + this.RcCenter.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.PaymentAccount != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccount.GetHashCode();
                }
                if (this.ItemsList != null)
                {
                    hashCode = (hashCode * 59) + this.ItemsList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="Receipt" />
    /// </summary>
    public class ReceiptJsonConverter : JsonConverter<Receipt>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="Receipt" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Receipt Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateOnly?> date = default;
            Option<decimal?> number = default;
            Option<string?> numeration = default;
            Option<decimal?> amountNet = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountGross = default;
            Option<bool?> useGrossPrices = default;
            Option<ReceiptType?> type = default;
            Option<string?> description = default;
            Option<string?> rcCenter = default;
            Option<string?> createdAt = default;
            Option<string?> updatedAt = default;
            Option<PaymentAccount?> paymentAccount = default;
            Option<List<ReceiptItemsListItem>?> itemsList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "date":
                            date = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "number":
                            number = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "numeration":
                            numeration = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "use_gross_prices":
                            useGrossPrices = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ReceiptType?>(ReceiptTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rc_center":
                            rcCenter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "payment_account":
                            paymentAccount = new Option<PaymentAccount?>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "items_list":
                            itemsList = new Option<List<ReceiptItemsListItem>?>(JsonSerializer.Deserialize<List<ReceiptItemsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Receipt.");

            return new Receipt(id, date, number, numeration, amountNet, amountVat, amountGross, useGrossPrices, type, description, rcCenter, createdAt, updatedAt, paymentAccount, itemsList);
        }

        /// <summary>
        /// Serializes a <see cref="Receipt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receipt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Receipt receipt, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receipt, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Receipt" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receipt"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Receipt receipt, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receipt.IdOption.IsSet)
                if (receipt.IdOption.Value != null)
                    writer.WriteNumber("id", receipt.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (receipt.DateOption.IsSet)
                if (receipt.DateOption.Value != null)
                    writer.WriteString("date", receipt.DateOption.Value!.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (receipt.NumberOption.IsSet)
                if (receipt.NumberOption.Value != null)
                    writer.WriteNumber("number", receipt.NumberOption.Value!.Value);
                else
                    writer.WriteNull("number");

            if (receipt.NumerationOption.IsSet)
                if (receipt.NumerationOption.Value != null)
                    writer.WriteString("numeration", receipt.Numeration);
                else
                    writer.WriteNull("numeration");

            if (receipt.AmountNetOption.IsSet)
                if (receipt.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", receipt.AmountNetOption.Value!.Value);
                else
                    writer.WriteNull("amount_net");

            if (receipt.AmountVatOption.IsSet)
                if (receipt.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", receipt.AmountVatOption.Value!.Value);
                else
                    writer.WriteNull("amount_vat");

            if (receipt.AmountGrossOption.IsSet)
                if (receipt.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", receipt.AmountGrossOption.Value!.Value);
                else
                    writer.WriteNull("amount_gross");

            if (receipt.UseGrossPricesOption.IsSet)
                if (receipt.UseGrossPricesOption.Value != null)
                    writer.WriteBoolean("use_gross_prices", receipt.UseGrossPricesOption.Value!.Value);
                else
                    writer.WriteNull("use_gross_prices");

            if (receipt.TypeOption.IsSet)
            {
                var typeRawValue = ReceiptTypeValueConverter.ToJsonValue(receipt.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (receipt.DescriptionOption.IsSet)
                if (receipt.DescriptionOption.Value != null)
                    writer.WriteString("description", receipt.Description);
                else
                    writer.WriteNull("description");

            if (receipt.RcCenterOption.IsSet)
                if (receipt.RcCenterOption.Value != null)
                    writer.WriteString("rc_center", receipt.RcCenter);
                else
                    writer.WriteNull("rc_center");

            if (receipt.CreatedAtOption.IsSet)
                if (receipt.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", receipt.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (receipt.UpdatedAtOption.IsSet)
                if (receipt.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", receipt.UpdatedAt);
                else
                    writer.WriteNull("updated_at");

            if (receipt.PaymentAccountOption.IsSet)
                if (receipt.PaymentAccountOption.Value != null)
                {
                    writer.WritePropertyName("payment_account");
                    JsonSerializer.Serialize(writer, receipt.PaymentAccount, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account");
            if (receipt.ItemsListOption.IsSet)
                if (receipt.ItemsListOption.Value != null)
                {
                    writer.WritePropertyName("items_list");
                    JsonSerializer.Serialize(writer, receipt.ItemsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items_list");
        }
    }
}
