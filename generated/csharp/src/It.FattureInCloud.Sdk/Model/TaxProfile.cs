// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// TaxProfile
    /// </summary>
    [DataContract(Name = "TaxProfile")]
    public partial class TaxProfile : IEquatable<TaxProfile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxProfile" /> class.
        /// </summary>
        /// <param name="companyType">The company type.</param>
        /// <param name="companySubtype">The company subtype.</param>
        /// <param name="profession">The profession.</param>
        /// <param name="regime">The applied regime.</param>
        /// <param name="rivalsaName">The name of the rivalsa.</param>
        /// <param name="defaultRivalsa">The default rivalsa amount.</param>
        /// <param name="cassaName">The name of the cassa.</param>
        /// <param name="defaultCassa">The default cassa amount.</param>
        /// <param name="defaultCassaTaxable">The default taxable amount for the cassa.</param>
        /// <param name="cassa2Name">The name of the second cassa.</param>
        /// <param name="defaultCassa2">The default second cassa amount.</param>
        /// <param name="defaultCassa2Taxable">The default taxable amount for the second cassa.</param>
        /// <param name="defaultWithholdingTax">The default withholding tax.</param>
        /// <param name="defaultWithholdingTaxTaxable">The default taxable amount for the withholding tax.</param>
        /// <param name="defaultOtherWithholdingTax">The default other withholding tax.</param>
        /// <param name="enasarco">If it has enasarco.</param>
        /// <param name="enasarcoType">The enasarco type.</param>
        /// <param name="contributionsPercentage">The contributions percentage.</param>
        /// <param name="profitCoefficient">The profit coefficient.</param>
        /// <param name="med">If the health card system is active.</param>
        /// <param name="defaultVat">defaultVat.</param>
        public TaxProfile(string companyType = default, string companySubtype = default, string profession = default, string regime = default, string rivalsaName = default, decimal defaultRivalsa = default, string cassaName = default, decimal defaultCassa = default, decimal defaultCassaTaxable = default, string cassa2Name = default, decimal defaultCassa2 = default, decimal defaultCassa2Taxable = default, decimal defaultWithholdingTax = default, decimal defaultWithholdingTaxTaxable = default, decimal defaultOtherWithholdingTax = default, bool enasarco = default, string enasarcoType = default, decimal contributionsPercentage = default, decimal profitCoefficient = default, bool med = default, VatType defaultVat = default)
        {
            this._CompanyType = companyType;
            if (this.CompanyType != null)
            {
                this._flagCompanyType = true;
            }
            this._CompanySubtype = companySubtype;
            if (this.CompanySubtype != null)
            {
                this._flagCompanySubtype = true;
            }
            this._Profession = profession;
            if (this.Profession != null)
            {
                this._flagProfession = true;
            }
            this._Regime = regime;
            if (this.Regime != null)
            {
                this._flagRegime = true;
            }
            this._RivalsaName = rivalsaName;
            if (this.RivalsaName != null)
            {
                this._flagRivalsaName = true;
            }
            this._DefaultRivalsa = defaultRivalsa;
            if (this.DefaultRivalsa != null)
            {
                this._flagDefaultRivalsa = true;
            }
            this._CassaName = cassaName;
            if (this.CassaName != null)
            {
                this._flagCassaName = true;
            }
            this._DefaultCassa = defaultCassa;
            if (this.DefaultCassa != null)
            {
                this._flagDefaultCassa = true;
            }
            this._DefaultCassaTaxable = defaultCassaTaxable;
            if (this.DefaultCassaTaxable != null)
            {
                this._flagDefaultCassaTaxable = true;
            }
            this._Cassa2Name = cassa2Name;
            if (this.Cassa2Name != null)
            {
                this._flagCassa2Name = true;
            }
            this._DefaultCassa2 = defaultCassa2;
            if (this.DefaultCassa2 != null)
            {
                this._flagDefaultCassa2 = true;
            }
            this._DefaultCassa2Taxable = defaultCassa2Taxable;
            if (this.DefaultCassa2Taxable != null)
            {
                this._flagDefaultCassa2Taxable = true;
            }
            this._DefaultWithholdingTax = defaultWithholdingTax;
            if (this.DefaultWithholdingTax != null)
            {
                this._flagDefaultWithholdingTax = true;
            }
            this._DefaultWithholdingTaxTaxable = defaultWithholdingTaxTaxable;
            if (this.DefaultWithholdingTaxTaxable != null)
            {
                this._flagDefaultWithholdingTaxTaxable = true;
            }
            this._DefaultOtherWithholdingTax = defaultOtherWithholdingTax;
            if (this.DefaultOtherWithholdingTax != null)
            {
                this._flagDefaultOtherWithholdingTax = true;
            }
            this._Enasarco = enasarco;
            if (this.Enasarco != null)
            {
                this._flagEnasarco = true;
            }
            this._EnasarcoType = enasarcoType;
            if (this.EnasarcoType != null)
            {
                this._flagEnasarcoType = true;
            }
            this._ContributionsPercentage = contributionsPercentage;
            if (this.ContributionsPercentage != null)
            {
                this._flagContributionsPercentage = true;
            }
            this._ProfitCoefficient = profitCoefficient;
            if (this.ProfitCoefficient != null)
            {
                this._flagProfitCoefficient = true;
            }
            this._Med = med;
            if (this.Med != null)
            {
                this._flagMed = true;
            }
            this._DefaultVat = defaultVat;
            if (this.DefaultVat != null)
            {
                this._flagDefaultVat = true;
            }
        }

        /// <summary>
        /// The company type
        /// </summary>
        /// <value>The company type</value>
        [DataMember(Name = "company_type", EmitDefaultValue = true)]
        public string CompanyType
        {
            get{ return _CompanyType;}
            set
            {
                _CompanyType = value;
                _flagCompanyType = true;
            }
        }
        private string _CompanyType;
        private bool _flagCompanyType;

        /// <summary>
        /// Returns false as CompanyType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompanyType()
        {
            return _flagCompanyType;
        }
        /// <summary>
        /// The company subtype
        /// </summary>
        /// <value>The company subtype</value>
        [DataMember(Name = "company_subtype", EmitDefaultValue = true)]
        public string CompanySubtype
        {
            get{ return _CompanySubtype;}
            set
            {
                _CompanySubtype = value;
                _flagCompanySubtype = true;
            }
        }
        private string _CompanySubtype;
        private bool _flagCompanySubtype;

        /// <summary>
        /// Returns false as CompanySubtype should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompanySubtype()
        {
            return _flagCompanySubtype;
        }
        /// <summary>
        /// The profession
        /// </summary>
        /// <value>The profession</value>
        [DataMember(Name = "profession", EmitDefaultValue = true)]
        public string Profession
        {
            get{ return _Profession;}
            set
            {
                _Profession = value;
                _flagProfession = true;
            }
        }
        private string _Profession;
        private bool _flagProfession;

        /// <summary>
        /// Returns false as Profession should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProfession()
        {
            return _flagProfession;
        }
        /// <summary>
        /// The applied regime
        /// </summary>
        /// <value>The applied regime</value>
        [DataMember(Name = "regime", EmitDefaultValue = true)]
        public string Regime
        {
            get{ return _Regime;}
            set
            {
                _Regime = value;
                _flagRegime = true;
            }
        }
        private string _Regime;
        private bool _flagRegime;

        /// <summary>
        /// Returns false as Regime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRegime()
        {
            return _flagRegime;
        }
        /// <summary>
        /// The name of the rivalsa
        /// </summary>
        /// <value>The name of the rivalsa</value>
        [DataMember(Name = "rivalsa_name", EmitDefaultValue = true)]
        public string RivalsaName
        {
            get{ return _RivalsaName;}
            set
            {
                _RivalsaName = value;
                _flagRivalsaName = true;
            }
        }
        private string _RivalsaName;
        private bool _flagRivalsaName;

        /// <summary>
        /// Returns false as RivalsaName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRivalsaName()
        {
            return _flagRivalsaName;
        }
        /// <summary>
        /// The default rivalsa amount
        /// </summary>
        /// <value>The default rivalsa amount</value>
        [DataMember(Name = "default_rivalsa", EmitDefaultValue = true)]
        public decimal DefaultRivalsa
        {
            get{ return _DefaultRivalsa;}
            set
            {
                _DefaultRivalsa = value;
                _flagDefaultRivalsa = true;
            }
        }
        private decimal _DefaultRivalsa;
        private bool _flagDefaultRivalsa;

        /// <summary>
        /// Returns false as DefaultRivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultRivalsa()
        {
            return _flagDefaultRivalsa;
        }
        /// <summary>
        /// The name of the cassa
        /// </summary>
        /// <value>The name of the cassa</value>
        [DataMember(Name = "cassa_name", EmitDefaultValue = true)]
        public string CassaName
        {
            get{ return _CassaName;}
            set
            {
                _CassaName = value;
                _flagCassaName = true;
            }
        }
        private string _CassaName;
        private bool _flagCassaName;

        /// <summary>
        /// Returns false as CassaName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassaName()
        {
            return _flagCassaName;
        }
        /// <summary>
        /// The default cassa amount
        /// </summary>
        /// <value>The default cassa amount</value>
        [DataMember(Name = "default_cassa", EmitDefaultValue = true)]
        public decimal DefaultCassa
        {
            get{ return _DefaultCassa;}
            set
            {
                _DefaultCassa = value;
                _flagDefaultCassa = true;
            }
        }
        private decimal _DefaultCassa;
        private bool _flagDefaultCassa;

        /// <summary>
        /// Returns false as DefaultCassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultCassa()
        {
            return _flagDefaultCassa;
        }
        /// <summary>
        /// The default taxable amount for the cassa
        /// </summary>
        /// <value>The default taxable amount for the cassa</value>
        [DataMember(Name = "default_cassa_taxable", EmitDefaultValue = true)]
        public decimal DefaultCassaTaxable
        {
            get{ return _DefaultCassaTaxable;}
            set
            {
                _DefaultCassaTaxable = value;
                _flagDefaultCassaTaxable = true;
            }
        }
        private decimal _DefaultCassaTaxable;
        private bool _flagDefaultCassaTaxable;

        /// <summary>
        /// Returns false as DefaultCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultCassaTaxable()
        {
            return _flagDefaultCassaTaxable;
        }
        /// <summary>
        /// The name of the second cassa
        /// </summary>
        /// <value>The name of the second cassa</value>
        [DataMember(Name = "cassa2_name", EmitDefaultValue = true)]
        public string Cassa2Name
        {
            get{ return _Cassa2Name;}
            set
            {
                _Cassa2Name = value;
                _flagCassa2Name = true;
            }
        }
        private string _Cassa2Name;
        private bool _flagCassa2Name;

        /// <summary>
        /// Returns false as Cassa2Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa2Name()
        {
            return _flagCassa2Name;
        }
        /// <summary>
        /// The default second cassa amount
        /// </summary>
        /// <value>The default second cassa amount</value>
        [DataMember(Name = "default_cassa2", EmitDefaultValue = true)]
        public decimal DefaultCassa2
        {
            get{ return _DefaultCassa2;}
            set
            {
                _DefaultCassa2 = value;
                _flagDefaultCassa2 = true;
            }
        }
        private decimal _DefaultCassa2;
        private bool _flagDefaultCassa2;

        /// <summary>
        /// Returns false as DefaultCassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultCassa2()
        {
            return _flagDefaultCassa2;
        }
        /// <summary>
        /// The default taxable amount for the second cassa
        /// </summary>
        /// <value>The default taxable amount for the second cassa</value>
        [DataMember(Name = "default_cassa2_taxable", EmitDefaultValue = true)]
        public decimal DefaultCassa2Taxable
        {
            get{ return _DefaultCassa2Taxable;}
            set
            {
                _DefaultCassa2Taxable = value;
                _flagDefaultCassa2Taxable = true;
            }
        }
        private decimal _DefaultCassa2Taxable;
        private bool _flagDefaultCassa2Taxable;

        /// <summary>
        /// Returns false as DefaultCassa2Taxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultCassa2Taxable()
        {
            return _flagDefaultCassa2Taxable;
        }
        /// <summary>
        /// The default withholding tax
        /// </summary>
        /// <value>The default withholding tax</value>
        [DataMember(Name = "default_withholding_tax", EmitDefaultValue = true)]
        public decimal DefaultWithholdingTax
        {
            get{ return _DefaultWithholdingTax;}
            set
            {
                _DefaultWithholdingTax = value;
                _flagDefaultWithholdingTax = true;
            }
        }
        private decimal _DefaultWithholdingTax;
        private bool _flagDefaultWithholdingTax;

        /// <summary>
        /// Returns false as DefaultWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultWithholdingTax()
        {
            return _flagDefaultWithholdingTax;
        }
        /// <summary>
        /// The default taxable amount for the withholding tax
        /// </summary>
        /// <value>The default taxable amount for the withholding tax</value>
        [DataMember(Name = "default_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal DefaultWithholdingTaxTaxable
        {
            get{ return _DefaultWithholdingTaxTaxable;}
            set
            {
                _DefaultWithholdingTaxTaxable = value;
                _flagDefaultWithholdingTaxTaxable = true;
            }
        }
        private decimal _DefaultWithholdingTaxTaxable;
        private bool _flagDefaultWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as DefaultWithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultWithholdingTaxTaxable()
        {
            return _flagDefaultWithholdingTaxTaxable;
        }
        /// <summary>
        /// The default other withholding tax
        /// </summary>
        /// <value>The default other withholding tax</value>
        [DataMember(Name = "default_other_withholding_tax", EmitDefaultValue = true)]
        public decimal DefaultOtherWithholdingTax
        {
            get{ return _DefaultOtherWithholdingTax;}
            set
            {
                _DefaultOtherWithholdingTax = value;
                _flagDefaultOtherWithholdingTax = true;
            }
        }
        private decimal _DefaultOtherWithholdingTax;
        private bool _flagDefaultOtherWithholdingTax;

        /// <summary>
        /// Returns false as DefaultOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultOtherWithholdingTax()
        {
            return _flagDefaultOtherWithholdingTax;
        }
        /// <summary>
        /// If it has enasarco
        /// </summary>
        /// <value>If it has enasarco</value>
        [DataMember(Name = "enasarco", EmitDefaultValue = true)]
        public bool Enasarco
        {
            get{ return _Enasarco;}
            set
            {
                _Enasarco = value;
                _flagEnasarco = true;
            }
        }
        private bool _Enasarco;
        private bool _flagEnasarco;

        /// <summary>
        /// Returns false as Enasarco should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnasarco()
        {
            return _flagEnasarco;
        }
        /// <summary>
        /// The enasarco type
        /// </summary>
        /// <value>The enasarco type</value>
        [DataMember(Name = "enasarco_type", EmitDefaultValue = true)]
        public string EnasarcoType
        {
            get{ return _EnasarcoType;}
            set
            {
                _EnasarcoType = value;
                _flagEnasarcoType = true;
            }
        }
        private string _EnasarcoType;
        private bool _flagEnasarcoType;

        /// <summary>
        /// Returns false as EnasarcoType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnasarcoType()
        {
            return _flagEnasarcoType;
        }
        /// <summary>
        /// The contributions percentage
        /// </summary>
        /// <value>The contributions percentage</value>
        [DataMember(Name = "contributions_percentage", EmitDefaultValue = true)]
        public decimal ContributionsPercentage
        {
            get{ return _ContributionsPercentage;}
            set
            {
                _ContributionsPercentage = value;
                _flagContributionsPercentage = true;
            }
        }
        private decimal _ContributionsPercentage;
        private bool _flagContributionsPercentage;

        /// <summary>
        /// Returns false as ContributionsPercentage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContributionsPercentage()
        {
            return _flagContributionsPercentage;
        }
        /// <summary>
        /// The profit coefficient
        /// </summary>
        /// <value>The profit coefficient</value>
        [DataMember(Name = "profit_coefficient", EmitDefaultValue = true)]
        public decimal ProfitCoefficient
        {
            get{ return _ProfitCoefficient;}
            set
            {
                _ProfitCoefficient = value;
                _flagProfitCoefficient = true;
            }
        }
        private decimal _ProfitCoefficient;
        private bool _flagProfitCoefficient;

        /// <summary>
        /// Returns false as ProfitCoefficient should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProfitCoefficient()
        {
            return _flagProfitCoefficient;
        }
        /// <summary>
        /// If the health card system is active
        /// </summary>
        /// <value>If the health card system is active</value>
        [DataMember(Name = "med", EmitDefaultValue = true)]
        public bool Med
        {
            get{ return _Med;}
            set
            {
                _Med = value;
                _flagMed = true;
            }
        }
        private bool _Med;
        private bool _flagMed;

        /// <summary>
        /// Returns false as Med should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMed()
        {
            return _flagMed;
        }
        /// <summary>
        /// Gets or Sets DefaultVat
        /// </summary>
        [DataMember(Name = "default_vat", EmitDefaultValue = true)]
        public VatType DefaultVat
        {
            get{ return _DefaultVat;}
            set
            {
                _DefaultVat = value;
                _flagDefaultVat = true;
            }
        }
        private VatType _DefaultVat;
        private bool _flagDefaultVat;

        /// <summary>
        /// Returns false as DefaultVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultVat()
        {
            return _flagDefaultVat;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TaxProfile {\n");
            sb.Append("  CompanyType: ").Append(CompanyType).Append("\n");
            sb.Append("  CompanySubtype: ").Append(CompanySubtype).Append("\n");
            sb.Append("  Profession: ").Append(Profession).Append("\n");
            sb.Append("  Regime: ").Append(Regime).Append("\n");
            sb.Append("  RivalsaName: ").Append(RivalsaName).Append("\n");
            sb.Append("  DefaultRivalsa: ").Append(DefaultRivalsa).Append("\n");
            sb.Append("  CassaName: ").Append(CassaName).Append("\n");
            sb.Append("  DefaultCassa: ").Append(DefaultCassa).Append("\n");
            sb.Append("  DefaultCassaTaxable: ").Append(DefaultCassaTaxable).Append("\n");
            sb.Append("  Cassa2Name: ").Append(Cassa2Name).Append("\n");
            sb.Append("  DefaultCassa2: ").Append(DefaultCassa2).Append("\n");
            sb.Append("  DefaultCassa2Taxable: ").Append(DefaultCassa2Taxable).Append("\n");
            sb.Append("  DefaultWithholdingTax: ").Append(DefaultWithholdingTax).Append("\n");
            sb.Append("  DefaultWithholdingTaxTaxable: ").Append(DefaultWithholdingTaxTaxable).Append("\n");
            sb.Append("  DefaultOtherWithholdingTax: ").Append(DefaultOtherWithholdingTax).Append("\n");
            sb.Append("  Enasarco: ").Append(Enasarco).Append("\n");
            sb.Append("  EnasarcoType: ").Append(EnasarcoType).Append("\n");
            sb.Append("  ContributionsPercentage: ").Append(ContributionsPercentage).Append("\n");
            sb.Append("  ProfitCoefficient: ").Append(ProfitCoefficient).Append("\n");
            sb.Append("  Med: ").Append(Med).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxProfile);
        }

        /// <summary>
        /// Returns true if TaxProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CompanyType == input.CompanyType ||
                    (this.CompanyType != null &&
                    this.CompanyType.Equals(input.CompanyType))
                ) && 
                (
                    this.CompanySubtype == input.CompanySubtype ||
                    (this.CompanySubtype != null &&
                    this.CompanySubtype.Equals(input.CompanySubtype))
                ) && 
                (
                    this.Profession == input.Profession ||
                    (this.Profession != null &&
                    this.Profession.Equals(input.Profession))
                ) && 
                (
                    this.Regime == input.Regime ||
                    (this.Regime != null &&
                    this.Regime.Equals(input.Regime))
                ) && 
                (
                    this.RivalsaName == input.RivalsaName ||
                    (this.RivalsaName != null &&
                    this.RivalsaName.Equals(input.RivalsaName))
                ) && 
                (
                    this.DefaultRivalsa == input.DefaultRivalsa ||
                    this.DefaultRivalsa.Equals(input.DefaultRivalsa)
                ) && 
                (
                    this.CassaName == input.CassaName ||
                    (this.CassaName != null &&
                    this.CassaName.Equals(input.CassaName))
                ) && 
                (
                    this.DefaultCassa == input.DefaultCassa ||
                    this.DefaultCassa.Equals(input.DefaultCassa)
                ) && 
                (
                    this.DefaultCassaTaxable == input.DefaultCassaTaxable ||
                    this.DefaultCassaTaxable.Equals(input.DefaultCassaTaxable)
                ) && 
                (
                    this.Cassa2Name == input.Cassa2Name ||
                    (this.Cassa2Name != null &&
                    this.Cassa2Name.Equals(input.Cassa2Name))
                ) && 
                (
                    this.DefaultCassa2 == input.DefaultCassa2 ||
                    this.DefaultCassa2.Equals(input.DefaultCassa2)
                ) && 
                (
                    this.DefaultCassa2Taxable == input.DefaultCassa2Taxable ||
                    this.DefaultCassa2Taxable.Equals(input.DefaultCassa2Taxable)
                ) && 
                (
                    this.DefaultWithholdingTax == input.DefaultWithholdingTax ||
                    this.DefaultWithholdingTax.Equals(input.DefaultWithholdingTax)
                ) && 
                (
                    this.DefaultWithholdingTaxTaxable == input.DefaultWithholdingTaxTaxable ||
                    this.DefaultWithholdingTaxTaxable.Equals(input.DefaultWithholdingTaxTaxable)
                ) && 
                (
                    this.DefaultOtherWithholdingTax == input.DefaultOtherWithholdingTax ||
                    this.DefaultOtherWithholdingTax.Equals(input.DefaultOtherWithholdingTax)
                ) && 
                (
                    this.Enasarco == input.Enasarco ||
                    this.Enasarco.Equals(input.Enasarco)
                ) && 
                (
                    this.EnasarcoType == input.EnasarcoType ||
                    (this.EnasarcoType != null &&
                    this.EnasarcoType.Equals(input.EnasarcoType))
                ) && 
                (
                    this.ContributionsPercentage == input.ContributionsPercentage ||
                    this.ContributionsPercentage.Equals(input.ContributionsPercentage)
                ) && 
                (
                    this.ProfitCoefficient == input.ProfitCoefficient ||
                    this.ProfitCoefficient.Equals(input.ProfitCoefficient)
                ) && 
                (
                    this.Med == input.Med ||
                    this.Med.Equals(input.Med)
                ) && 
                (
                    this.DefaultVat == input.DefaultVat ||
                    (this.DefaultVat != null &&
                    this.DefaultVat.Equals(input.DefaultVat))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyType != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyType.GetHashCode();
                }
                if (this.CompanySubtype != null)
                {
                    hashCode = (hashCode * 59) + this.CompanySubtype.GetHashCode();
                }
                if (this.Profession != null)
                {
                    hashCode = (hashCode * 59) + this.Profession.GetHashCode();
                }
                if (this.Regime != null)
                {
                    hashCode = (hashCode * 59) + this.Regime.GetHashCode();
                }
                if (this.RivalsaName != null)
                {
                    hashCode = (hashCode * 59) + this.RivalsaName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultRivalsa.GetHashCode();
                if (this.CassaName != null)
                {
                    hashCode = (hashCode * 59) + this.CassaName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultCassa.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultCassaTaxable.GetHashCode();
                if (this.Cassa2Name != null)
                {
                    hashCode = (hashCode * 59) + this.Cassa2Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultCassa2.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultCassa2Taxable.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultWithholdingTaxTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultOtherWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.Enasarco.GetHashCode();
                if (this.EnasarcoType != null)
                {
                    hashCode = (hashCode * 59) + this.EnasarcoType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContributionsPercentage.GetHashCode();
                hashCode = (hashCode * 59) + this.ProfitCoefficient.GetHashCode();
                hashCode = (hashCode * 59) + this.Med.GetHashCode();
                if (this.DefaultVat != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultVat.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="TaxProfile" />
    /// </summary>
    public class TaxProfileJsonConverter : JsonConverter<TaxProfile>
    {
        /// <summary>
        /// Deserializes json to <see cref="TaxProfile" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TaxProfile Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> companyType = default;
            Option<string?> companySubtype = default;
            Option<string?> profession = default;
            Option<string?> regime = default;
            Option<string?> rivalsaName = default;
            Option<decimal?> defaultRivalsa = default;
            Option<string?> cassaName = default;
            Option<decimal?> defaultCassa = default;
            Option<decimal?> defaultCassaTaxable = default;
            Option<string?> cassa2Name = default;
            Option<decimal?> defaultCassa2 = default;
            Option<decimal?> defaultCassa2Taxable = default;
            Option<decimal?> defaultWithholdingTax = default;
            Option<decimal?> defaultWithholdingTaxTaxable = default;
            Option<decimal?> defaultOtherWithholdingTax = default;
            Option<bool?> enasarco = default;
            Option<string?> enasarcoType = default;
            Option<decimal?> contributionsPercentage = default;
            Option<decimal?> profitCoefficient = default;
            Option<bool?> med = default;
            Option<VatType?> defaultVat = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "company_type":
                            companyType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "company_subtype":
                            companySubtype = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "profession":
                            profession = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "regime":
                            regime = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rivalsa_name":
                            rivalsaName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_rivalsa":
                            defaultRivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa_name":
                            cassaName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_cassa":
                            defaultCassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_cassa_taxable":
                            defaultCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa2_name":
                            cassa2Name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_cassa2":
                            defaultCassa2 = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_cassa2_taxable":
                            defaultCassa2Taxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_withholding_tax":
                            defaultWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_withholding_tax_taxable":
                            defaultWithholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "default_other_withholding_tax":
                            defaultOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "enasarco":
                            enasarco = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "enasarco_type":
                            enasarcoType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contributions_percentage":
                            contributionsPercentage = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "profit_coefficient":
                            profitCoefficient = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "med":
                            med = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "default_vat":
                            defaultVat = new Option<VatType?>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new TaxProfile(companyType, companySubtype, profession, regime, rivalsaName, defaultRivalsa, cassaName, defaultCassa, defaultCassaTaxable, cassa2Name, defaultCassa2, defaultCassa2Taxable, defaultWithholdingTax, defaultWithholdingTaxTaxable, defaultOtherWithholdingTax, enasarco, enasarcoType, contributionsPercentage, profitCoefficient, med, defaultVat);
        }

        /// <summary>
        /// Serializes a <see cref="TaxProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TaxProfile taxProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, taxProfile, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TaxProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="taxProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TaxProfile taxProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            if (taxProfile.CompanyTypeOption.IsSet)
                if (taxProfile.CompanyTypeOption.Value != null)
                    writer.WriteString("company_type", taxProfile.CompanyType);
                else
                    writer.WriteNull("company_type");

            if (taxProfile.CompanySubtypeOption.IsSet)
                if (taxProfile.CompanySubtypeOption.Value != null)
                    writer.WriteString("company_subtype", taxProfile.CompanySubtype);
                else
                    writer.WriteNull("company_subtype");

            if (taxProfile.ProfessionOption.IsSet)
                if (taxProfile.ProfessionOption.Value != null)
                    writer.WriteString("profession", taxProfile.Profession);
                else
                    writer.WriteNull("profession");

            if (taxProfile.RegimeOption.IsSet)
                if (taxProfile.RegimeOption.Value != null)
                    writer.WriteString("regime", taxProfile.Regime);
                else
                    writer.WriteNull("regime");

            if (taxProfile.RivalsaNameOption.IsSet)
                if (taxProfile.RivalsaNameOption.Value != null)
                    writer.WriteString("rivalsa_name", taxProfile.RivalsaName);
                else
                    writer.WriteNull("rivalsa_name");

            if (taxProfile.DefaultRivalsaOption.IsSet)
                if (taxProfile.DefaultRivalsaOption.Value != null)
                    writer.WriteNumber("default_rivalsa", taxProfile.DefaultRivalsaOption.Value!.Value);
                else
                    writer.WriteNull("default_rivalsa");

            if (taxProfile.CassaNameOption.IsSet)
                if (taxProfile.CassaNameOption.Value != null)
                    writer.WriteString("cassa_name", taxProfile.CassaName);
                else
                    writer.WriteNull("cassa_name");

            if (taxProfile.DefaultCassaOption.IsSet)
                if (taxProfile.DefaultCassaOption.Value != null)
                    writer.WriteNumber("default_cassa", taxProfile.DefaultCassaOption.Value!.Value);
                else
                    writer.WriteNull("default_cassa");

            if (taxProfile.DefaultCassaTaxableOption.IsSet)
                if (taxProfile.DefaultCassaTaxableOption.Value != null)
                    writer.WriteNumber("default_cassa_taxable", taxProfile.DefaultCassaTaxableOption.Value!.Value);
                else
                    writer.WriteNull("default_cassa_taxable");

            if (taxProfile.Cassa2NameOption.IsSet)
                if (taxProfile.Cassa2NameOption.Value != null)
                    writer.WriteString("cassa2_name", taxProfile.Cassa2Name);
                else
                    writer.WriteNull("cassa2_name");

            if (taxProfile.DefaultCassa2Option.IsSet)
                if (taxProfile.DefaultCassa2Option.Value != null)
                    writer.WriteNumber("default_cassa2", taxProfile.DefaultCassa2Option.Value!.Value);
                else
                    writer.WriteNull("default_cassa2");

            if (taxProfile.DefaultCassa2TaxableOption.IsSet)
                if (taxProfile.DefaultCassa2TaxableOption.Value != null)
                    writer.WriteNumber("default_cassa2_taxable", taxProfile.DefaultCassa2TaxableOption.Value!.Value);
                else
                    writer.WriteNull("default_cassa2_taxable");

            if (taxProfile.DefaultWithholdingTaxOption.IsSet)
                if (taxProfile.DefaultWithholdingTaxOption.Value != null)
                    writer.WriteNumber("default_withholding_tax", taxProfile.DefaultWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("default_withholding_tax");

            if (taxProfile.DefaultWithholdingTaxTaxableOption.IsSet)
                if (taxProfile.DefaultWithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("default_withholding_tax_taxable", taxProfile.DefaultWithholdingTaxTaxableOption.Value!.Value);
                else
                    writer.WriteNull("default_withholding_tax_taxable");

            if (taxProfile.DefaultOtherWithholdingTaxOption.IsSet)
                if (taxProfile.DefaultOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("default_other_withholding_tax", taxProfile.DefaultOtherWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("default_other_withholding_tax");

            if (taxProfile.EnasarcoOption.IsSet)
                if (taxProfile.EnasarcoOption.Value != null)
                    writer.WriteBoolean("enasarco", taxProfile.EnasarcoOption.Value!.Value);
                else
                    writer.WriteNull("enasarco");

            if (taxProfile.EnasarcoTypeOption.IsSet)
                if (taxProfile.EnasarcoTypeOption.Value != null)
                    writer.WriteString("enasarco_type", taxProfile.EnasarcoType);
                else
                    writer.WriteNull("enasarco_type");

            if (taxProfile.ContributionsPercentageOption.IsSet)
                if (taxProfile.ContributionsPercentageOption.Value != null)
                    writer.WriteNumber("contributions_percentage", taxProfile.ContributionsPercentageOption.Value!.Value);
                else
                    writer.WriteNull("contributions_percentage");

            if (taxProfile.ProfitCoefficientOption.IsSet)
                if (taxProfile.ProfitCoefficientOption.Value != null)
                    writer.WriteNumber("profit_coefficient", taxProfile.ProfitCoefficientOption.Value!.Value);
                else
                    writer.WriteNull("profit_coefficient");

            if (taxProfile.MedOption.IsSet)
                if (taxProfile.MedOption.Value != null)
                    writer.WriteBoolean("med", taxProfile.MedOption.Value!.Value);
                else
                    writer.WriteNull("med");

            if (taxProfile.DefaultVatOption.IsSet)
                if (taxProfile.DefaultVatOption.Value != null)
                {
                    writer.WritePropertyName("default_vat");
                    JsonSerializer.Serialize(writer, taxProfile.DefaultVat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_vat");
        }
    }
}
