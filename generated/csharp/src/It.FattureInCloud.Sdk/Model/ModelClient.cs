// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ModelClient
    /// </summary>
    [DataContract(Name = "varClient")]
    public partial class ModelClient : IEquatable<ModelClient>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public ClientType? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private ClientType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        /// Gets or Sets DefaultPaymentTermsType
        /// </summary>

        [DataMember(Name = "default_payment_terms_type", EmitDefaultValue = false)]
        public PaymentTermsType? DefaultPaymentTermsType
        {
            get{ return _DefaultPaymentTermsType;}
            set
            {
                _DefaultPaymentTermsType = value;
                _flagDefaultPaymentTermsType = true;
            }
        }
        private PaymentTermsType? _DefaultPaymentTermsType;
        private bool _flagDefaultPaymentTermsType;

        /// <summary>
        /// Returns false as DefaultPaymentTermsType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentTermsType()
        {
            return _flagDefaultPaymentTermsType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelClient" /> class.
        /// </summary>
        /// <param name="id">Client id.</param>
        /// <param name="code">Client code.</param>
        /// <param name="name">Client name.</param>
        /// <param name="type">type.</param>
        /// <param name="firstName">Client first name.</param>
        /// <param name="lastName">Client last name.</param>
        /// <param name="contactPerson">Client contact person.</param>
        /// <param name="vatNumber">Client vat number.</param>
        /// <param name="taxCode">Client tax code.</param>
        /// <param name="addressStreet">Client address street.</param>
        /// <param name="addressPostalCode">Client address postal code.</param>
        /// <param name="addressCity">Client address city.</param>
        /// <param name="addressProvince">Client address province.</param>
        /// <param name="addressExtra">Client address extra info.</param>
        /// <param name="country">Client country.</param>
        /// <param name="countryIso">Client country iso code.</param>
        /// <param name="email">Client email.</param>
        /// <param name="certifiedEmail">Client certified email.</param>
        /// <param name="phone">Client phone.</param>
        /// <param name="fax">Client fax.</param>
        /// <param name="notes">Client extra.</param>
        /// <param name="defaultVat">defaultVat.</param>
        /// <param name="defaultPaymentTerms">Client default payment terms.</param>
        /// <param name="defaultPaymentTermsType">defaultPaymentTermsType.</param>
        /// <param name="defaultPaymentMethod">defaultPaymentMethod.</param>
        /// <param name="bankName">Client bank name.</param>
        /// <param name="bankIban">Client bank iban.</param>
        /// <param name="bankSwiftCode">Client bank swift code.</param>
        /// <param name="shippingAddress">Client shipping address.</param>
        /// <param name="eInvoice">Use e-invoices for this entity.</param>
        /// <param name="discountHighlight">Highlight Discount.</param>
        /// <param name="eiCode">Client e-invoice code .</param>
        /// <param name="defaultDiscount">Client default discount.</param>
        /// <param name="hasIntentDeclaration">Client has intent declaration.</param>
        /// <param name="intentDeclarationProtocolNumber">Client intent declaration protocol number.</param>
        /// <param name="intentDeclarationProtocolDate">Client intent declaration protocol date.</param>
        /// <param name="priceListId">Price list id.</param>
        /// <param name="createdAt">Client creation date.</param>
        /// <param name="updatedAt">Client last update date.</param>
        public ModelClient(int id = default, string code = default, string name = default, ClientType? type = default, string firstName = default, string lastName = default, string contactPerson = default, string vatNumber = default, string taxCode = default, string addressStreet = default, string addressPostalCode = default, string addressCity = default, string addressProvince = default, string addressExtra = default, string country = default, string countryIso = default, string email = default, string certifiedEmail = default, string phone = default, string fax = default, string notes = default, VatType defaultVat = default, int defaultPaymentTerms = default, PaymentTermsType? defaultPaymentTermsType = default, PaymentMethod defaultPaymentMethod = default, string bankName = default, string bankIban = default, string bankSwiftCode = default, string shippingAddress = default, bool eInvoice = default, bool discountHighlight = default, string eiCode = default, decimal defaultDiscount = default, bool hasIntentDeclaration = default, string intentDeclarationProtocolNumber = default, DateOnly intentDeclarationProtocolDate = default, string priceListId = default, string createdAt = default, string updatedAt = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Code = code;
            if (this.Code != null)
            {
                this._flagCode = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._FirstName = firstName;
            if (this.FirstName != null)
            {
                this._flagFirstName = true;
            }
            this._LastName = lastName;
            if (this.LastName != null)
            {
                this._flagLastName = true;
            }
            this._ContactPerson = contactPerson;
            if (this.ContactPerson != null)
            {
                this._flagContactPerson = true;
            }
            this._VatNumber = vatNumber;
            if (this.VatNumber != null)
            {
                this._flagVatNumber = true;
            }
            this._TaxCode = taxCode;
            if (this.TaxCode != null)
            {
                this._flagTaxCode = true;
            }
            this._AddressStreet = addressStreet;
            if (this.AddressStreet != null)
            {
                this._flagAddressStreet = true;
            }
            this._AddressPostalCode = addressPostalCode;
            if (this.AddressPostalCode != null)
            {
                this._flagAddressPostalCode = true;
            }
            this._AddressCity = addressCity;
            if (this.AddressCity != null)
            {
                this._flagAddressCity = true;
            }
            this._AddressProvince = addressProvince;
            if (this.AddressProvince != null)
            {
                this._flagAddressProvince = true;
            }
            this._AddressExtra = addressExtra;
            if (this.AddressExtra != null)
            {
                this._flagAddressExtra = true;
            }
            this._Country = country;
            if (this.Country != null)
            {
                this._flagCountry = true;
            }
            this._CountryIso = countryIso;
            if (this.CountryIso != null)
            {
                this._flagCountryIso = true;
            }
            this._Email = email;
            if (this.Email != null)
            {
                this._flagEmail = true;
            }
            this._CertifiedEmail = certifiedEmail;
            if (this.CertifiedEmail != null)
            {
                this._flagCertifiedEmail = true;
            }
            this._Phone = phone;
            if (this.Phone != null)
            {
                this._flagPhone = true;
            }
            this._Fax = fax;
            if (this.Fax != null)
            {
                this._flagFax = true;
            }
            this._Notes = notes;
            if (this.Notes != null)
            {
                this._flagNotes = true;
            }
            this._DefaultVat = defaultVat;
            if (this.DefaultVat != null)
            {
                this._flagDefaultVat = true;
            }
            this._DefaultPaymentTerms = defaultPaymentTerms;
            if (this.DefaultPaymentTerms != null)
            {
                this._flagDefaultPaymentTerms = true;
            }
            this._DefaultPaymentTermsType = defaultPaymentTermsType;
            if (this.DefaultPaymentTermsType != null)
            {
                this._flagDefaultPaymentTermsType = true;
            }
            this._DefaultPaymentMethod = defaultPaymentMethod;
            if (this.DefaultPaymentMethod != null)
            {
                this._flagDefaultPaymentMethod = true;
            }
            this._BankName = bankName;
            if (this.BankName != null)
            {
                this._flagBankName = true;
            }
            this._BankIban = bankIban;
            if (this.BankIban != null)
            {
                this._flagBankIban = true;
            }
            this._BankSwiftCode = bankSwiftCode;
            if (this.BankSwiftCode != null)
            {
                this._flagBankSwiftCode = true;
            }
            this._ShippingAddress = shippingAddress;
            if (this.ShippingAddress != null)
            {
                this._flagShippingAddress = true;
            }
            this._EInvoice = eInvoice;
            if (this.EInvoice != null)
            {
                this._flagEInvoice = true;
            }
            this._DiscountHighlight = discountHighlight;
            if (this.DiscountHighlight != null)
            {
                this._flagDiscountHighlight = true;
            }
            this._EiCode = eiCode;
            if (this.EiCode != null)
            {
                this._flagEiCode = true;
            }
            this._DefaultDiscount = defaultDiscount;
            if (this.DefaultDiscount != null)
            {
                this._flagDefaultDiscount = true;
            }
            this._HasIntentDeclaration = hasIntentDeclaration;
            if (this.HasIntentDeclaration != null)
            {
                this._flagHasIntentDeclaration = true;
            }
            this._IntentDeclarationProtocolNumber = intentDeclarationProtocolNumber;
            if (this.IntentDeclarationProtocolNumber != null)
            {
                this._flagIntentDeclarationProtocolNumber = true;
            }
            this._IntentDeclarationProtocolDate = intentDeclarationProtocolDate;
            if (this.IntentDeclarationProtocolDate != null)
            {
                this._flagIntentDeclarationProtocolDate = true;
            }
            this._PriceListId = priceListId;
            if (this.PriceListId != null)
            {
                this._flagPriceListId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Client id
        /// </summary>
        /// <value>Client id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Client code
        /// </summary>
        /// <value>Client code</value>
        /*
        <example>123</example>
        */
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get{ return _Code;}
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }
        private string _Code;
        private bool _flagCode;

        /// <summary>
        /// Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }
        /// <summary>
        /// Client name
        /// </summary>
        /// <value>Client name</value>
        /*
        <example>Rossi S.r.l.</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Client first name
        /// </summary>
        /// <value>Client first name</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName
        {
            get{ return _FirstName;}
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }
        private string _FirstName;
        private bool _flagFirstName;

        /// <summary>
        /// Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }
        /// <summary>
        /// Client last name
        /// </summary>
        /// <value>Client last name</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName
        {
            get{ return _LastName;}
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }
        private string _LastName;
        private bool _flagLastName;

        /// <summary>
        /// Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }
        /// <summary>
        /// Client contact person
        /// </summary>
        /// <value>Client contact person</value>
        [DataMember(Name = "contact_person", EmitDefaultValue = true)]
        public string ContactPerson
        {
            get{ return _ContactPerson;}
            set
            {
                _ContactPerson = value;
                _flagContactPerson = true;
            }
        }
        private string _ContactPerson;
        private bool _flagContactPerson;

        /// <summary>
        /// Returns false as ContactPerson should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContactPerson()
        {
            return _flagContactPerson;
        }
        /// <summary>
        /// Client vat number
        /// </summary>
        /// <value>Client vat number</value>
        /*
        <example>IT01234567890</example>
        */
        [DataMember(Name = "vat_number", EmitDefaultValue = true)]
        public string VatNumber
        {
            get{ return _VatNumber;}
            set
            {
                _VatNumber = value;
                _flagVatNumber = true;
            }
        }
        private string _VatNumber;
        private bool _flagVatNumber;

        /// <summary>
        /// Returns false as VatNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatNumber()
        {
            return _flagVatNumber;
        }
        /// <summary>
        /// Client tax code
        /// </summary>
        /// <value>Client tax code</value>
        /*
        <example>RSSMRA44A12E890Q</example>
        */
        [DataMember(Name = "tax_code", EmitDefaultValue = true)]
        public string TaxCode
        {
            get{ return _TaxCode;}
            set
            {
                _TaxCode = value;
                _flagTaxCode = true;
            }
        }
        private string _TaxCode;
        private bool _flagTaxCode;

        /// <summary>
        /// Returns false as TaxCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTaxCode()
        {
            return _flagTaxCode;
        }
        /// <summary>
        /// Client address street
        /// </summary>
        /// <value>Client address street</value>
        /*
        <example>Via dei tigli, 12</example>
        */
        [DataMember(Name = "address_street", EmitDefaultValue = true)]
        public string AddressStreet
        {
            get{ return _AddressStreet;}
            set
            {
                _AddressStreet = value;
                _flagAddressStreet = true;
            }
        }
        private string _AddressStreet;
        private bool _flagAddressStreet;

        /// <summary>
        /// Returns false as AddressStreet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressStreet()
        {
            return _flagAddressStreet;
        }
        /// <summary>
        /// Client address postal code
        /// </summary>
        /// <value>Client address postal code</value>
        /*
        <example>24010</example>
        */
        [DataMember(Name = "address_postal_code", EmitDefaultValue = true)]
        public string AddressPostalCode
        {
            get{ return _AddressPostalCode;}
            set
            {
                _AddressPostalCode = value;
                _flagAddressPostalCode = true;
            }
        }
        private string _AddressPostalCode;
        private bool _flagAddressPostalCode;

        /// <summary>
        /// Returns false as AddressPostalCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressPostalCode()
        {
            return _flagAddressPostalCode;
        }
        /// <summary>
        /// Client address city
        /// </summary>
        /// <value>Client address city</value>
        /*
        <example>Bergamo</example>
        */
        [DataMember(Name = "address_city", EmitDefaultValue = true)]
        public string AddressCity
        {
            get{ return _AddressCity;}
            set
            {
                _AddressCity = value;
                _flagAddressCity = true;
            }
        }
        private string _AddressCity;
        private bool _flagAddressCity;

        /// <summary>
        /// Returns false as AddressCity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressCity()
        {
            return _flagAddressCity;
        }
        /// <summary>
        /// Client address province
        /// </summary>
        /// <value>Client address province</value>
        /*
        <example>BG</example>
        */
        [DataMember(Name = "address_province", EmitDefaultValue = true)]
        public string AddressProvince
        {
            get{ return _AddressProvince;}
            set
            {
                _AddressProvince = value;
                _flagAddressProvince = true;
            }
        }
        private string _AddressProvince;
        private bool _flagAddressProvince;

        /// <summary>
        /// Returns false as AddressProvince should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressProvince()
        {
            return _flagAddressProvince;
        }
        /// <summary>
        /// Client address extra info
        /// </summary>
        /// <value>Client address extra info</value>
        [DataMember(Name = "address_extra", EmitDefaultValue = true)]
        public string AddressExtra
        {
            get{ return _AddressExtra;}
            set
            {
                _AddressExtra = value;
                _flagAddressExtra = true;
            }
        }
        private string _AddressExtra;
        private bool _flagAddressExtra;

        /// <summary>
        /// Returns false as AddressExtra should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressExtra()
        {
            return _flagAddressExtra;
        }
        /// <summary>
        /// Client country
        /// </summary>
        /// <value>Client country</value>
        /*
        <example>Italia</example>
        */
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country
        {
            get{ return _Country;}
            set
            {
                _Country = value;
                _flagCountry = true;
            }
        }
        private string _Country;
        private bool _flagCountry;

        /// <summary>
        /// Returns false as Country should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountry()
        {
            return _flagCountry;
        }
        /// <summary>
        /// Client country iso code
        /// </summary>
        /// <value>Client country iso code</value>
        /*
        <example>Italia</example>
        */
        [DataMember(Name = "country_iso", EmitDefaultValue = true)]
        public string CountryIso
        {
            get{ return _CountryIso;}
            set
            {
                _CountryIso = value;
                _flagCountryIso = true;
            }
        }
        private string _CountryIso;
        private bool _flagCountryIso;

        /// <summary>
        /// Returns false as CountryIso should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountryIso()
        {
            return _flagCountryIso;
        }
        /// <summary>
        /// Client email
        /// </summary>
        /// <value>Client email</value>
        /*
        <example>mario.rossi@example.it</example>
        */
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get{ return _Email;}
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }
        private string _Email;
        private bool _flagEmail;

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }
        /// <summary>
        /// Client certified email
        /// </summary>
        /// <value>Client certified email</value>
        /*
        <example>mario.rossi@pec.example.it</example>
        */
        [DataMember(Name = "certified_email", EmitDefaultValue = true)]
        public string CertifiedEmail
        {
            get{ return _CertifiedEmail;}
            set
            {
                _CertifiedEmail = value;
                _flagCertifiedEmail = true;
            }
        }
        private string _CertifiedEmail;
        private bool _flagCertifiedEmail;

        /// <summary>
        /// Returns false as CertifiedEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCertifiedEmail()
        {
            return _flagCertifiedEmail;
        }
        /// <summary>
        /// Client phone
        /// </summary>
        /// <value>Client phone</value>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone
        {
            get{ return _Phone;}
            set
            {
                _Phone = value;
                _flagPhone = true;
            }
        }
        private string _Phone;
        private bool _flagPhone;

        /// <summary>
        /// Returns false as Phone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePhone()
        {
            return _flagPhone;
        }
        /// <summary>
        /// Client fax
        /// </summary>
        /// <value>Client fax</value>
        [DataMember(Name = "fax", EmitDefaultValue = true)]
        public string Fax
        {
            get{ return _Fax;}
            set
            {
                _Fax = value;
                _flagFax = true;
            }
        }
        private string _Fax;
        private bool _flagFax;

        /// <summary>
        /// Returns false as Fax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFax()
        {
            return _flagFax;
        }
        /// <summary>
        /// Client extra
        /// </summary>
        /// <value>Client extra</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get{ return _Notes;}
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }
        private string _Notes;
        private bool _flagNotes;

        /// <summary>
        /// Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }
        /// <summary>
        /// Gets or Sets DefaultVat
        /// </summary>
        [DataMember(Name = "default_vat", EmitDefaultValue = true)]
        public VatType DefaultVat
        {
            get{ return _DefaultVat;}
            set
            {
                _DefaultVat = value;
                _flagDefaultVat = true;
            }
        }
        private VatType _DefaultVat;
        private bool _flagDefaultVat;

        /// <summary>
        /// Returns false as DefaultVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultVat()
        {
            return _flagDefaultVat;
        }
        /// <summary>
        /// Client default payment terms
        /// </summary>
        /// <value>Client default payment terms</value>
        /*
        <example>30</example>
        */
        [DataMember(Name = "default_payment_terms", EmitDefaultValue = true)]
        public int DefaultPaymentTerms
        {
            get{ return _DefaultPaymentTerms;}
            set
            {
                _DefaultPaymentTerms = value;
                _flagDefaultPaymentTerms = true;
            }
        }
        private int _DefaultPaymentTerms;
        private bool _flagDefaultPaymentTerms;

        /// <summary>
        /// Returns false as DefaultPaymentTerms should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentTerms()
        {
            return _flagDefaultPaymentTerms;
        }
        /// <summary>
        /// Gets or Sets DefaultPaymentMethod
        /// </summary>
        [DataMember(Name = "default_payment_method", EmitDefaultValue = false)]
        public PaymentMethod DefaultPaymentMethod
        {
            get{ return _DefaultPaymentMethod;}
            set
            {
                _DefaultPaymentMethod = value;
                _flagDefaultPaymentMethod = true;
            }
        }
        private PaymentMethod _DefaultPaymentMethod;
        private bool _flagDefaultPaymentMethod;

        /// <summary>
        /// Returns false as DefaultPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultPaymentMethod()
        {
            return _flagDefaultPaymentMethod;
        }
        /// <summary>
        /// Client bank name
        /// </summary>
        /// <value>Client bank name</value>
        [DataMember(Name = "bank_name", EmitDefaultValue = true)]
        public string BankName
        {
            get{ return _BankName;}
            set
            {
                _BankName = value;
                _flagBankName = true;
            }
        }
        private string _BankName;
        private bool _flagBankName;

        /// <summary>
        /// Returns false as BankName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankName()
        {
            return _flagBankName;
        }
        /// <summary>
        /// Client bank iban
        /// </summary>
        /// <value>Client bank iban</value>
        [DataMember(Name = "bank_iban", EmitDefaultValue = true)]
        public string BankIban
        {
            get{ return _BankIban;}
            set
            {
                _BankIban = value;
                _flagBankIban = true;
            }
        }
        private string _BankIban;
        private bool _flagBankIban;

        /// <summary>
        /// Returns false as BankIban should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankIban()
        {
            return _flagBankIban;
        }
        /// <summary>
        /// Client bank swift code
        /// </summary>
        /// <value>Client bank swift code</value>
        [DataMember(Name = "bank_swift_code", EmitDefaultValue = true)]
        public string BankSwiftCode
        {
            get{ return _BankSwiftCode;}
            set
            {
                _BankSwiftCode = value;
                _flagBankSwiftCode = true;
            }
        }
        private string _BankSwiftCode;
        private bool _flagBankSwiftCode;

        /// <summary>
        /// Returns false as BankSwiftCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankSwiftCode()
        {
            return _flagBankSwiftCode;
        }
        /// <summary>
        /// Client shipping address
        /// </summary>
        /// <value>Client shipping address</value>
        [DataMember(Name = "shipping_address", EmitDefaultValue = true)]
        public string ShippingAddress
        {
            get{ return _ShippingAddress;}
            set
            {
                _ShippingAddress = value;
                _flagShippingAddress = true;
            }
        }
        private string _ShippingAddress;
        private bool _flagShippingAddress;

        /// <summary>
        /// Returns false as ShippingAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShippingAddress()
        {
            return _flagShippingAddress;
        }
        /// <summary>
        /// Use e-invoices for this entity
        /// </summary>
        /// <value>Use e-invoices for this entity</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool EInvoice
        {
            get{ return _EInvoice;}
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }
        private bool _EInvoice;
        private bool _flagEInvoice;

        /// <summary>
        /// Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }
        /// <summary>
        /// Highlight Discount
        /// </summary>
        /// <value>Highlight Discount</value>
        [DataMember(Name = "discount_highlight", EmitDefaultValue = true)]
        public bool DiscountHighlight
        {
            get{ return _DiscountHighlight;}
            set
            {
                _DiscountHighlight = value;
                _flagDiscountHighlight = true;
            }
        }
        private bool _DiscountHighlight;
        private bool _flagDiscountHighlight;

        /// <summary>
        /// Returns false as DiscountHighlight should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscountHighlight()
        {
            return _flagDiscountHighlight;
        }
        /// <summary>
        /// Client e-invoice code 
        /// </summary>
        /// <value>Client e-invoice code </value>
        [DataMember(Name = "ei_code", EmitDefaultValue = true)]
        public string EiCode
        {
            get{ return _EiCode;}
            set
            {
                _EiCode = value;
                _flagEiCode = true;
            }
        }
        private string _EiCode;
        private bool _flagEiCode;

        /// <summary>
        /// Returns false as EiCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCode()
        {
            return _flagEiCode;
        }
        /// <summary>
        /// Client default discount
        /// </summary>
        /// <value>Client default discount</value>
        [DataMember(Name = "default_discount", EmitDefaultValue = true)]
        public decimal DefaultDiscount
        {
            get{ return _DefaultDiscount;}
            set
            {
                _DefaultDiscount = value;
                _flagDefaultDiscount = true;
            }
        }
        private decimal _DefaultDiscount;
        private bool _flagDefaultDiscount;

        /// <summary>
        /// Returns false as DefaultDiscount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultDiscount()
        {
            return _flagDefaultDiscount;
        }
        /// <summary>
        /// Client has intent declaration
        /// </summary>
        /// <value>Client has intent declaration</value>
        [DataMember(Name = "has_intent_declaration", EmitDefaultValue = true)]
        public bool HasIntentDeclaration
        {
            get{ return _HasIntentDeclaration;}
            set
            {
                _HasIntentDeclaration = value;
                _flagHasIntentDeclaration = true;
            }
        }
        private bool _HasIntentDeclaration;
        private bool _flagHasIntentDeclaration;

        /// <summary>
        /// Returns false as HasIntentDeclaration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasIntentDeclaration()
        {
            return _flagHasIntentDeclaration;
        }
        /// <summary>
        /// Client intent declaration protocol number
        /// </summary>
        /// <value>Client intent declaration protocol number</value>
        [DataMember(Name = "intent_declaration_protocol_number", EmitDefaultValue = true)]
        public string IntentDeclarationProtocolNumber
        {
            get{ return _IntentDeclarationProtocolNumber;}
            set
            {
                _IntentDeclarationProtocolNumber = value;
                _flagIntentDeclarationProtocolNumber = true;
            }
        }
        private string _IntentDeclarationProtocolNumber;
        private bool _flagIntentDeclarationProtocolNumber;

        /// <summary>
        /// Returns false as IntentDeclarationProtocolNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntentDeclarationProtocolNumber()
        {
            return _flagIntentDeclarationProtocolNumber;
        }
        /// <summary>
        /// Client intent declaration protocol date
        /// </summary>
        /// <value>Client intent declaration protocol date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "intent_declaration_protocol_date", EmitDefaultValue = true)]
        public DateOnly IntentDeclarationProtocolDate
        {
            get{ return _IntentDeclarationProtocolDate;}
            set
            {
                _IntentDeclarationProtocolDate = value;
                _flagIntentDeclarationProtocolDate = true;
            }
        }
        private DateOnly _IntentDeclarationProtocolDate;
        private bool _flagIntentDeclarationProtocolDate;

        /// <summary>
        /// Returns false as IntentDeclarationProtocolDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIntentDeclarationProtocolDate()
        {
            return _flagIntentDeclarationProtocolDate;
        }
        /// <summary>
        /// Price list id
        /// </summary>
        /// <value>Price list id</value>
        [DataMember(Name = "price_list_id", EmitDefaultValue = true)]
        public string PriceListId
        {
            get{ return _PriceListId;}
            set
            {
                _PriceListId = value;
                _flagPriceListId = true;
            }
        }
        private string _PriceListId;
        private bool _flagPriceListId;

        /// <summary>
        /// Returns false as PriceListId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePriceListId()
        {
            return _flagPriceListId;
        }
        /// <summary>
        /// Client creation date
        /// </summary>
        /// <value>Client creation date</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private string _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Client last update date
        /// </summary>
        /// <value>Client last update date</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private string _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelClient {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  TaxCode: ").Append(TaxCode).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("  AddressPostalCode: ").Append(AddressPostalCode).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressProvince: ").Append(AddressProvince).Append("\n");
            sb.Append("  AddressExtra: ").Append(AddressExtra).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryIso: ").Append(CountryIso).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CertifiedEmail: ").Append(CertifiedEmail).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  DefaultVat: ").Append(DefaultVat).Append("\n");
            sb.Append("  DefaultPaymentTerms: ").Append(DefaultPaymentTerms).Append("\n");
            sb.Append("  DefaultPaymentTermsType: ").Append(DefaultPaymentTermsType).Append("\n");
            sb.Append("  DefaultPaymentMethod: ").Append(DefaultPaymentMethod).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  BankSwiftCode: ").Append(BankSwiftCode).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  DiscountHighlight: ").Append(DiscountHighlight).Append("\n");
            sb.Append("  EiCode: ").Append(EiCode).Append("\n");
            sb.Append("  DefaultDiscount: ").Append(DefaultDiscount).Append("\n");
            sb.Append("  HasIntentDeclaration: ").Append(HasIntentDeclaration).Append("\n");
            sb.Append("  IntentDeclarationProtocolNumber: ").Append(IntentDeclarationProtocolNumber).Append("\n");
            sb.Append("  IntentDeclarationProtocolDate: ").Append(IntentDeclarationProtocolDate).Append("\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelClient);
        }

        /// <summary>
        /// Returns true if ModelClient instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelClient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelClient input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.VatNumber == input.VatNumber ||
                    (this.VatNumber != null &&
                    this.VatNumber.Equals(input.VatNumber))
                ) && 
                (
                    this.TaxCode == input.TaxCode ||
                    (this.TaxCode != null &&
                    this.TaxCode.Equals(input.TaxCode))
                ) && 
                (
                    this.AddressStreet == input.AddressStreet ||
                    (this.AddressStreet != null &&
                    this.AddressStreet.Equals(input.AddressStreet))
                ) && 
                (
                    this.AddressPostalCode == input.AddressPostalCode ||
                    (this.AddressPostalCode != null &&
                    this.AddressPostalCode.Equals(input.AddressPostalCode))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressProvince == input.AddressProvince ||
                    (this.AddressProvince != null &&
                    this.AddressProvince.Equals(input.AddressProvince))
                ) && 
                (
                    this.AddressExtra == input.AddressExtra ||
                    (this.AddressExtra != null &&
                    this.AddressExtra.Equals(input.AddressExtra))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryIso == input.CountryIso ||
                    (this.CountryIso != null &&
                    this.CountryIso.Equals(input.CountryIso))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CertifiedEmail == input.CertifiedEmail ||
                    (this.CertifiedEmail != null &&
                    this.CertifiedEmail.Equals(input.CertifiedEmail))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.DefaultVat == input.DefaultVat ||
                    (this.DefaultVat != null &&
                    this.DefaultVat.Equals(input.DefaultVat))
                ) && 
                (
                    this.DefaultPaymentTerms == input.DefaultPaymentTerms ||
                    this.DefaultPaymentTerms.Equals(input.DefaultPaymentTerms)
                ) && 
                (
                    this.DefaultPaymentTermsType == input.DefaultPaymentTermsType ||
                    this.DefaultPaymentTermsType.Equals(input.DefaultPaymentTermsType)
                ) && 
                (
                    this.DefaultPaymentMethod == input.DefaultPaymentMethod ||
                    (this.DefaultPaymentMethod != null &&
                    this.DefaultPaymentMethod.Equals(input.DefaultPaymentMethod))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankIban == input.BankIban ||
                    (this.BankIban != null &&
                    this.BankIban.Equals(input.BankIban))
                ) && 
                (
                    this.BankSwiftCode == input.BankSwiftCode ||
                    (this.BankSwiftCode != null &&
                    this.BankSwiftCode.Equals(input.BankSwiftCode))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.EInvoice == input.EInvoice ||
                    this.EInvoice.Equals(input.EInvoice)
                ) && 
                (
                    this.DiscountHighlight == input.DiscountHighlight ||
                    this.DiscountHighlight.Equals(input.DiscountHighlight)
                ) && 
                (
                    this.EiCode == input.EiCode ||
                    (this.EiCode != null &&
                    this.EiCode.Equals(input.EiCode))
                ) && 
                (
                    this.DefaultDiscount == input.DefaultDiscount ||
                    this.DefaultDiscount.Equals(input.DefaultDiscount)
                ) && 
                (
                    this.HasIntentDeclaration == input.HasIntentDeclaration ||
                    this.HasIntentDeclaration.Equals(input.HasIntentDeclaration)
                ) && 
                (
                    this.IntentDeclarationProtocolNumber == input.IntentDeclarationProtocolNumber ||
                    (this.IntentDeclarationProtocolNumber != null &&
                    this.IntentDeclarationProtocolNumber.Equals(input.IntentDeclarationProtocolNumber))
                ) && 
                (
                    this.IntentDeclarationProtocolDate == input.IntentDeclarationProtocolDate ||
                    this.IntentDeclarationProtocolDate.Equals(input.IntentDeclarationProtocolDate)
                ) && 
                (
                    this.PriceListId == input.PriceListId ||
                    (this.PriceListId != null &&
                    this.PriceListId.Equals(input.PriceListId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.ContactPerson != null)
                {
                    hashCode = (hashCode * 59) + this.ContactPerson.GetHashCode();
                }
                if (this.VatNumber != null)
                {
                    hashCode = (hashCode * 59) + this.VatNumber.GetHashCode();
                }
                if (this.TaxCode != null)
                {
                    hashCode = (hashCode * 59) + this.TaxCode.GetHashCode();
                }
                if (this.AddressStreet != null)
                {
                    hashCode = (hashCode * 59) + this.AddressStreet.GetHashCode();
                }
                if (this.AddressPostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.AddressPostalCode.GetHashCode();
                }
                if (this.AddressCity != null)
                {
                    hashCode = (hashCode * 59) + this.AddressCity.GetHashCode();
                }
                if (this.AddressProvince != null)
                {
                    hashCode = (hashCode * 59) + this.AddressProvince.GetHashCode();
                }
                if (this.AddressExtra != null)
                {
                    hashCode = (hashCode * 59) + this.AddressExtra.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.CountryIso != null)
                {
                    hashCode = (hashCode * 59) + this.CountryIso.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.CertifiedEmail != null)
                {
                    hashCode = (hashCode * 59) + this.CertifiedEmail.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Fax != null)
                {
                    hashCode = (hashCode * 59) + this.Fax.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                if (this.DefaultVat != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultVat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultPaymentTerms.GetHashCode();
                hashCode = (hashCode * 59) + this.DefaultPaymentTermsType.GetHashCode();
                if (this.DefaultPaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultPaymentMethod.GetHashCode();
                }
                if (this.BankName != null)
                {
                    hashCode = (hashCode * 59) + this.BankName.GetHashCode();
                }
                if (this.BankIban != null)
                {
                    hashCode = (hashCode * 59) + this.BankIban.GetHashCode();
                }
                if (this.BankSwiftCode != null)
                {
                    hashCode = (hashCode * 59) + this.BankSwiftCode.GetHashCode();
                }
                if (this.ShippingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ShippingAddress.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EInvoice.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscountHighlight.GetHashCode();
                if (this.EiCode != null)
                {
                    hashCode = (hashCode * 59) + this.EiCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DefaultDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.HasIntentDeclaration.GetHashCode();
                if (this.IntentDeclarationProtocolNumber != null)
                {
                    hashCode = (hashCode * 59) + this.IntentDeclarationProtocolNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IntentDeclarationProtocolDate.GetHashCode();
                if (this.PriceListId != null)
                {
                    hashCode = (hashCode * 59) + this.PriceListId.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="ModelClient" />
    /// </summary>
    public class ModelClientJsonConverter : JsonConverter<ModelClient>
    {
        /// <summary>
        /// The format to use to serialize IntentDeclarationProtocolDate
        /// </summary>
        public static string IntentDeclarationProtocolDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ModelClient" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModelClient Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> code = default;
            Option<string?> name = default;
            Option<ClientType?> type = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> contactPerson = default;
            Option<string?> vatNumber = default;
            Option<string?> taxCode = default;
            Option<string?> addressStreet = default;
            Option<string?> addressPostalCode = default;
            Option<string?> addressCity = default;
            Option<string?> addressProvince = default;
            Option<string?> addressExtra = default;
            Option<string?> country = default;
            Option<string?> countryIso = default;
            Option<string?> email = default;
            Option<string?> certifiedEmail = default;
            Option<string?> phone = default;
            Option<string?> fax = default;
            Option<string?> notes = default;
            Option<VatType?> defaultVat = default;
            Option<int?> defaultPaymentTerms = default;
            Option<PaymentTermsType?> defaultPaymentTermsType = default;
            Option<PaymentMethod?> defaultPaymentMethod = default;
            Option<string?> bankName = default;
            Option<string?> bankIban = default;
            Option<string?> bankSwiftCode = default;
            Option<string?> shippingAddress = default;
            Option<bool?> eInvoice = default;
            Option<bool?> discountHighlight = default;
            Option<string?> eiCode = default;
            Option<decimal?> defaultDiscount = default;
            Option<bool?> hasIntentDeclaration = default;
            Option<string?> intentDeclarationProtocolNumber = default;
            Option<DateOnly?> intentDeclarationProtocolDate = default;
            Option<string?> priceListId = default;
            Option<string?> createdAt = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ClientType?>(ClientTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contact_person":
                            contactPerson = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "vat_number":
                            vatNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "tax_code":
                            taxCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "address_street":
                            addressStreet = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "address_postal_code":
                            addressPostalCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "address_city":
                            addressCity = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "address_province":
                            addressProvince = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "address_extra":
                            addressExtra = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "country_iso":
                            countryIso = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "certified_email":
                            certifiedEmail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "phone":
                            phone = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fax":
                            fax = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_vat":
                            defaultVat = new Option<VatType?>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "default_payment_terms":
                            defaultPaymentTerms = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "default_payment_terms_type":
                            string? defaultPaymentTermsTypeRawValue = utf8JsonReader.GetString();
                            if (defaultPaymentTermsTypeRawValue != null)
                                defaultPaymentTermsType = new Option<PaymentTermsType?>(PaymentTermsTypeValueConverter.FromStringOrDefault(defaultPaymentTermsTypeRawValue));
                            break;
                        case "default_payment_method":
                            defaultPaymentMethod = new Option<PaymentMethod?>(JsonSerializer.Deserialize<PaymentMethod>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bank_name":
                            bankName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bank_iban":
                            bankIban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bank_swift_code":
                            bankSwiftCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "shipping_address":
                            shippingAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "discount_highlight":
                            discountHighlight = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_code":
                            eiCode = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "default_discount":
                            defaultDiscount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "has_intent_declaration":
                            hasIntentDeclaration = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "intent_declaration_protocol_number":
                            intentDeclarationProtocolNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "intent_declaration_protocol_date":
                            intentDeclarationProtocolDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price_list_id":
                            priceListId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (defaultPaymentTermsType.IsSet && defaultPaymentTermsType.Value == null)
                throw new ArgumentNullException(nameof(defaultPaymentTermsType), "Property is not nullable for class ModelClient.");

            if (defaultPaymentMethod.IsSet && defaultPaymentMethod.Value == null)
                throw new ArgumentNullException(nameof(defaultPaymentMethod), "Property is not nullable for class ModelClient.");

            return new ModelClient(id, code, name, type, firstName, lastName, contactPerson, vatNumber, taxCode, addressStreet, addressPostalCode, addressCity, addressProvince, addressExtra, country, countryIso, email, certifiedEmail, phone, fax, notes, defaultVat, defaultPaymentTerms, defaultPaymentTermsType, defaultPaymentMethod, bankName, bankIban, bankSwiftCode, shippingAddress, eInvoice, discountHighlight, eiCode, defaultDiscount, hasIntentDeclaration, intentDeclarationProtocolNumber, intentDeclarationProtocolDate, priceListId, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="ModelClient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelClient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModelClient modelClient, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modelClient, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModelClient" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modelClient"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModelClient modelClient, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modelClient.DefaultPaymentMethodOption.IsSet && modelClient.DefaultPaymentMethod == null)
                throw new ArgumentNullException(nameof(modelClient.DefaultPaymentMethod), "Property is required for class ModelClient.");

            if (modelClient.IdOption.IsSet)
                if (modelClient.IdOption.Value != null)
                    writer.WriteNumber("id", modelClient.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (modelClient.CodeOption.IsSet)
                if (modelClient.CodeOption.Value != null)
                    writer.WriteString("code", modelClient.Code);
                else
                    writer.WriteNull("code");

            if (modelClient.NameOption.IsSet)
                if (modelClient.NameOption.Value != null)
                    writer.WriteString("name", modelClient.Name);
                else
                    writer.WriteNull("name");

            if (modelClient.TypeOption.IsSet)
                if (modelClient.TypeOption!.Value != null)
                {
                    var typeRawValue = ClientTypeValueConverter.ToJsonValue(modelClient.TypeOption.Value!.Value);
                    writer.WriteString("type", typeRawValue);
                }
                else
                    writer.WriteNull("type");
            if (modelClient.FirstNameOption.IsSet)
                if (modelClient.FirstNameOption.Value != null)
                    writer.WriteString("first_name", modelClient.FirstName);
                else
                    writer.WriteNull("first_name");

            if (modelClient.LastNameOption.IsSet)
                if (modelClient.LastNameOption.Value != null)
                    writer.WriteString("last_name", modelClient.LastName);
                else
                    writer.WriteNull("last_name");

            if (modelClient.ContactPersonOption.IsSet)
                if (modelClient.ContactPersonOption.Value != null)
                    writer.WriteString("contact_person", modelClient.ContactPerson);
                else
                    writer.WriteNull("contact_person");

            if (modelClient.VatNumberOption.IsSet)
                if (modelClient.VatNumberOption.Value != null)
                    writer.WriteString("vat_number", modelClient.VatNumber);
                else
                    writer.WriteNull("vat_number");

            if (modelClient.TaxCodeOption.IsSet)
                if (modelClient.TaxCodeOption.Value != null)
                    writer.WriteString("tax_code", modelClient.TaxCode);
                else
                    writer.WriteNull("tax_code");

            if (modelClient.AddressStreetOption.IsSet)
                if (modelClient.AddressStreetOption.Value != null)
                    writer.WriteString("address_street", modelClient.AddressStreet);
                else
                    writer.WriteNull("address_street");

            if (modelClient.AddressPostalCodeOption.IsSet)
                if (modelClient.AddressPostalCodeOption.Value != null)
                    writer.WriteString("address_postal_code", modelClient.AddressPostalCode);
                else
                    writer.WriteNull("address_postal_code");

            if (modelClient.AddressCityOption.IsSet)
                if (modelClient.AddressCityOption.Value != null)
                    writer.WriteString("address_city", modelClient.AddressCity);
                else
                    writer.WriteNull("address_city");

            if (modelClient.AddressProvinceOption.IsSet)
                if (modelClient.AddressProvinceOption.Value != null)
                    writer.WriteString("address_province", modelClient.AddressProvince);
                else
                    writer.WriteNull("address_province");

            if (modelClient.AddressExtraOption.IsSet)
                if (modelClient.AddressExtraOption.Value != null)
                    writer.WriteString("address_extra", modelClient.AddressExtra);
                else
                    writer.WriteNull("address_extra");

            if (modelClient.CountryOption.IsSet)
                if (modelClient.CountryOption.Value != null)
                    writer.WriteString("country", modelClient.Country);
                else
                    writer.WriteNull("country");

            if (modelClient.CountryIsoOption.IsSet)
                if (modelClient.CountryIsoOption.Value != null)
                    writer.WriteString("country_iso", modelClient.CountryIso);
                else
                    writer.WriteNull("country_iso");

            if (modelClient.EmailOption.IsSet)
                if (modelClient.EmailOption.Value != null)
                    writer.WriteString("email", modelClient.Email);
                else
                    writer.WriteNull("email");

            if (modelClient.CertifiedEmailOption.IsSet)
                if (modelClient.CertifiedEmailOption.Value != null)
                    writer.WriteString("certified_email", modelClient.CertifiedEmail);
                else
                    writer.WriteNull("certified_email");

            if (modelClient.PhoneOption.IsSet)
                if (modelClient.PhoneOption.Value != null)
                    writer.WriteString("phone", modelClient.Phone);
                else
                    writer.WriteNull("phone");

            if (modelClient.FaxOption.IsSet)
                if (modelClient.FaxOption.Value != null)
                    writer.WriteString("fax", modelClient.Fax);
                else
                    writer.WriteNull("fax");

            if (modelClient.NotesOption.IsSet)
                if (modelClient.NotesOption.Value != null)
                    writer.WriteString("notes", modelClient.Notes);
                else
                    writer.WriteNull("notes");

            if (modelClient.DefaultVatOption.IsSet)
                if (modelClient.DefaultVatOption.Value != null)
                {
                    writer.WritePropertyName("default_vat");
                    JsonSerializer.Serialize(writer, modelClient.DefaultVat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("default_vat");
            if (modelClient.DefaultPaymentTermsOption.IsSet)
                if (modelClient.DefaultPaymentTermsOption.Value != null)
                    writer.WriteNumber("default_payment_terms", modelClient.DefaultPaymentTermsOption.Value!.Value);
                else
                    writer.WriteNull("default_payment_terms");

            if (modelClient.DefaultPaymentTermsTypeOption.IsSet)
            {
                var defaultPaymentTermsTypeRawValue = PaymentTermsTypeValueConverter.ToJsonValue(modelClient.DefaultPaymentTermsType!.Value);
                writer.WriteString("default_payment_terms_type", defaultPaymentTermsTypeRawValue);
            }
            if (modelClient.DefaultPaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("default_payment_method");
                JsonSerializer.Serialize(writer, modelClient.DefaultPaymentMethod, jsonSerializerOptions);
            }
            if (modelClient.BankNameOption.IsSet)
                if (modelClient.BankNameOption.Value != null)
                    writer.WriteString("bank_name", modelClient.BankName);
                else
                    writer.WriteNull("bank_name");

            if (modelClient.BankIbanOption.IsSet)
                if (modelClient.BankIbanOption.Value != null)
                    writer.WriteString("bank_iban", modelClient.BankIban);
                else
                    writer.WriteNull("bank_iban");

            if (modelClient.BankSwiftCodeOption.IsSet)
                if (modelClient.BankSwiftCodeOption.Value != null)
                    writer.WriteString("bank_swift_code", modelClient.BankSwiftCode);
                else
                    writer.WriteNull("bank_swift_code");

            if (modelClient.ShippingAddressOption.IsSet)
                if (modelClient.ShippingAddressOption.Value != null)
                    writer.WriteString("shipping_address", modelClient.ShippingAddress);
                else
                    writer.WriteNull("shipping_address");

            if (modelClient.EInvoiceOption.IsSet)
                if (modelClient.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", modelClient.EInvoiceOption.Value!.Value);
                else
                    writer.WriteNull("e_invoice");

            if (modelClient.DiscountHighlightOption.IsSet)
                if (modelClient.DiscountHighlightOption.Value != null)
                    writer.WriteBoolean("discount_highlight", modelClient.DiscountHighlightOption.Value!.Value);
                else
                    writer.WriteNull("discount_highlight");

            if (modelClient.EiCodeOption.IsSet)
                if (modelClient.EiCodeOption.Value != null)
                    writer.WriteString("ei_code", modelClient.EiCode);
                else
                    writer.WriteNull("ei_code");

            if (modelClient.DefaultDiscountOption.IsSet)
                if (modelClient.DefaultDiscountOption.Value != null)
                    writer.WriteNumber("default_discount", modelClient.DefaultDiscountOption.Value!.Value);
                else
                    writer.WriteNull("default_discount");

            if (modelClient.HasIntentDeclarationOption.IsSet)
                if (modelClient.HasIntentDeclarationOption.Value != null)
                    writer.WriteBoolean("has_intent_declaration", modelClient.HasIntentDeclarationOption.Value!.Value);
                else
                    writer.WriteNull("has_intent_declaration");

            if (modelClient.IntentDeclarationProtocolNumberOption.IsSet)
                if (modelClient.IntentDeclarationProtocolNumberOption.Value != null)
                    writer.WriteString("intent_declaration_protocol_number", modelClient.IntentDeclarationProtocolNumber);
                else
                    writer.WriteNull("intent_declaration_protocol_number");

            if (modelClient.IntentDeclarationProtocolDateOption.IsSet)
                if (modelClient.IntentDeclarationProtocolDateOption.Value != null)
                    writer.WriteString("intent_declaration_protocol_date", modelClient.IntentDeclarationProtocolDateOption.Value!.Value.ToString(IntentDeclarationProtocolDateFormat));
                else
                    writer.WriteNull("intent_declaration_protocol_date");

            if (modelClient.PriceListIdOption.IsSet)
                if (modelClient.PriceListIdOption.Value != null)
                    writer.WriteString("price_list_id", modelClient.PriceListId);
                else
                    writer.WriteNull("price_list_id");

            if (modelClient.CreatedAtOption.IsSet)
                if (modelClient.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", modelClient.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (modelClient.UpdatedAtOption.IsSet)
                if (modelClient.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", modelClient.UpdatedAt);
                else
                    writer.WriteNull("updated_at");
        }
    }
}
