// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// User company role
    /// </summary>
    /// <value>User company role</value>
    public enum UserCompanyRole
    {
        /// <summary>
        /// Enum Master for value: master
        /// </summary>
        Master = 1,

        /// <summary>
        /// Enum Subaccount for value: subaccount
        /// </summary>
        Subaccount = 2,

        /// <summary>
        /// Enum Employee for value: employee
        /// </summary>
        Employee = 3
    }

    /// <summary>
    /// Converts <see cref="UserCompanyRole"/> to and from the JSON value
    /// </summary>
    public static class UserCompanyRoleValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserCompanyRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserCompanyRole FromString(string value)
        {
            if (value.Equals("master"))
                return UserCompanyRole.Master;

            if (value.Equals("subaccount"))
                return UserCompanyRole.Subaccount;

            if (value.Equals("employee"))
                return UserCompanyRole.Employee;

            throw new NotImplementedException($"Could not convert value to type UserCompanyRole: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserCompanyRole"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserCompanyRole? FromStringOrDefault(string value)
        {
            if (value.Equals("master"))
                return UserCompanyRole.Master;

            if (value.Equals("subaccount"))
                return UserCompanyRole.Subaccount;

            if (value.Equals("employee"))
                return UserCompanyRole.Employee;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserCompanyRole"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UserCompanyRole value)
        {
            if (value == UserCompanyRole.Master)
                return "master";

            if (value == UserCompanyRole.Subaccount)
                return "subaccount";

            if (value == UserCompanyRole.Employee)
                return "employee";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserCompanyRole"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserCompanyRoleJsonConverter : JsonConverter<UserCompanyRole>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserCompanyRole Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserCompanyRole? result = rawValue == null
                ? null
                : UserCompanyRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserCompanyRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userCompanyRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserCompanyRole userCompanyRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(UserCompanyRoleValueConverter.ToJsonValue(userCompanyRole).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserCompanyRole"/>
    /// </summary>
    public class UserCompanyRoleNullableJsonConverter : JsonConverter<UserCompanyRole?>
    {
        /// <summary>
        /// Returns a UserCompanyRole from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserCompanyRole? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserCompanyRole? result = rawValue == null
                ? null
                : UserCompanyRoleValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserCompanyRole to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userCompanyRole"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserCompanyRole? userCompanyRole, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userCompanyRole.HasValue ? UserCompanyRoleValueConverter.ToJsonValue(userCompanyRole.Value).ToString() : "null");
        }
    }
}
