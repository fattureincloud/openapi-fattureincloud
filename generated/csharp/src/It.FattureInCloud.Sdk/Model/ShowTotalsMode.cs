// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Show totals mode
    /// </summary>
    /// <value>Show totals mode</value>
    public enum ShowTotalsMode
    {
        /// <summary>
        /// Enum None for value: none
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum Nets for value: nets
        /// </summary>
        Nets = 2,

        /// <summary>
        /// Enum All for value: all
        /// </summary>
        All = 3
    }

    /// <summary>
    /// Converts <see cref="ShowTotalsMode"/> to and from the JSON value
    /// </summary>
    public static class ShowTotalsModeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ShowTotalsMode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShowTotalsMode FromString(string value)
        {
            if (value.Equals("none"))
                return ShowTotalsMode.None;

            if (value.Equals("nets"))
                return ShowTotalsMode.Nets;

            if (value.Equals("all"))
                return ShowTotalsMode.All;

            throw new NotImplementedException($"Could not convert value to type ShowTotalsMode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ShowTotalsMode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ShowTotalsMode? FromStringOrDefault(string value)
        {
            if (value.Equals("none"))
                return ShowTotalsMode.None;

            if (value.Equals("nets"))
                return ShowTotalsMode.Nets;

            if (value.Equals("all"))
                return ShowTotalsMode.All;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ShowTotalsMode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ShowTotalsMode value)
        {
            if (value == ShowTotalsMode.None)
                return "none";

            if (value == ShowTotalsMode.Nets)
                return "nets";

            if (value == ShowTotalsMode.All)
                return "all";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShowTotalsMode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ShowTotalsModeJsonConverter : JsonConverter<ShowTotalsMode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ShowTotalsMode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ShowTotalsMode? result = rawValue == null
                ? null
                : ShowTotalsModeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ShowTotalsMode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="showTotalsMode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ShowTotalsMode showTotalsMode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ShowTotalsModeValueConverter.ToJsonValue(showTotalsMode).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ShowTotalsMode"/>
    /// </summary>
    public class ShowTotalsModeNullableJsonConverter : JsonConverter<ShowTotalsMode?>
    {
        /// <summary>
        /// Returns a ShowTotalsMode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ShowTotalsMode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ShowTotalsMode? result = rawValue == null
                ? null
                : ShowTotalsModeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ShowTotalsMode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="showTotalsMode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ShowTotalsMode? showTotalsMode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(showTotalsMode.HasValue ? ShowTotalsModeValueConverter.ToJsonValue(showTotalsMode.Value).ToString() : "null");
        }
    }
}
