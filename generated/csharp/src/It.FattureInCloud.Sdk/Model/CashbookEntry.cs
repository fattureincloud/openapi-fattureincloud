// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CashbookEntry
    /// </summary>
    [DataContract(Name = "CashbookEntry")]
    public partial class CashbookEntry : IEquatable<CashbookEntry>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>

        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public CashbookEntryKind? Kind
        {
            get{ return _Kind;}
            set
            {
                _Kind = value;
                _flagKind = true;
            }
        }
        private CashbookEntryKind? _Kind;
        private bool _flagKind;

        /// <summary>
        /// Returns false as Kind should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKind()
        {
            return _flagKind;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public CashbookEntryType? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private CashbookEntryType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CashbookEntry" /> class.
        /// </summary>
        /// <param name="id">Cashbook id.</param>
        /// <param name="date">Cashbook date.</param>
        /// <param name="description">Cashbook description.</param>
        /// <param name="kind">kind.</param>
        /// <param name="type">type.</param>
        /// <param name="entityName">Cashbook entity name.</param>
        /// <param name="document">document.</param>
        /// <param name="amountIn">[Only for cashbook entry in] Cashbook total amount in.</param>
        /// <param name="paymentAccountIn">paymentAccountIn.</param>
        /// <param name="amountOut">[Only for cashbook entry out] Cashbook total amount out.</param>
        /// <param name="paymentAccountOut">paymentAccountOut.</param>
        public CashbookEntry(string id = default, DateOnly date = default, string description = default, CashbookEntryKind? kind = default, CashbookEntryType? type = default, string entityName = default, CashbookEntryDocument document = default, decimal amountIn = default, PaymentAccount paymentAccountIn = default, decimal amountOut = default, PaymentAccount paymentAccountOut = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Date = date;
            if (this.Date != null)
            {
                this._flagDate = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Kind = kind;
            if (this.Kind != null)
            {
                this._flagKind = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._EntityName = entityName;
            if (this.EntityName != null)
            {
                this._flagEntityName = true;
            }
            this._Document = document;
            if (this.Document != null)
            {
                this._flagDocument = true;
            }
            this._AmountIn = amountIn;
            if (this.AmountIn != null)
            {
                this._flagAmountIn = true;
            }
            this._PaymentAccountIn = paymentAccountIn;
            if (this.PaymentAccountIn != null)
            {
                this._flagPaymentAccountIn = true;
            }
            this._AmountOut = amountOut;
            if (this.AmountOut != null)
            {
                this._flagAmountOut = true;
            }
            this._PaymentAccountOut = paymentAccountOut;
            if (this.PaymentAccountOut != null)
            {
                this._flagPaymentAccountOut = true;
            }
        }

        /// <summary>
        /// Cashbook id
        /// </summary>
        /// <value>Cashbook id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Cashbook date
        /// </summary>
        /// <value>Cashbook date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateOnly Date
        {
            get{ return _Date;}
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }
        private DateOnly _Date;
        private bool _flagDate;

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }
        /// <summary>
        /// Cashbook description
        /// </summary>
        /// <value>Cashbook description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Cashbook entity name
        /// </summary>
        /// <value>Cashbook entity name</value>
        [DataMember(Name = "entity_name", EmitDefaultValue = true)]
        public string EntityName
        {
            get{ return _EntityName;}
            set
            {
                _EntityName = value;
                _flagEntityName = true;
            }
        }
        private string _EntityName;
        private bool _flagEntityName;

        /// <summary>
        /// Returns false as EntityName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntityName()
        {
            return _flagEntityName;
        }
        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = true)]
        public CashbookEntryDocument Document
        {
            get{ return _Document;}
            set
            {
                _Document = value;
                _flagDocument = true;
            }
        }
        private CashbookEntryDocument _Document;
        private bool _flagDocument;

        /// <summary>
        /// Returns false as Document should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocument()
        {
            return _flagDocument;
        }
        /// <summary>
        /// [Only for cashbook entry in] Cashbook total amount in
        /// </summary>
        /// <value>[Only for cashbook entry in] Cashbook total amount in</value>
        [DataMember(Name = "amount_in", EmitDefaultValue = true)]
        public decimal AmountIn
        {
            get{ return _AmountIn;}
            set
            {
                _AmountIn = value;
                _flagAmountIn = true;
            }
        }
        private decimal _AmountIn;
        private bool _flagAmountIn;

        /// <summary>
        /// Returns false as AmountIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountIn()
        {
            return _flagAmountIn;
        }
        /// <summary>
        /// Gets or Sets PaymentAccountIn
        /// </summary>
        [DataMember(Name = "payment_account_in", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccountIn
        {
            get{ return _PaymentAccountIn;}
            set
            {
                _PaymentAccountIn = value;
                _flagPaymentAccountIn = true;
            }
        }
        private PaymentAccount _PaymentAccountIn;
        private bool _flagPaymentAccountIn;

        /// <summary>
        /// Returns false as PaymentAccountIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountIn()
        {
            return _flagPaymentAccountIn;
        }
        /// <summary>
        /// [Only for cashbook entry out] Cashbook total amount out
        /// </summary>
        /// <value>[Only for cashbook entry out] Cashbook total amount out</value>
        [DataMember(Name = "amount_out", EmitDefaultValue = true)]
        public decimal AmountOut
        {
            get{ return _AmountOut;}
            set
            {
                _AmountOut = value;
                _flagAmountOut = true;
            }
        }
        private decimal _AmountOut;
        private bool _flagAmountOut;

        /// <summary>
        /// Returns false as AmountOut should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOut()
        {
            return _flagAmountOut;
        }
        /// <summary>
        /// Gets or Sets PaymentAccountOut
        /// </summary>
        [DataMember(Name = "payment_account_out", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccountOut
        {
            get{ return _PaymentAccountOut;}
            set
            {
                _PaymentAccountOut = value;
                _flagPaymentAccountOut = true;
            }
        }
        private PaymentAccount _PaymentAccountOut;
        private bool _flagPaymentAccountOut;

        /// <summary>
        /// Returns false as PaymentAccountOut should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountOut()
        {
            return _flagPaymentAccountOut;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CashbookEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  AmountIn: ").Append(AmountIn).Append("\n");
            sb.Append("  PaymentAccountIn: ").Append(PaymentAccountIn).Append("\n");
            sb.Append("  AmountOut: ").Append(AmountOut).Append("\n");
            sb.Append("  PaymentAccountOut: ").Append(PaymentAccountOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CashbookEntry);
        }

        /// <summary>
        /// Returns true if CashbookEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of CashbookEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashbookEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Date == input.Date ||
                    this.Date.Equals(input.Date)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Kind == input.Kind ||
                    this.Kind.Equals(input.Kind)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.EntityName == input.EntityName ||
                    (this.EntityName != null &&
                    this.EntityName.Equals(input.EntityName))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.AmountIn == input.AmountIn ||
                    this.AmountIn.Equals(input.AmountIn)
                ) && 
                (
                    this.PaymentAccountIn == input.PaymentAccountIn ||
                    (this.PaymentAccountIn != null &&
                    this.PaymentAccountIn.Equals(input.PaymentAccountIn))
                ) && 
                (
                    this.AmountOut == input.AmountOut ||
                    this.AmountOut.Equals(input.AmountOut)
                ) && 
                (
                    this.PaymentAccountOut == input.PaymentAccountOut ||
                    (this.PaymentAccountOut != null &&
                    this.PaymentAccountOut.Equals(input.PaymentAccountOut))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Date.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Kind.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.EntityName != null)
                {
                    hashCode = (hashCode * 59) + this.EntityName.GetHashCode();
                }
                if (this.Document != null)
                {
                    hashCode = (hashCode * 59) + this.Document.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountIn.GetHashCode();
                if (this.PaymentAccountIn != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccountIn.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AmountOut.GetHashCode();
                if (this.PaymentAccountOut != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccountOut.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="CashbookEntry" />
    /// </summary>
    public class CashbookEntryJsonConverter : JsonConverter<CashbookEntry>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="CashbookEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CashbookEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<DateOnly?> date = default;
            Option<string?> description = default;
            Option<CashbookEntryKind?> kind = default;
            Option<CashbookEntryType?> type = default;
            Option<string?> entityName = default;
            Option<CashbookEntryDocument?> document = default;
            Option<decimal?> amountIn = default;
            Option<PaymentAccount?> paymentAccountIn = default;
            Option<decimal?> amountOut = default;
            Option<PaymentAccount?> paymentAccountOut = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "date":
                            date = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "kind":
                            string? kindRawValue = utf8JsonReader.GetString();
                            if (kindRawValue != null)
                                kind = new Option<CashbookEntryKind?>(CashbookEntryKindValueConverter.FromStringOrDefault(kindRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CashbookEntryType?>(CashbookEntryTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "entity_name":
                            entityName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "document":
                            document = new Option<CashbookEntryDocument?>(JsonSerializer.Deserialize<CashbookEntryDocument>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount_in":
                            amountIn = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payment_account_in":
                            paymentAccountIn = new Option<PaymentAccount?>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount_out":
                            amountOut = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payment_account_out":
                            paymentAccountOut = new Option<PaymentAccount?>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (kind.IsSet && kind.Value == null)
                throw new ArgumentNullException(nameof(kind), "Property is not nullable for class CashbookEntry.");

            return new CashbookEntry(id, date, description, kind, type, entityName, document, amountIn, paymentAccountIn, amountOut, paymentAccountOut);
        }

        /// <summary>
        /// Serializes a <see cref="CashbookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CashbookEntry cashbookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, cashbookEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CashbookEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cashbookEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CashbookEntry cashbookEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cashbookEntry.IdOption.IsSet)
                if (cashbookEntry.IdOption.Value != null)
                    writer.WriteString("id", cashbookEntry.Id);
                else
                    writer.WriteNull("id");

            if (cashbookEntry.DateOption.IsSet)
                if (cashbookEntry.DateOption.Value != null)
                    writer.WriteString("date", cashbookEntry.DateOption.Value!.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (cashbookEntry.DescriptionOption.IsSet)
                if (cashbookEntry.DescriptionOption.Value != null)
                    writer.WriteString("description", cashbookEntry.Description);
                else
                    writer.WriteNull("description");

            if (cashbookEntry.KindOption.IsSet)
            {
                var kindRawValue = CashbookEntryKindValueConverter.ToJsonValue(cashbookEntry.Kind!.Value);
                writer.WriteString("kind", kindRawValue);
            }
            if (cashbookEntry.TypeOption.IsSet)
                if (cashbookEntry.TypeOption!.Value != null)
                {
                    var typeRawValue = CashbookEntryTypeValueConverter.ToJsonValue(cashbookEntry.TypeOption.Value!.Value);
                    writer.WriteString("type", typeRawValue);
                }
                else
                    writer.WriteNull("type");
            if (cashbookEntry.EntityNameOption.IsSet)
                if (cashbookEntry.EntityNameOption.Value != null)
                    writer.WriteString("entity_name", cashbookEntry.EntityName);
                else
                    writer.WriteNull("entity_name");

            if (cashbookEntry.DocumentOption.IsSet)
                if (cashbookEntry.DocumentOption.Value != null)
                {
                    writer.WritePropertyName("document");
                    JsonSerializer.Serialize(writer, cashbookEntry.Document, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("document");
            if (cashbookEntry.AmountInOption.IsSet)
                if (cashbookEntry.AmountInOption.Value != null)
                    writer.WriteNumber("amount_in", cashbookEntry.AmountInOption.Value!.Value);
                else
                    writer.WriteNull("amount_in");

            if (cashbookEntry.PaymentAccountInOption.IsSet)
                if (cashbookEntry.PaymentAccountInOption.Value != null)
                {
                    writer.WritePropertyName("payment_account_in");
                    JsonSerializer.Serialize(writer, cashbookEntry.PaymentAccountIn, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account_in");
            if (cashbookEntry.AmountOutOption.IsSet)
                if (cashbookEntry.AmountOutOption.Value != null)
                    writer.WriteNumber("amount_out", cashbookEntry.AmountOutOption.Value!.Value);
                else
                    writer.WriteNull("amount_out");

            if (cashbookEntry.PaymentAccountOutOption.IsSet)
                if (cashbookEntry.PaymentAccountOutOption.Value != null)
                {
                    writer.WritePropertyName("payment_account_out");
                    JsonSerializer.Serialize(writer, cashbookEntry.PaymentAccountOut, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account_out");
        }
    }
}
