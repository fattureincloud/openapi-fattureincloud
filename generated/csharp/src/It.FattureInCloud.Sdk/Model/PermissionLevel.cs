// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Permission level
    /// </summary>
    /// <value>Permission level</value>
    public enum PermissionLevel
    {
        /// <summary>
        /// Enum None for value: none
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum Read for value: read
        /// </summary>
        Read = 2,

        /// <summary>
        /// Enum Write for value: write
        /// </summary>
        Write = 3,

        /// <summary>
        /// Enum Detailed for value: detailed
        /// </summary>
        Detailed = 4
    }

    /// <summary>
    /// Converts <see cref="PermissionLevel"/> to and from the JSON value
    /// </summary>
    public static class PermissionLevelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PermissionLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PermissionLevel FromString(string value)
        {
            if (value.Equals("none"))
                return PermissionLevel.None;

            if (value.Equals("read"))
                return PermissionLevel.Read;

            if (value.Equals("write"))
                return PermissionLevel.Write;

            if (value.Equals("detailed"))
                return PermissionLevel.Detailed;

            throw new NotImplementedException($"Could not convert value to type PermissionLevel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PermissionLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PermissionLevel? FromStringOrDefault(string value)
        {
            if (value.Equals("none"))
                return PermissionLevel.None;

            if (value.Equals("read"))
                return PermissionLevel.Read;

            if (value.Equals("write"))
                return PermissionLevel.Write;

            if (value.Equals("detailed"))
                return PermissionLevel.Detailed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PermissionLevel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PermissionLevel value)
        {
            if (value == PermissionLevel.None)
                return "none";

            if (value == PermissionLevel.Read)
                return "read";

            if (value == PermissionLevel.Write)
                return "write";

            if (value == PermissionLevel.Detailed)
                return "detailed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PermissionLevel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PermissionLevelJsonConverter : JsonConverter<PermissionLevel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PermissionLevel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PermissionLevel? result = rawValue == null
                ? null
                : PermissionLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PermissionLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permissionLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PermissionLevel permissionLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PermissionLevelValueConverter.ToJsonValue(permissionLevel).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PermissionLevel"/>
    /// </summary>
    public class PermissionLevelNullableJsonConverter : JsonConverter<PermissionLevel?>
    {
        /// <summary>
        /// Returns a PermissionLevel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PermissionLevel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PermissionLevel? result = rawValue == null
                ? null
                : PermissionLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PermissionLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="permissionLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PermissionLevel? permissionLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(permissionLevel.HasValue ? PermissionLevelValueConverter.ToJsonValue(permissionLevel.Value).ToString() : "null");
        }
    }
}
