// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Price list types
    /// </summary>
    /// <value>Price list types</value>
    public enum PriceListType
    {
        /// <summary>
        /// Enum Sell for value: sell
        /// </summary>
        Sell = 1,

        /// <summary>
        /// Enum Purchase for value: purchase
        /// </summary>
        Purchase = 2
    }

    /// <summary>
    /// Converts <see cref="PriceListType"/> to and from the JSON value
    /// </summary>
    public static class PriceListTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PriceListType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PriceListType FromString(string value)
        {
            if (value.Equals("sell"))
                return PriceListType.Sell;

            if (value.Equals("purchase"))
                return PriceListType.Purchase;

            throw new NotImplementedException($"Could not convert value to type PriceListType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PriceListType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PriceListType? FromStringOrDefault(string value)
        {
            if (value.Equals("sell"))
                return PriceListType.Sell;

            if (value.Equals("purchase"))
                return PriceListType.Purchase;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PriceListType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PriceListType value)
        {
            if (value == PriceListType.Sell)
                return "sell";

            if (value == PriceListType.Purchase)
                return "purchase";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PriceListType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PriceListTypeJsonConverter : JsonConverter<PriceListType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PriceListType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PriceListType? result = rawValue == null
                ? null
                : PriceListTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PriceListType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceListType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PriceListType priceListType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PriceListTypeValueConverter.ToJsonValue(priceListType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PriceListType"/>
    /// </summary>
    public class PriceListTypeNullableJsonConverter : JsonConverter<PriceListType?>
    {
        /// <summary>
        /// Returns a PriceListType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PriceListType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PriceListType? result = rawValue == null
                ? null
                : PriceListTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PriceListType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceListType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PriceListType? priceListType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(priceListType.HasValue ? PriceListTypeValueConverter.ToJsonValue(priceListType.Value).ToString() : "null");
        }
    }
}
