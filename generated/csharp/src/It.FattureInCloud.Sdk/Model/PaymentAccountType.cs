// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Payment account type
    /// </summary>
    /// <value>Payment account type</value>
    public enum PaymentAccountType
    {
        /// <summary>
        /// Enum Standard for value: standard
        /// </summary>
        Standard = 1,

        /// <summary>
        /// Enum Bank for value: bank
        /// </summary>
        Bank = 2
    }

    /// <summary>
    /// Converts <see cref="PaymentAccountType"/> to and from the JSON value
    /// </summary>
    public static class PaymentAccountTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PaymentAccountType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentAccountType FromString(string value)
        {
            if (value.Equals("standard"))
                return PaymentAccountType.Standard;

            if (value.Equals("bank"))
                return PaymentAccountType.Bank;

            throw new NotImplementedException($"Could not convert value to type PaymentAccountType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PaymentAccountType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentAccountType? FromStringOrDefault(string value)
        {
            if (value.Equals("standard"))
                return PaymentAccountType.Standard;

            if (value.Equals("bank"))
                return PaymentAccountType.Bank;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PaymentAccountType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PaymentAccountType value)
        {
            if (value == PaymentAccountType.Standard)
                return "standard";

            if (value == PaymentAccountType.Bank)
                return "bank";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentAccountType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PaymentAccountTypeJsonConverter : JsonConverter<PaymentAccountType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PaymentAccountType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PaymentAccountType? result = rawValue == null
                ? null
                : PaymentAccountTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PaymentAccountType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PaymentAccountType paymentAccountType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PaymentAccountTypeValueConverter.ToJsonValue(paymentAccountType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentAccountType"/>
    /// </summary>
    public class PaymentAccountTypeNullableJsonConverter : JsonConverter<PaymentAccountType?>
    {
        /// <summary>
        /// Returns a PaymentAccountType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PaymentAccountType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PaymentAccountType? result = rawValue == null
                ? null
                : PaymentAccountTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PaymentAccountType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentAccountType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PaymentAccountType? paymentAccountType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(paymentAccountType.HasValue ? PaymentAccountTypeValueConverter.ToJsonValue(paymentAccountType.Value).ToString() : "null");
        }
    }
}
