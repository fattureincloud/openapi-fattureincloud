// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Webhooks Subscription mapping
    /// </summary>
    /// <value>Webhooks Subscription mapping</value>
    public enum WebhooksSubscriptionMapping
    {
        /// <summary>
        /// Enum Binary for value: binary
        /// </summary>
        Binary = 1,

        /// <summary>
        /// Enum Structured for value: structured
        /// </summary>
        Structured = 2
    }

    /// <summary>
    /// Converts <see cref="WebhooksSubscriptionMapping"/> to and from the JSON value
    /// </summary>
    public static class WebhooksSubscriptionMappingValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="WebhooksSubscriptionMapping"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WebhooksSubscriptionMapping FromString(string value)
        {
            if (value.Equals("binary"))
                return WebhooksSubscriptionMapping.Binary;

            if (value.Equals("structured"))
                return WebhooksSubscriptionMapping.Structured;

            throw new NotImplementedException($"Could not convert value to type WebhooksSubscriptionMapping: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="WebhooksSubscriptionMapping"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WebhooksSubscriptionMapping? FromStringOrDefault(string value)
        {
            if (value.Equals("binary"))
                return WebhooksSubscriptionMapping.Binary;

            if (value.Equals("structured"))
                return WebhooksSubscriptionMapping.Structured;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WebhooksSubscriptionMapping"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(WebhooksSubscriptionMapping value)
        {
            if (value == WebhooksSubscriptionMapping.Binary)
                return "binary";

            if (value == WebhooksSubscriptionMapping.Structured)
                return "structured";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhooksSubscriptionMapping"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class WebhooksSubscriptionMappingJsonConverter : JsonConverter<WebhooksSubscriptionMapping>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WebhooksSubscriptionMapping Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WebhooksSubscriptionMapping? result = rawValue == null
                ? null
                : WebhooksSubscriptionMappingValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WebhooksSubscriptionMapping to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhooksSubscriptionMapping"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WebhooksSubscriptionMapping webhooksSubscriptionMapping, JsonSerializerOptions options)
        {
            writer.WriteStringValue(WebhooksSubscriptionMappingValueConverter.ToJsonValue(webhooksSubscriptionMapping).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhooksSubscriptionMapping"/>
    /// </summary>
    public class WebhooksSubscriptionMappingNullableJsonConverter : JsonConverter<WebhooksSubscriptionMapping?>
    {
        /// <summary>
        /// Returns a WebhooksSubscriptionMapping from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WebhooksSubscriptionMapping? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WebhooksSubscriptionMapping? result = rawValue == null
                ? null
                : WebhooksSubscriptionMappingValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WebhooksSubscriptionMapping to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhooksSubscriptionMapping"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WebhooksSubscriptionMapping? webhooksSubscriptionMapping, JsonSerializerOptions options)
        {
            writer.WriteStringValue(webhooksSubscriptionMapping.HasValue ? WebhooksSubscriptionMappingValueConverter.ToJsonValue(webhooksSubscriptionMapping.Value).ToString() : "null");
        }
    }
}
