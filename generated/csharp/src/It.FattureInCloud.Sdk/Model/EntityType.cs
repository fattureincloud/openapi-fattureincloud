// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Entity type
    /// </summary>
    /// <value>Entity type</value>
    public enum EntityType
    {
        /// <summary>
        /// Enum Company for value: company
        /// </summary>
        Company = 1,

        /// <summary>
        /// Enum Person for value: person
        /// </summary>
        Person = 2,

        /// <summary>
        /// Enum Pa for value: pa
        /// </summary>
        Pa = 3,

        /// <summary>
        /// Enum Condo for value: condo
        /// </summary>
        Condo = 4
    }

    /// <summary>
    /// Converts <see cref="EntityType"/> to and from the JSON value
    /// </summary>
    public static class EntityTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EntityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EntityType FromString(string value)
        {
            if (value.Equals("company"))
                return EntityType.Company;

            if (value.Equals("person"))
                return EntityType.Person;

            if (value.Equals("pa"))
                return EntityType.Pa;

            if (value.Equals("condo"))
                return EntityType.Condo;

            throw new NotImplementedException($"Could not convert value to type EntityType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EntityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EntityType? FromStringOrDefault(string value)
        {
            if (value.Equals("company"))
                return EntityType.Company;

            if (value.Equals("person"))
                return EntityType.Person;

            if (value.Equals("pa"))
                return EntityType.Pa;

            if (value.Equals("condo"))
                return EntityType.Condo;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EntityType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EntityType value)
        {
            if (value == EntityType.Company)
                return "company";

            if (value == EntityType.Person)
                return "person";

            if (value == EntityType.Pa)
                return "pa";

            if (value == EntityType.Condo)
                return "condo";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EntityType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EntityTypeJsonConverter : JsonConverter<EntityType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EntityType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EntityType? result = rawValue == null
                ? null
                : EntityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EntityType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EntityType entityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(EntityTypeValueConverter.ToJsonValue(entityType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EntityType"/>
    /// </summary>
    public class EntityTypeNullableJsonConverter : JsonConverter<EntityType?>
    {
        /// <summary>
        /// Returns a EntityType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EntityType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EntityType? result = rawValue == null
                ? null
                : EntityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EntityType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EntityType? entityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(entityType.HasValue ? EntityTypeValueConverter.ToJsonValue(entityType.Value).ToString() : "null");
        }
    }
}
