// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document e-invoice data [Only if e_invoice&#x3D;true]
    /// </summary>
    [DataContract(Name = "IssuedDocument_ei_data")]
    public partial class IssuedDocumentEiData : IEquatable<IssuedDocumentEiData>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VatKind
        /// </summary>

        [DataMember(Name = "vat_kind", EmitDefaultValue = true)]
        public VatKind? VatKind
        {
            get{ return _VatKind;}
            set
            {
                _VatKind = value;
                _flagVatKind = true;
            }
        }
        private VatKind? _VatKind;
        private bool _flagVatKind;

        /// <summary>
        /// Returns false as VatKind should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatKind()
        {
            return _flagVatKind;
        }

        /// <summary>
        /// Gets or Sets OriginalDocumentType
        /// </summary>

        [DataMember(Name = "original_document_type", EmitDefaultValue = true)]
        public OriginalDocumentType? OriginalDocumentType
        {
            get{ return _OriginalDocumentType;}
            set
            {
                _OriginalDocumentType = value;
                _flagOriginalDocumentType = true;
            }
        }
        private OriginalDocumentType? _OriginalDocumentType;
        private bool _flagOriginalDocumentType;

        /// <summary>
        /// Returns false as OriginalDocumentType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalDocumentType()
        {
            return _flagOriginalDocumentType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentEiData" /> class.
        /// </summary>
        /// <param name="vatKind">vatKind.</param>
        /// <param name="originalDocumentType">originalDocumentType.</param>
        /// <param name="odNumber">E-invoice original document number.</param>
        /// <param name="odDate">E-invoice original document date.</param>
        /// <param name="cig">E-invoice CIG.</param>
        /// <param name="cup">E-invoice CUP.</param>
        /// <param name="paymentMethod">E-invoice payment method [required for e-invoices] (see [here](https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.2/Rappresentazione_Tabellare_FattOrdinaria_V1.2.2.pdf) for the accepted values of ModalitaPagamento).</param>
        /// <param name="bankName">E-invoice bank name.</param>
        /// <param name="bankIban">E-invoice bank IBAN.</param>
        /// <param name="bankBeneficiary">E-invoice bank beneficiary.</param>
        /// <param name="invoiceNumber">E-invoice invoice number.</param>
        /// <param name="invoiceDate">E-invoice invoice date.</param>
        public IssuedDocumentEiData(VatKind? vatKind = default, OriginalDocumentType? originalDocumentType = default, string odNumber = default, DateOnly odDate = default, string cig = default, string cup = default, string paymentMethod = default, string bankName = default, string bankIban = default, string bankBeneficiary = default, string invoiceNumber = default, DateOnly invoiceDate = default)
        {
            this._VatKind = vatKind;
            if (this.VatKind != null)
            {
                this._flagVatKind = true;
            }
            this._OriginalDocumentType = originalDocumentType;
            if (this.OriginalDocumentType != null)
            {
                this._flagOriginalDocumentType = true;
            }
            this._OdNumber = odNumber;
            if (this.OdNumber != null)
            {
                this._flagOdNumber = true;
            }
            this._OdDate = odDate;
            if (this.OdDate != null)
            {
                this._flagOdDate = true;
            }
            this._Cig = cig;
            if (this.Cig != null)
            {
                this._flagCig = true;
            }
            this._Cup = cup;
            if (this.Cup != null)
            {
                this._flagCup = true;
            }
            this._PaymentMethod = paymentMethod;
            if (this.PaymentMethod != null)
            {
                this._flagPaymentMethod = true;
            }
            this._BankName = bankName;
            if (this.BankName != null)
            {
                this._flagBankName = true;
            }
            this._BankIban = bankIban;
            if (this.BankIban != null)
            {
                this._flagBankIban = true;
            }
            this._BankBeneficiary = bankBeneficiary;
            if (this.BankBeneficiary != null)
            {
                this._flagBankBeneficiary = true;
            }
            this._InvoiceNumber = invoiceNumber;
            if (this.InvoiceNumber != null)
            {
                this._flagInvoiceNumber = true;
            }
            this._InvoiceDate = invoiceDate;
            if (this.InvoiceDate != null)
            {
                this._flagInvoiceDate = true;
            }
        }

        /// <summary>
        /// E-invoice original document number
        /// </summary>
        /// <value>E-invoice original document number</value>
        [DataMember(Name = "od_number", EmitDefaultValue = true)]
        public string OdNumber
        {
            get{ return _OdNumber;}
            set
            {
                _OdNumber = value;
                _flagOdNumber = true;
            }
        }
        private string _OdNumber;
        private bool _flagOdNumber;

        /// <summary>
        /// Returns false as OdNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOdNumber()
        {
            return _flagOdNumber;
        }
        /// <summary>
        /// E-invoice original document date
        /// </summary>
        /// <value>E-invoice original document date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "od_date", EmitDefaultValue = true)]
        public DateOnly OdDate
        {
            get{ return _OdDate;}
            set
            {
                _OdDate = value;
                _flagOdDate = true;
            }
        }
        private DateOnly _OdDate;
        private bool _flagOdDate;

        /// <summary>
        /// Returns false as OdDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOdDate()
        {
            return _flagOdDate;
        }
        /// <summary>
        /// E-invoice CIG
        /// </summary>
        /// <value>E-invoice CIG</value>
        [DataMember(Name = "cig", EmitDefaultValue = true)]
        public string Cig
        {
            get{ return _Cig;}
            set
            {
                _Cig = value;
                _flagCig = true;
            }
        }
        private string _Cig;
        private bool _flagCig;

        /// <summary>
        /// Returns false as Cig should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCig()
        {
            return _flagCig;
        }
        /// <summary>
        /// E-invoice CUP
        /// </summary>
        /// <value>E-invoice CUP</value>
        [DataMember(Name = "cup", EmitDefaultValue = true)]
        public string Cup
        {
            get{ return _Cup;}
            set
            {
                _Cup = value;
                _flagCup = true;
            }
        }
        private string _Cup;
        private bool _flagCup;

        /// <summary>
        /// Returns false as Cup should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCup()
        {
            return _flagCup;
        }
        /// <summary>
        /// E-invoice payment method [required for e-invoices] (see [here](https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.2/Rappresentazione_Tabellare_FattOrdinaria_V1.2.2.pdf) for the accepted values of ModalitaPagamento)
        /// </summary>
        /// <value>E-invoice payment method [required for e-invoices] (see [here](https://www.fatturapa.gov.it/export/documenti/fatturapa/v1.2.2/Rappresentazione_Tabellare_FattOrdinaria_V1.2.2.pdf) for the accepted values of ModalitaPagamento)</value>
        [DataMember(Name = "payment_method", EmitDefaultValue = true)]
        public string PaymentMethod
        {
            get{ return _PaymentMethod;}
            set
            {
                _PaymentMethod = value;
                _flagPaymentMethod = true;
            }
        }
        private string _PaymentMethod;
        private bool _flagPaymentMethod;

        /// <summary>
        /// Returns false as PaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethod()
        {
            return _flagPaymentMethod;
        }
        /// <summary>
        /// E-invoice bank name
        /// </summary>
        /// <value>E-invoice bank name</value>
        [DataMember(Name = "bank_name", EmitDefaultValue = true)]
        public string BankName
        {
            get{ return _BankName;}
            set
            {
                _BankName = value;
                _flagBankName = true;
            }
        }
        private string _BankName;
        private bool _flagBankName;

        /// <summary>
        /// Returns false as BankName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankName()
        {
            return _flagBankName;
        }
        /// <summary>
        /// E-invoice bank IBAN
        /// </summary>
        /// <value>E-invoice bank IBAN</value>
        [DataMember(Name = "bank_iban", EmitDefaultValue = true)]
        public string BankIban
        {
            get{ return _BankIban;}
            set
            {
                _BankIban = value;
                _flagBankIban = true;
            }
        }
        private string _BankIban;
        private bool _flagBankIban;

        /// <summary>
        /// Returns false as BankIban should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankIban()
        {
            return _flagBankIban;
        }
        /// <summary>
        /// E-invoice bank beneficiary
        /// </summary>
        /// <value>E-invoice bank beneficiary</value>
        [DataMember(Name = "bank_beneficiary", EmitDefaultValue = true)]
        public string BankBeneficiary
        {
            get{ return _BankBeneficiary;}
            set
            {
                _BankBeneficiary = value;
                _flagBankBeneficiary = true;
            }
        }
        private string _BankBeneficiary;
        private bool _flagBankBeneficiary;

        /// <summary>
        /// Returns false as BankBeneficiary should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBankBeneficiary()
        {
            return _flagBankBeneficiary;
        }
        /// <summary>
        /// E-invoice invoice number
        /// </summary>
        /// <value>E-invoice invoice number</value>
        [DataMember(Name = "invoice_number", EmitDefaultValue = true)]
        public string InvoiceNumber
        {
            get{ return _InvoiceNumber;}
            set
            {
                _InvoiceNumber = value;
                _flagInvoiceNumber = true;
            }
        }
        private string _InvoiceNumber;
        private bool _flagInvoiceNumber;

        /// <summary>
        /// Returns false as InvoiceNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInvoiceNumber()
        {
            return _flagInvoiceNumber;
        }
        /// <summary>
        /// E-invoice invoice date
        /// </summary>
        /// <value>E-invoice invoice date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "invoice_date", EmitDefaultValue = true)]
        public DateOnly InvoiceDate
        {
            get{ return _InvoiceDate;}
            set
            {
                _InvoiceDate = value;
                _flagInvoiceDate = true;
            }
        }
        private DateOnly _InvoiceDate;
        private bool _flagInvoiceDate;

        /// <summary>
        /// Returns false as InvoiceDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInvoiceDate()
        {
            return _flagInvoiceDate;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentEiData {\n");
            sb.Append("  VatKind: ").Append(VatKind).Append("\n");
            sb.Append("  OriginalDocumentType: ").Append(OriginalDocumentType).Append("\n");
            sb.Append("  OdNumber: ").Append(OdNumber).Append("\n");
            sb.Append("  OdDate: ").Append(OdDate).Append("\n");
            sb.Append("  Cig: ").Append(Cig).Append("\n");
            sb.Append("  Cup: ").Append(Cup).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("  BankIban: ").Append(BankIban).Append("\n");
            sb.Append("  BankBeneficiary: ").Append(BankBeneficiary).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentEiData);
        }

        /// <summary>
        /// Returns true if IssuedDocumentEiData instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentEiData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentEiData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VatKind == input.VatKind ||
                    this.VatKind.Equals(input.VatKind)
                ) && 
                (
                    this.OriginalDocumentType == input.OriginalDocumentType ||
                    this.OriginalDocumentType.Equals(input.OriginalDocumentType)
                ) && 
                (
                    this.OdNumber == input.OdNumber ||
                    (this.OdNumber != null &&
                    this.OdNumber.Equals(input.OdNumber))
                ) && 
                (
                    this.OdDate == input.OdDate ||
                    this.OdDate.Equals(input.OdDate)
                ) && 
                (
                    this.Cig == input.Cig ||
                    (this.Cig != null &&
                    this.Cig.Equals(input.Cig))
                ) && 
                (
                    this.Cup == input.Cup ||
                    (this.Cup != null &&
                    this.Cup.Equals(input.Cup))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                ) && 
                (
                    this.BankIban == input.BankIban ||
                    (this.BankIban != null &&
                    this.BankIban.Equals(input.BankIban))
                ) && 
                (
                    this.BankBeneficiary == input.BankBeneficiary ||
                    (this.BankBeneficiary != null &&
                    this.BankBeneficiary.Equals(input.BankBeneficiary))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    this.InvoiceDate.Equals(input.InvoiceDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VatKind.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalDocumentType.GetHashCode();
                if (this.OdNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OdNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OdDate.GetHashCode();
                if (this.Cig != null)
                {
                    hashCode = (hashCode * 59) + this.Cig.GetHashCode();
                }
                if (this.Cup != null)
                {
                    hashCode = (hashCode * 59) + this.Cup.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.BankName != null)
                {
                    hashCode = (hashCode * 59) + this.BankName.GetHashCode();
                }
                if (this.BankIban != null)
                {
                    hashCode = (hashCode * 59) + this.BankIban.GetHashCode();
                }
                if (this.BankBeneficiary != null)
                {
                    hashCode = (hashCode * 59) + this.BankBeneficiary.GetHashCode();
                }
                if (this.InvoiceNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InvoiceNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InvoiceDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentEiData" />
    /// </summary>
    public class IssuedDocumentEiDataJsonConverter : JsonConverter<IssuedDocumentEiData>
    {
        /// <summary>
        /// The format to use to serialize OdDate
        /// </summary>
        public static string OdDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize InvoiceDate
        /// </summary>
        public static string InvoiceDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentEiData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentEiData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<VatKind?> vatKind = default;
            Option<OriginalDocumentType?> originalDocumentType = default;
            Option<string?> odNumber = default;
            Option<DateOnly?> odDate = default;
            Option<string?> cig = default;
            Option<string?> cup = default;
            Option<string?> paymentMethod = default;
            Option<string?> bankName = default;
            Option<string?> bankIban = default;
            Option<string?> bankBeneficiary = default;
            Option<string?> invoiceNumber = default;
            Option<DateOnly?> invoiceDate = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "vat_kind":
                            string? vatKindRawValue = utf8JsonReader.GetString();
                            if (vatKindRawValue != null)
                                vatKind = new Option<VatKind?>(VatKindValueConverter.FromStringOrDefault(vatKindRawValue));
                            break;
                        case "original_document_type":
                            string? originalDocumentTypeRawValue = utf8JsonReader.GetString();
                            if (originalDocumentTypeRawValue != null)
                                originalDocumentType = new Option<OriginalDocumentType?>(OriginalDocumentTypeValueConverter.FromStringOrDefault(originalDocumentTypeRawValue));
                            break;
                        case "od_number":
                            odNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "od_date":
                            odDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cig":
                            cig = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cup":
                            cup = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "payment_method":
                            paymentMethod = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bank_name":
                            bankName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bank_iban":
                            bankIban = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "bank_beneficiary":
                            bankBeneficiary = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "invoice_number":
                            invoiceNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "invoice_date":
                            invoiceDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentEiData(vatKind, originalDocumentType, odNumber, odDate, cig, cup, paymentMethod, bankName, bankIban, bankBeneficiary, invoiceNumber, invoiceDate);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentEiData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentEiData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentEiData issuedDocumentEiData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentEiData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentEiData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentEiData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentEiData issuedDocumentEiData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentEiData.VatKindOption.IsSet)
                if (issuedDocumentEiData.VatKindOption!.Value != null)
                {
                    var vatKindRawValue = VatKindValueConverter.ToJsonValue(issuedDocumentEiData.VatKindOption.Value!.Value);
                    writer.WriteString("vat_kind", vatKindRawValue);
                }
                else
                    writer.WriteNull("vat_kind");
            if (issuedDocumentEiData.OriginalDocumentTypeOption.IsSet)
                if (issuedDocumentEiData.OriginalDocumentTypeOption!.Value != null)
                {
                    var originalDocumentTypeRawValue = OriginalDocumentTypeValueConverter.ToJsonValue(issuedDocumentEiData.OriginalDocumentTypeOption.Value!.Value);
                    writer.WriteString("original_document_type", originalDocumentTypeRawValue);
                }
                else
                    writer.WriteNull("original_document_type");
            if (issuedDocumentEiData.OdNumberOption.IsSet)
                if (issuedDocumentEiData.OdNumberOption.Value != null)
                    writer.WriteString("od_number", issuedDocumentEiData.OdNumber);
                else
                    writer.WriteNull("od_number");

            if (issuedDocumentEiData.OdDateOption.IsSet)
                if (issuedDocumentEiData.OdDateOption.Value != null)
                    writer.WriteString("od_date", issuedDocumentEiData.OdDateOption.Value!.Value.ToString(OdDateFormat));
                else
                    writer.WriteNull("od_date");

            if (issuedDocumentEiData.CigOption.IsSet)
                if (issuedDocumentEiData.CigOption.Value != null)
                    writer.WriteString("cig", issuedDocumentEiData.Cig);
                else
                    writer.WriteNull("cig");

            if (issuedDocumentEiData.CupOption.IsSet)
                if (issuedDocumentEiData.CupOption.Value != null)
                    writer.WriteString("cup", issuedDocumentEiData.Cup);
                else
                    writer.WriteNull("cup");

            if (issuedDocumentEiData.PaymentMethodOption.IsSet)
                if (issuedDocumentEiData.PaymentMethodOption.Value != null)
                    writer.WriteString("payment_method", issuedDocumentEiData.PaymentMethod);
                else
                    writer.WriteNull("payment_method");

            if (issuedDocumentEiData.BankNameOption.IsSet)
                if (issuedDocumentEiData.BankNameOption.Value != null)
                    writer.WriteString("bank_name", issuedDocumentEiData.BankName);
                else
                    writer.WriteNull("bank_name");

            if (issuedDocumentEiData.BankIbanOption.IsSet)
                if (issuedDocumentEiData.BankIbanOption.Value != null)
                    writer.WriteString("bank_iban", issuedDocumentEiData.BankIban);
                else
                    writer.WriteNull("bank_iban");

            if (issuedDocumentEiData.BankBeneficiaryOption.IsSet)
                if (issuedDocumentEiData.BankBeneficiaryOption.Value != null)
                    writer.WriteString("bank_beneficiary", issuedDocumentEiData.BankBeneficiary);
                else
                    writer.WriteNull("bank_beneficiary");

            if (issuedDocumentEiData.InvoiceNumberOption.IsSet)
                if (issuedDocumentEiData.InvoiceNumberOption.Value != null)
                    writer.WriteString("invoice_number", issuedDocumentEiData.InvoiceNumber);
                else
                    writer.WriteNull("invoice_number");

            if (issuedDocumentEiData.InvoiceDateOption.IsSet)
                if (issuedDocumentEiData.InvoiceDateOption.Value != null)
                    writer.WriteString("invoice_date", issuedDocumentEiData.InvoiceDateOption.Value!.Value.ToString(InvoiceDateFormat));
                else
                    writer.WriteNull("invoice_date");
        }
    }
}
