// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Price list prices type
    /// </summary>
    /// <value>Price list prices type</value>
    public enum PriceListPricesType
    {
        /// <summary>
        /// Enum Net for value: net
        /// </summary>
        Net = 1,

        /// <summary>
        /// Enum Gross for value: gross
        /// </summary>
        Gross = 2
    }

    /// <summary>
    /// Converts <see cref="PriceListPricesType"/> to and from the JSON value
    /// </summary>
    public static class PriceListPricesTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PriceListPricesType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PriceListPricesType FromString(string value)
        {
            if (value.Equals("net"))
                return PriceListPricesType.Net;

            if (value.Equals("gross"))
                return PriceListPricesType.Gross;

            throw new NotImplementedException($"Could not convert value to type PriceListPricesType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PriceListPricesType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PriceListPricesType? FromStringOrDefault(string value)
        {
            if (value.Equals("net"))
                return PriceListPricesType.Net;

            if (value.Equals("gross"))
                return PriceListPricesType.Gross;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PriceListPricesType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PriceListPricesType value)
        {
            if (value == PriceListPricesType.Net)
                return "net";

            if (value == PriceListPricesType.Gross)
                return "gross";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PriceListPricesType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PriceListPricesTypeJsonConverter : JsonConverter<PriceListPricesType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PriceListPricesType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PriceListPricesType? result = rawValue == null
                ? null
                : PriceListPricesTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PriceListPricesType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceListPricesType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PriceListPricesType priceListPricesType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PriceListPricesTypeValueConverter.ToJsonValue(priceListPricesType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PriceListPricesType"/>
    /// </summary>
    public class PriceListPricesTypeNullableJsonConverter : JsonConverter<PriceListPricesType?>
    {
        /// <summary>
        /// Returns a PriceListPricesType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PriceListPricesType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PriceListPricesType? result = rawValue == null
                ? null
                : PriceListPricesTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PriceListPricesType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceListPricesType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PriceListPricesType? priceListPricesType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(priceListPricesType.HasValue ? PriceListPricesTypeValueConverter.ToJsonValue(priceListPricesType.Value).ToString() : "null");
        }
    }
}
