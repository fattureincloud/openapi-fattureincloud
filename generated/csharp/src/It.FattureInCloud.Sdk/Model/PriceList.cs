// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// PriceList
    /// </summary>
    [DataContract(Name = "PriceList")]
    public partial class PriceList : IEquatable<PriceList>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PricesType
        /// </summary>

        [DataMember(Name = "prices_type", EmitDefaultValue = false)]
        public PriceListPricesType? PricesType
        {
            get{ return _PricesType;}
            set
            {
                _PricesType = value;
                _flagPricesType = true;
            }
        }
        private PriceListPricesType? _PricesType;
        private bool _flagPricesType;

        /// <summary>
        /// Returns false as PricesType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePricesType()
        {
            return _flagPricesType;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public PriceListType? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private PriceListType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceList" /> class.
        /// </summary>
        /// <param name="id">Price list id.</param>
        /// <param name="name">Price list name.</param>
        /// <param name="pricesType">pricesType.</param>
        /// <param name="isDefault">This entity is default.</param>
        /// <param name="validFrom">Price list validity start date.</param>
        /// <param name="validTo">Price list validity end date.</param>
        /// <param name="type">type.</param>
        public PriceList(string id = default, string name = default, PriceListPricesType? pricesType = default, bool isDefault = default, string validFrom = default, string validTo = default, PriceListType? type = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._PricesType = pricesType;
            if (this.PricesType != null)
            {
                this._flagPricesType = true;
            }
            this._IsDefault = isDefault;
            if (this.IsDefault != null)
            {
                this._flagIsDefault = true;
            }
            this._ValidFrom = validFrom;
            if (this.ValidFrom != null)
            {
                this._flagValidFrom = true;
            }
            this._ValidTo = validTo;
            if (this.ValidTo != null)
            {
                this._flagValidTo = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
        }

        /// <summary>
        /// Price list id
        /// </summary>
        /// <value>Price list id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Price list name
        /// </summary>
        /// <value>Price list name</value>
        /*
        <example>123</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// This entity is default
        /// </summary>
        /// <value>This entity is default</value>
        [DataMember(Name = "is_default", EmitDefaultValue = true)]
        public bool IsDefault
        {
            get{ return _IsDefault;}
            set
            {
                _IsDefault = value;
                _flagIsDefault = true;
            }
        }
        private bool _IsDefault;
        private bool _flagIsDefault;

        /// <summary>
        /// Returns false as IsDefault should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDefault()
        {
            return _flagIsDefault;
        }
        /// <summary>
        /// Price list validity start date
        /// </summary>
        /// <value>Price list validity start date</value>
        [DataMember(Name = "valid_from", EmitDefaultValue = true)]
        public string ValidFrom
        {
            get{ return _ValidFrom;}
            set
            {
                _ValidFrom = value;
                _flagValidFrom = true;
            }
        }
        private string _ValidFrom;
        private bool _flagValidFrom;

        /// <summary>
        /// Returns false as ValidFrom should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidFrom()
        {
            return _flagValidFrom;
        }
        /// <summary>
        /// Price list validity end date
        /// </summary>
        /// <value>Price list validity end date</value>
        [DataMember(Name = "valid_to", EmitDefaultValue = true)]
        public string ValidTo
        {
            get{ return _ValidTo;}
            set
            {
                _ValidTo = value;
                _flagValidTo = true;
            }
        }
        private string _ValidTo;
        private bool _flagValidTo;

        /// <summary>
        /// Returns false as ValidTo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidTo()
        {
            return _flagValidTo;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PriceList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PricesType: ").Append(PricesType).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PriceList);
        }

        /// <summary>
        /// Returns true if PriceList instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceList input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PricesType == input.PricesType ||
                    this.PricesType.Equals(input.PricesType)
                ) && 
                (
                    this.IsDefault == input.IsDefault ||
                    this.IsDefault.Equals(input.IsDefault)
                ) && 
                (
                    this.ValidFrom == input.ValidFrom ||
                    (this.ValidFrom != null &&
                    this.ValidFrom.Equals(input.ValidFrom))
                ) && 
                (
                    this.ValidTo == input.ValidTo ||
                    (this.ValidTo != null &&
                    this.ValidTo.Equals(input.ValidTo))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PricesType.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDefault.GetHashCode();
                if (this.ValidFrom != null)
                {
                    hashCode = (hashCode * 59) + this.ValidFrom.GetHashCode();
                }
                if (this.ValidTo != null)
                {
                    hashCode = (hashCode * 59) + this.ValidTo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="PriceList" />
    /// </summary>
    public class PriceListJsonConverter : JsonConverter<PriceList>
    {
        /// <summary>
        /// Deserializes json to <see cref="PriceList" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PriceList Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<PriceListPricesType?> pricesType = default;
            Option<bool?> isDefault = default;
            Option<string?> validFrom = default;
            Option<string?> validTo = default;
            Option<PriceListType?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "prices_type":
                            string? pricesTypeRawValue = utf8JsonReader.GetString();
                            if (pricesTypeRawValue != null)
                                pricesType = new Option<PriceListPricesType?>(PriceListPricesTypeValueConverter.FromStringOrDefault(pricesTypeRawValue));
                            break;
                        case "is_default":
                            isDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "valid_from":
                            validFrom = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "valid_to":
                            validTo = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PriceListType?>(PriceListTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (pricesType.IsSet && pricesType.Value == null)
                throw new ArgumentNullException(nameof(pricesType), "Property is not nullable for class PriceList.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PriceList.");

            return new PriceList(id, name, pricesType, isDefault, validFrom, validTo, type);
        }

        /// <summary>
        /// Serializes a <see cref="PriceList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PriceList priceList, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, priceList, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PriceList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="priceList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PriceList priceList, JsonSerializerOptions jsonSerializerOptions)
        {
            if (priceList.IdOption.IsSet)
                if (priceList.IdOption.Value != null)
                    writer.WriteString("id", priceList.Id);
                else
                    writer.WriteNull("id");

            if (priceList.NameOption.IsSet)
                if (priceList.NameOption.Value != null)
                    writer.WriteString("name", priceList.Name);
                else
                    writer.WriteNull("name");

            if (priceList.PricesTypeOption.IsSet)
            {
                var pricesTypeRawValue = PriceListPricesTypeValueConverter.ToJsonValue(priceList.PricesType!.Value);
                writer.WriteString("prices_type", pricesTypeRawValue);
            }
            if (priceList.IsDefaultOption.IsSet)
                if (priceList.IsDefaultOption.Value != null)
                    writer.WriteBoolean("is_default", priceList.IsDefaultOption.Value!.Value);
                else
                    writer.WriteNull("is_default");

            if (priceList.ValidFromOption.IsSet)
                if (priceList.ValidFromOption.Value != null)
                    writer.WriteString("valid_from", priceList.ValidFrom);
                else
                    writer.WriteNull("valid_from");

            if (priceList.ValidToOption.IsSet)
                if (priceList.ValidToOption.Value != null)
                    writer.WriteString("valid_to", priceList.ValidTo);
                else
                    writer.WriteNull("valid_to");

            if (priceList.TypeOption.IsSet)
            {
                var typeRawValue = PriceListTypeValueConverter.ToJsonValue(priceList.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
        }
    }
}
