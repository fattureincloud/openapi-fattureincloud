// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document type
    /// </summary>
    /// <value>Issued document type</value>
    public enum IssuedDocumentType
    {
        /// <summary>
        /// Enum Invoice for value: invoice
        /// </summary>
        Invoice = 1,

        /// <summary>
        /// Enum Quote for value: quote
        /// </summary>
        Quote = 2,

        /// <summary>
        /// Enum Proforma for value: proforma
        /// </summary>
        Proforma = 3,

        /// <summary>
        /// Enum Receipt for value: receipt
        /// </summary>
        Receipt = 4,

        /// <summary>
        /// Enum DeliveryNote for value: delivery_note
        /// </summary>
        DeliveryNote = 5,

        /// <summary>
        /// Enum CreditNote for value: credit_note
        /// </summary>
        CreditNote = 6,

        /// <summary>
        /// Enum Order for value: order
        /// </summary>
        Order = 7,

        /// <summary>
        /// Enum WorkReport for value: work_report
        /// </summary>
        WorkReport = 8,

        /// <summary>
        /// Enum SupplierOrder for value: supplier_order
        /// </summary>
        SupplierOrder = 9,

        /// <summary>
        /// Enum SelfOwnInvoice for value: self_own_invoice
        /// </summary>
        SelfOwnInvoice = 10,

        /// <summary>
        /// Enum SelfSupplierInvoice for value: self_supplier_invoice
        /// </summary>
        SelfSupplierInvoice = 11
    }

    /// <summary>
    /// Converts <see cref="IssuedDocumentType"/> to and from the JSON value
    /// </summary>
    public static class IssuedDocumentTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="IssuedDocumentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IssuedDocumentType FromString(string value)
        {
            if (value.Equals("invoice"))
                return IssuedDocumentType.Invoice;

            if (value.Equals("quote"))
                return IssuedDocumentType.Quote;

            if (value.Equals("proforma"))
                return IssuedDocumentType.Proforma;

            if (value.Equals("receipt"))
                return IssuedDocumentType.Receipt;

            if (value.Equals("delivery_note"))
                return IssuedDocumentType.DeliveryNote;

            if (value.Equals("credit_note"))
                return IssuedDocumentType.CreditNote;

            if (value.Equals("order"))
                return IssuedDocumentType.Order;

            if (value.Equals("work_report"))
                return IssuedDocumentType.WorkReport;

            if (value.Equals("supplier_order"))
                return IssuedDocumentType.SupplierOrder;

            if (value.Equals("self_own_invoice"))
                return IssuedDocumentType.SelfOwnInvoice;

            if (value.Equals("self_supplier_invoice"))
                return IssuedDocumentType.SelfSupplierInvoice;

            throw new NotImplementedException($"Could not convert value to type IssuedDocumentType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="IssuedDocumentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IssuedDocumentType? FromStringOrDefault(string value)
        {
            if (value.Equals("invoice"))
                return IssuedDocumentType.Invoice;

            if (value.Equals("quote"))
                return IssuedDocumentType.Quote;

            if (value.Equals("proforma"))
                return IssuedDocumentType.Proforma;

            if (value.Equals("receipt"))
                return IssuedDocumentType.Receipt;

            if (value.Equals("delivery_note"))
                return IssuedDocumentType.DeliveryNote;

            if (value.Equals("credit_note"))
                return IssuedDocumentType.CreditNote;

            if (value.Equals("order"))
                return IssuedDocumentType.Order;

            if (value.Equals("work_report"))
                return IssuedDocumentType.WorkReport;

            if (value.Equals("supplier_order"))
                return IssuedDocumentType.SupplierOrder;

            if (value.Equals("self_own_invoice"))
                return IssuedDocumentType.SelfOwnInvoice;

            if (value.Equals("self_supplier_invoice"))
                return IssuedDocumentType.SelfSupplierInvoice;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IssuedDocumentType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(IssuedDocumentType value)
        {
            if (value == IssuedDocumentType.Invoice)
                return "invoice";

            if (value == IssuedDocumentType.Quote)
                return "quote";

            if (value == IssuedDocumentType.Proforma)
                return "proforma";

            if (value == IssuedDocumentType.Receipt)
                return "receipt";

            if (value == IssuedDocumentType.DeliveryNote)
                return "delivery_note";

            if (value == IssuedDocumentType.CreditNote)
                return "credit_note";

            if (value == IssuedDocumentType.Order)
                return "order";

            if (value == IssuedDocumentType.WorkReport)
                return "work_report";

            if (value == IssuedDocumentType.SupplierOrder)
                return "supplier_order";

            if (value == IssuedDocumentType.SelfOwnInvoice)
                return "self_own_invoice";

            if (value == IssuedDocumentType.SelfSupplierInvoice)
                return "self_supplier_invoice";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class IssuedDocumentTypeJsonConverter : JsonConverter<IssuedDocumentType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IssuedDocumentType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IssuedDocumentType? result = rawValue == null
                ? null
                : IssuedDocumentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IssuedDocumentType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentType issuedDocumentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(IssuedDocumentTypeValueConverter.ToJsonValue(issuedDocumentType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentType"/>
    /// </summary>
    public class IssuedDocumentTypeNullableJsonConverter : JsonConverter<IssuedDocumentType?>
    {
        /// <summary>
        /// Returns a IssuedDocumentType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IssuedDocumentType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IssuedDocumentType? result = rawValue == null
                ? null
                : IssuedDocumentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IssuedDocumentType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentType? issuedDocumentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(issuedDocumentType.HasValue ? IssuedDocumentTypeValueConverter.ToJsonValue(issuedDocumentType.Value).ToString() : "null");
        }
    }
}
