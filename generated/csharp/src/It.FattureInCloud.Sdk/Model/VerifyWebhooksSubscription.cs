// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// VerifyWebhooksSubscription
    /// </summary>
    [DataContract(Name = "VerifyWebhooksSubscription")]
    public partial class VerifyWebhooksSubscription : IEquatable<VerifyWebhooksSubscription>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets VerificationMethod
        /// </summary>

        [DataMember(Name = "verification_method", EmitDefaultValue = false)]
        public WebhooksSubscriptionVerificationMethod? VerificationMethod
        {
            get{ return _VerificationMethod;}
            set
            {
                _VerificationMethod = value;
                _flagVerificationMethod = true;
            }
        }
        private WebhooksSubscriptionVerificationMethod? _VerificationMethod;
        private bool _flagVerificationMethod;

        /// <summary>
        /// Returns false as VerificationMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVerificationMethod()
        {
            return _flagVerificationMethod;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyWebhooksSubscription" /> class.
        /// </summary>
        /// <param name="id">Webhooks subscription id.</param>
        /// <param name="verificationMethod">verificationMethod.</param>
        public VerifyWebhooksSubscription(string id = default, WebhooksSubscriptionVerificationMethod? verificationMethod = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._VerificationMethod = verificationMethod;
            if (this.VerificationMethod != null)
            {
                this._flagVerificationMethod = true;
            }
        }

        /// <summary>
        /// Webhooks subscription id
        /// </summary>
        /// <value>Webhooks subscription id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyWebhooksSubscription {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VerificationMethod: ").Append(VerificationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyWebhooksSubscription);
        }

        /// <summary>
        /// Returns true if VerifyWebhooksSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyWebhooksSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyWebhooksSubscription input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VerificationMethod == input.VerificationMethod ||
                    this.VerificationMethod.Equals(input.VerificationMethod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VerificationMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="VerifyWebhooksSubscription" />
    /// </summary>
    public class VerifyWebhooksSubscriptionJsonConverter : JsonConverter<VerifyWebhooksSubscription>
    {
        /// <summary>
        /// Deserializes json to <see cref="VerifyWebhooksSubscription" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VerifyWebhooksSubscription Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<WebhooksSubscriptionVerificationMethod?> verificationMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "verification_method":
                            string? verificationMethodRawValue = utf8JsonReader.GetString();
                            if (verificationMethodRawValue != null)
                                verificationMethod = new Option<WebhooksSubscriptionVerificationMethod?>(WebhooksSubscriptionVerificationMethodValueConverter.FromStringOrDefault(verificationMethodRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (verificationMethod.IsSet && verificationMethod.Value == null)
                throw new ArgumentNullException(nameof(verificationMethod), "Property is not nullable for class VerifyWebhooksSubscription.");

            return new VerifyWebhooksSubscription(id, verificationMethod);
        }

        /// <summary>
        /// Serializes a <see cref="VerifyWebhooksSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyWebhooksSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VerifyWebhooksSubscription verifyWebhooksSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, verifyWebhooksSubscription, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VerifyWebhooksSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyWebhooksSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VerifyWebhooksSubscription verifyWebhooksSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            if (verifyWebhooksSubscription.IdOption.IsSet)
                if (verifyWebhooksSubscription.IdOption.Value != null)
                    writer.WriteString("id", verifyWebhooksSubscription.Id);
                else
                    writer.WriteNull("id");

            if (verifyWebhooksSubscription.VerificationMethodOption.IsSet)
            {
                var verificationMethodRawValue = WebhooksSubscriptionVerificationMethodValueConverter.ToJsonValue(verifyWebhooksSubscription.VerificationMethod!.Value);
                writer.WriteString("verification_method", verificationMethodRawValue);
            }
        }
    }
}
