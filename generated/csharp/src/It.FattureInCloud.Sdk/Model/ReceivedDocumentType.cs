// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Received document type
    /// </summary>
    /// <value>Received document type</value>
    public enum ReceivedDocumentType
    {
        /// <summary>
        /// Enum Expense for value: expense
        /// </summary>
        Expense = 1,

        /// <summary>
        /// Enum PassiveCreditNote for value: passive_credit_note
        /// </summary>
        PassiveCreditNote = 2,

        /// <summary>
        /// Enum PassiveDeliveryNote for value: passive_delivery_note
        /// </summary>
        PassiveDeliveryNote = 3,

        /// <summary>
        /// Enum SelfInvoice for value: self_invoice
        /// </summary>
        SelfInvoice = 4
    }

    /// <summary>
    /// Converts <see cref="ReceivedDocumentType"/> to and from the JSON value
    /// </summary>
    public static class ReceivedDocumentTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ReceivedDocumentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReceivedDocumentType FromString(string value)
        {
            if (value.Equals("expense"))
                return ReceivedDocumentType.Expense;

            if (value.Equals("passive_credit_note"))
                return ReceivedDocumentType.PassiveCreditNote;

            if (value.Equals("passive_delivery_note"))
                return ReceivedDocumentType.PassiveDeliveryNote;

            if (value.Equals("self_invoice"))
                return ReceivedDocumentType.SelfInvoice;

            throw new NotImplementedException($"Could not convert value to type ReceivedDocumentType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ReceivedDocumentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ReceivedDocumentType? FromStringOrDefault(string value)
        {
            if (value.Equals("expense"))
                return ReceivedDocumentType.Expense;

            if (value.Equals("passive_credit_note"))
                return ReceivedDocumentType.PassiveCreditNote;

            if (value.Equals("passive_delivery_note"))
                return ReceivedDocumentType.PassiveDeliveryNote;

            if (value.Equals("self_invoice"))
                return ReceivedDocumentType.SelfInvoice;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ReceivedDocumentType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ReceivedDocumentType value)
        {
            if (value == ReceivedDocumentType.Expense)
                return "expense";

            if (value == ReceivedDocumentType.PassiveCreditNote)
                return "passive_credit_note";

            if (value == ReceivedDocumentType.PassiveDeliveryNote)
                return "passive_delivery_note";

            if (value == ReceivedDocumentType.SelfInvoice)
                return "self_invoice";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ReceivedDocumentTypeJsonConverter : JsonConverter<ReceivedDocumentType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ReceivedDocumentType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ReceivedDocumentType? result = rawValue == null
                ? null
                : ReceivedDocumentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ReceivedDocumentType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentType receivedDocumentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ReceivedDocumentTypeValueConverter.ToJsonValue(receivedDocumentType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentType"/>
    /// </summary>
    public class ReceivedDocumentTypeNullableJsonConverter : JsonConverter<ReceivedDocumentType?>
    {
        /// <summary>
        /// Returns a ReceivedDocumentType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ReceivedDocumentType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ReceivedDocumentType? result = rawValue == null
                ? null
                : ReceivedDocumentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ReceivedDocumentType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentType? receivedDocumentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(receivedDocumentType.HasValue ? ReceivedDocumentTypeValueConverter.ToJsonValue(receivedDocumentType.Value).ToString() : "null");
        }
    }
}
