// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentItemsListItem
    /// </summary>
    [DataContract(Name = "IssuedDocumentItemsListItem")]
    public partial class IssuedDocumentItemsListItem : IEquatable<IssuedDocumentItemsListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentItemsListItem" /> class.
        /// </summary>
        /// <param name="id">Issued document item id.</param>
        /// <param name="productId">Issued document item product id.</param>
        /// <param name="code">Issued document item product code.</param>
        /// <param name="name">Issued document item product name.</param>
        /// <param name="category">Issued document item product category.</param>
        /// <param name="description">Issued document product description.</param>
        /// <param name="qty">Issued document item quantity.</param>
        /// <param name="measure">Issued document item measure.</param>
        /// <param name="netPrice">Issued document item net price.</param>
        /// <param name="grossPrice">Issued document item gross price.</param>
        /// <param name="vat">vat.</param>
        /// <param name="notTaxable">Issued document item is not taxable.</param>
        /// <param name="applyWithholdingTaxes">Issued document item apply withholding taxes, rivalsa and cassa.</param>
        /// <param name="discount">Issued document item discount percentual value.</param>
        /// <param name="discountHighlight">Issued document item highlight discount.</param>
        /// <param name="inDn">Issued document item add in delivery note.</param>
        /// <param name="stock">Issued document item move stock.</param>
        /// <param name="eiRaw">Issued document advanced raw attributes for e-invoices.</param>
        public IssuedDocumentItemsListItem(int id = default, int productId = default, string code = default, string name = default, string category = default, string description = default, decimal qty = default, string measure = default, decimal netPrice = default, decimal grossPrice = default, VatType vat = default, bool notTaxable = default, bool applyWithholdingTaxes = default, decimal discount = default, bool discountHighlight = default, bool inDn = default, bool stock = default, Object eiRaw = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._ProductId = productId;
            if (this.ProductId != null)
            {
                this._flagProductId = true;
            }
            this._Code = code;
            if (this.Code != null)
            {
                this._flagCode = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Qty = qty;
            if (this.Qty != null)
            {
                this._flagQty = true;
            }
            this._Measure = measure;
            if (this.Measure != null)
            {
                this._flagMeasure = true;
            }
            this._NetPrice = netPrice;
            if (this.NetPrice != null)
            {
                this._flagNetPrice = true;
            }
            this._GrossPrice = grossPrice;
            if (this.GrossPrice != null)
            {
                this._flagGrossPrice = true;
            }
            this._Vat = vat;
            if (this.Vat != null)
            {
                this._flagVat = true;
            }
            this._NotTaxable = notTaxable;
            if (this.NotTaxable != null)
            {
                this._flagNotTaxable = true;
            }
            this._ApplyWithholdingTaxes = applyWithholdingTaxes;
            if (this.ApplyWithholdingTaxes != null)
            {
                this._flagApplyWithholdingTaxes = true;
            }
            this._Discount = discount;
            if (this.Discount != null)
            {
                this._flagDiscount = true;
            }
            this._DiscountHighlight = discountHighlight;
            if (this.DiscountHighlight != null)
            {
                this._flagDiscountHighlight = true;
            }
            this._InDn = inDn;
            if (this.InDn != null)
            {
                this._flagInDn = true;
            }
            this._Stock = stock;
            if (this.Stock != null)
            {
                this._flagStock = true;
            }
            this._EiRaw = eiRaw;
            if (this.EiRaw != null)
            {
                this._flagEiRaw = true;
            }
        }

        /// <summary>
        /// Issued document item id
        /// </summary>
        /// <value>Issued document item id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Issued document item product id
        /// </summary>
        /// <value>Issued document item product id</value>
        /*
        <example>1234</example>
        */
        [DataMember(Name = "product_id", EmitDefaultValue = true)]
        public int ProductId
        {
            get{ return _ProductId;}
            set
            {
                _ProductId = value;
                _flagProductId = true;
            }
        }
        private int _ProductId;
        private bool _flagProductId;

        /// <summary>
        /// Returns false as ProductId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductId()
        {
            return _flagProductId;
        }
        /// <summary>
        /// Issued document item product code
        /// </summary>
        /// <value>Issued document item product code</value>
        /*
        <example>239874892374982</example>
        */
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get{ return _Code;}
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }
        private string _Code;
        private bool _flagCode;

        /// <summary>
        /// Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }
        /// <summary>
        /// Issued document item product name
        /// </summary>
        /// <value>Issued document item product name</value>
        /*
        <example>Water bottle</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Issued document item product category
        /// </summary>
        /// <value>Issued document item product category</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get{ return _Category;}
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// Issued document product description
        /// </summary>
        /// <value>Issued document product description</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Issued document item quantity
        /// </summary>
        /// <value>Issued document item quantity</value>
        [DataMember(Name = "qty", EmitDefaultValue = true)]
        public decimal Qty
        {
            get{ return _Qty;}
            set
            {
                _Qty = value;
                _flagQty = true;
            }
        }
        private decimal _Qty;
        private bool _flagQty;

        /// <summary>
        /// Returns false as Qty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQty()
        {
            return _flagQty;
        }
        /// <summary>
        /// Issued document item measure
        /// </summary>
        /// <value>Issued document item measure</value>
        [DataMember(Name = "measure", EmitDefaultValue = true)]
        public string Measure
        {
            get{ return _Measure;}
            set
            {
                _Measure = value;
                _flagMeasure = true;
            }
        }
        private string _Measure;
        private bool _flagMeasure;

        /// <summary>
        /// Returns false as Measure should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMeasure()
        {
            return _flagMeasure;
        }
        /// <summary>
        /// Issued document item net price
        /// </summary>
        /// <value>Issued document item net price</value>
        /*
        <example>1.23</example>
        */
        [DataMember(Name = "net_price", EmitDefaultValue = true)]
        public decimal NetPrice
        {
            get{ return _NetPrice;}
            set
            {
                _NetPrice = value;
                _flagNetPrice = true;
            }
        }
        private decimal _NetPrice;
        private bool _flagNetPrice;

        /// <summary>
        /// Returns false as NetPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetPrice()
        {
            return _flagNetPrice;
        }
        /// <summary>
        /// Issued document item gross price
        /// </summary>
        /// <value>Issued document item gross price</value>
        /*
        <example>1.45</example>
        */
        [DataMember(Name = "gross_price", EmitDefaultValue = true)]
        public decimal GrossPrice
        {
            get{ return _GrossPrice;}
            set
            {
                _GrossPrice = value;
                _flagGrossPrice = true;
            }
        }
        private decimal _GrossPrice;
        private bool _flagGrossPrice;

        /// <summary>
        /// Returns false as GrossPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGrossPrice()
        {
            return _flagGrossPrice;
        }
        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [DataMember(Name = "vat", EmitDefaultValue = true)]
        public VatType Vat
        {
            get{ return _Vat;}
            set
            {
                _Vat = value;
                _flagVat = true;
            }
        }
        private VatType _Vat;
        private bool _flagVat;

        /// <summary>
        /// Returns false as Vat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVat()
        {
            return _flagVat;
        }
        /// <summary>
        /// Issued document item is not taxable
        /// </summary>
        /// <value>Issued document item is not taxable</value>
        [DataMember(Name = "not_taxable", EmitDefaultValue = true)]
        public bool NotTaxable
        {
            get{ return _NotTaxable;}
            set
            {
                _NotTaxable = value;
                _flagNotTaxable = true;
            }
        }
        private bool _NotTaxable;
        private bool _flagNotTaxable;

        /// <summary>
        /// Returns false as NotTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotTaxable()
        {
            return _flagNotTaxable;
        }
        /// <summary>
        /// Issued document item apply withholding taxes, rivalsa and cassa
        /// </summary>
        /// <value>Issued document item apply withholding taxes, rivalsa and cassa</value>
        [DataMember(Name = "apply_withholding_taxes", EmitDefaultValue = true)]
        public bool ApplyWithholdingTaxes
        {
            get{ return _ApplyWithholdingTaxes;}
            set
            {
                _ApplyWithholdingTaxes = value;
                _flagApplyWithholdingTaxes = true;
            }
        }
        private bool _ApplyWithholdingTaxes;
        private bool _flagApplyWithholdingTaxes;

        /// <summary>
        /// Returns false as ApplyWithholdingTaxes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplyWithholdingTaxes()
        {
            return _flagApplyWithholdingTaxes;
        }
        /// <summary>
        /// Issued document item discount percentual value
        /// </summary>
        /// <value>Issued document item discount percentual value</value>
        [DataMember(Name = "discount", EmitDefaultValue = true)]
        public decimal Discount
        {
            get{ return _Discount;}
            set
            {
                _Discount = value;
                _flagDiscount = true;
            }
        }
        private decimal _Discount;
        private bool _flagDiscount;

        /// <summary>
        /// Returns false as Discount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscount()
        {
            return _flagDiscount;
        }
        /// <summary>
        /// Issued document item highlight discount
        /// </summary>
        /// <value>Issued document item highlight discount</value>
        [DataMember(Name = "discount_highlight", EmitDefaultValue = true)]
        public bool DiscountHighlight
        {
            get{ return _DiscountHighlight;}
            set
            {
                _DiscountHighlight = value;
                _flagDiscountHighlight = true;
            }
        }
        private bool _DiscountHighlight;
        private bool _flagDiscountHighlight;

        /// <summary>
        /// Returns false as DiscountHighlight should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscountHighlight()
        {
            return _flagDiscountHighlight;
        }
        /// <summary>
        /// Issued document item add in delivery note
        /// </summary>
        /// <value>Issued document item add in delivery note</value>
        [DataMember(Name = "in_dn", EmitDefaultValue = true)]
        public bool InDn
        {
            get{ return _InDn;}
            set
            {
                _InDn = value;
                _flagInDn = true;
            }
        }
        private bool _InDn;
        private bool _flagInDn;

        /// <summary>
        /// Returns false as InDn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInDn()
        {
            return _flagInDn;
        }
        /// <summary>
        /// Issued document item move stock
        /// </summary>
        /// <value>Issued document item move stock</value>
        [DataMember(Name = "stock", EmitDefaultValue = true)]
        public bool Stock
        {
            get{ return _Stock;}
            set
            {
                _Stock = value;
                _flagStock = true;
            }
        }
        private bool _Stock;
        private bool _flagStock;

        /// <summary>
        /// Returns false as Stock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStock()
        {
            return _flagStock;
        }
        /// <summary>
        /// Issued document advanced raw attributes for e-invoices
        /// </summary>
        /// <value>Issued document advanced raw attributes for e-invoices</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw
        {
            get{ return _EiRaw;}
            set
            {
                _EiRaw = value;
                _flagEiRaw = true;
            }
        }
        private Object _EiRaw;
        private bool _flagEiRaw;

        /// <summary>
        /// Returns false as EiRaw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiRaw()
        {
            return _flagEiRaw;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentItemsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  GrossPrice: ").Append(GrossPrice).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  NotTaxable: ").Append(NotTaxable).Append("\n");
            sb.Append("  ApplyWithholdingTaxes: ").Append(ApplyWithholdingTaxes).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  DiscountHighlight: ").Append(DiscountHighlight).Append("\n");
            sb.Append("  InDn: ").Append(InDn).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentItemsListItem);
        }

        /// <summary>
        /// Returns true if IssuedDocumentItemsListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentItemsListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentItemsListItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    this.ProductId.Equals(input.ProductId)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Qty == input.Qty ||
                    this.Qty.Equals(input.Qty)
                ) && 
                (
                    this.Measure == input.Measure ||
                    (this.Measure != null &&
                    this.Measure.Equals(input.Measure))
                ) && 
                (
                    this.NetPrice == input.NetPrice ||
                    this.NetPrice.Equals(input.NetPrice)
                ) && 
                (
                    this.GrossPrice == input.GrossPrice ||
                    this.GrossPrice.Equals(input.GrossPrice)
                ) && 
                (
                    this.Vat == input.Vat ||
                    (this.Vat != null &&
                    this.Vat.Equals(input.Vat))
                ) && 
                (
                    this.NotTaxable == input.NotTaxable ||
                    this.NotTaxable.Equals(input.NotTaxable)
                ) && 
                (
                    this.ApplyWithholdingTaxes == input.ApplyWithholdingTaxes ||
                    this.ApplyWithholdingTaxes.Equals(input.ApplyWithholdingTaxes)
                ) && 
                (
                    this.Discount == input.Discount ||
                    this.Discount.Equals(input.Discount)
                ) && 
                (
                    this.DiscountHighlight == input.DiscountHighlight ||
                    this.DiscountHighlight.Equals(input.DiscountHighlight)
                ) && 
                (
                    this.InDn == input.InDn ||
                    this.InDn.Equals(input.InDn)
                ) && 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                ) && 
                (
                    this.EiRaw == input.EiRaw ||
                    (this.EiRaw != null &&
                    this.EiRaw.Equals(input.EiRaw))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Qty.GetHashCode();
                if (this.Measure != null)
                {
                    hashCode = (hashCode * 59) + this.Measure.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NetPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.GrossPrice.GetHashCode();
                if (this.Vat != null)
                {
                    hashCode = (hashCode * 59) + this.Vat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.ApplyWithholdingTaxes.GetHashCode();
                hashCode = (hashCode * 59) + this.Discount.GetHashCode();
                hashCode = (hashCode * 59) + this.DiscountHighlight.GetHashCode();
                hashCode = (hashCode * 59) + this.InDn.GetHashCode();
                hashCode = (hashCode * 59) + this.Stock.GetHashCode();
                if (this.EiRaw != null)
                {
                    hashCode = (hashCode * 59) + this.EiRaw.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentItemsListItem" />
    /// </summary>
    public class IssuedDocumentItemsListItemJsonConverter : JsonConverter<IssuedDocumentItemsListItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentItemsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentItemsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> productId = default;
            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> category = default;
            Option<string?> description = default;
            Option<decimal?> qty = default;
            Option<string?> measure = default;
            Option<decimal?> netPrice = default;
            Option<decimal?> grossPrice = default;
            Option<VatType?> vat = default;
            Option<bool?> notTaxable = default;
            Option<bool?> applyWithholdingTaxes = default;
            Option<decimal?> discount = default;
            Option<bool?> discountHighlight = default;
            Option<bool?> inDn = default;
            Option<bool?> stock = default;
            Option<Object?> eiRaw = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "product_id":
                            productId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "qty":
                            qty = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "measure":
                            measure = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "net_price":
                            netPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "gross_price":
                            grossPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "vat":
                            vat = new Option<VatType?>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "not_taxable":
                            notTaxable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "apply_withholding_taxes":
                            applyWithholdingTaxes = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "discount":
                            discount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "discount_highlight":
                            discountHighlight = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "in_dn":
                            inDn = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stock":
                            stock = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_raw":
                            eiRaw = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentItemsListItem(id, productId, code, name, category, description, qty, measure, netPrice, grossPrice, vat, notTaxable, applyWithholdingTaxes, discount, discountHighlight, inDn, stock, eiRaw);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentItemsListItem issuedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentItemsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentItemsListItem issuedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentItemsListItem.IdOption.IsSet)
                if (issuedDocumentItemsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", issuedDocumentItemsListItem.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (issuedDocumentItemsListItem.ProductIdOption.IsSet)
                if (issuedDocumentItemsListItem.ProductIdOption.Value != null)
                    writer.WriteNumber("product_id", issuedDocumentItemsListItem.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("product_id");

            if (issuedDocumentItemsListItem.CodeOption.IsSet)
                if (issuedDocumentItemsListItem.CodeOption.Value != null)
                    writer.WriteString("code", issuedDocumentItemsListItem.Code);
                else
                    writer.WriteNull("code");

            if (issuedDocumentItemsListItem.NameOption.IsSet)
                if (issuedDocumentItemsListItem.NameOption.Value != null)
                    writer.WriteString("name", issuedDocumentItemsListItem.Name);
                else
                    writer.WriteNull("name");

            if (issuedDocumentItemsListItem.CategoryOption.IsSet)
                if (issuedDocumentItemsListItem.CategoryOption.Value != null)
                    writer.WriteString("category", issuedDocumentItemsListItem.Category);
                else
                    writer.WriteNull("category");

            if (issuedDocumentItemsListItem.DescriptionOption.IsSet)
                if (issuedDocumentItemsListItem.DescriptionOption.Value != null)
                    writer.WriteString("description", issuedDocumentItemsListItem.Description);
                else
                    writer.WriteNull("description");

            if (issuedDocumentItemsListItem.QtyOption.IsSet)
                if (issuedDocumentItemsListItem.QtyOption.Value != null)
                    writer.WriteNumber("qty", issuedDocumentItemsListItem.QtyOption.Value!.Value);
                else
                    writer.WriteNull("qty");

            if (issuedDocumentItemsListItem.MeasureOption.IsSet)
                if (issuedDocumentItemsListItem.MeasureOption.Value != null)
                    writer.WriteString("measure", issuedDocumentItemsListItem.Measure);
                else
                    writer.WriteNull("measure");

            if (issuedDocumentItemsListItem.NetPriceOption.IsSet)
                if (issuedDocumentItemsListItem.NetPriceOption.Value != null)
                    writer.WriteNumber("net_price", issuedDocumentItemsListItem.NetPriceOption.Value!.Value);
                else
                    writer.WriteNull("net_price");

            if (issuedDocumentItemsListItem.GrossPriceOption.IsSet)
                if (issuedDocumentItemsListItem.GrossPriceOption.Value != null)
                    writer.WriteNumber("gross_price", issuedDocumentItemsListItem.GrossPriceOption.Value!.Value);
                else
                    writer.WriteNull("gross_price");

            if (issuedDocumentItemsListItem.VatOption.IsSet)
                if (issuedDocumentItemsListItem.VatOption.Value != null)
                {
                    writer.WritePropertyName("vat");
                    JsonSerializer.Serialize(writer, issuedDocumentItemsListItem.Vat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat");
            if (issuedDocumentItemsListItem.NotTaxableOption.IsSet)
                if (issuedDocumentItemsListItem.NotTaxableOption.Value != null)
                    writer.WriteBoolean("not_taxable", issuedDocumentItemsListItem.NotTaxableOption.Value!.Value);
                else
                    writer.WriteNull("not_taxable");

            if (issuedDocumentItemsListItem.ApplyWithholdingTaxesOption.IsSet)
                if (issuedDocumentItemsListItem.ApplyWithholdingTaxesOption.Value != null)
                    writer.WriteBoolean("apply_withholding_taxes", issuedDocumentItemsListItem.ApplyWithholdingTaxesOption.Value!.Value);
                else
                    writer.WriteNull("apply_withholding_taxes");

            if (issuedDocumentItemsListItem.DiscountOption.IsSet)
                if (issuedDocumentItemsListItem.DiscountOption.Value != null)
                    writer.WriteNumber("discount", issuedDocumentItemsListItem.DiscountOption.Value!.Value);
                else
                    writer.WriteNull("discount");

            if (issuedDocumentItemsListItem.DiscountHighlightOption.IsSet)
                if (issuedDocumentItemsListItem.DiscountHighlightOption.Value != null)
                    writer.WriteBoolean("discount_highlight", issuedDocumentItemsListItem.DiscountHighlightOption.Value!.Value);
                else
                    writer.WriteNull("discount_highlight");

            if (issuedDocumentItemsListItem.InDnOption.IsSet)
                if (issuedDocumentItemsListItem.InDnOption.Value != null)
                    writer.WriteBoolean("in_dn", issuedDocumentItemsListItem.InDnOption.Value!.Value);
                else
                    writer.WriteNull("in_dn");

            if (issuedDocumentItemsListItem.StockOption.IsSet)
                if (issuedDocumentItemsListItem.StockOption.Value != null)
                    writer.WriteBoolean("stock", issuedDocumentItemsListItem.StockOption.Value!.Value);
                else
                    writer.WriteNull("stock");

            if (issuedDocumentItemsListItem.EiRawOption.IsSet)
                if (issuedDocumentItemsListItem.EiRawOption.Value != null)
                {
                    writer.WritePropertyName("ei_raw");
                    JsonSerializer.Serialize(writer, issuedDocumentItemsListItem.EiRaw, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_raw");
        }
    }
}
