// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocumentPaymentsListItem
    /// </summary>
    [DataContract(Name = "IssuedDocumentPaymentsListItem")]
    public partial class IssuedDocumentPaymentsListItem : IEquatable<IssuedDocumentPaymentsListItem>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name = "status", EmitDefaultValue = false)]
        public IssuedDocumentStatus? Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private IssuedDocumentStatus? _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentPaymentsListItem" /> class.
        /// </summary>
        /// <param name="id">Issued document payment item id.</param>
        /// <param name="dueDate">Issued document payment due date.</param>
        /// <param name="amount">Issued document payment amount.</param>
        /// <param name="status">status.</param>
        /// <param name="paymentAccount">paymentAccount.</param>
        /// <param name="paidDate">Issued document payment date [Only if status is paid].</param>
        /// <param name="eiRaw">Issued document payment advanced raw attributes for e-invoices.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        public IssuedDocumentPaymentsListItem(int id = default, DateOnly dueDate = default, decimal amount = default, IssuedDocumentStatus? status = default, PaymentAccount paymentAccount = default, DateOnly paidDate = default, Object eiRaw = default, IssuedDocumentPaymentsListItemPaymentTerms paymentTerms = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._DueDate = dueDate;
            if (this.DueDate != null)
            {
                this._flagDueDate = true;
            }
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
            this._Status = status;
            if (this.Status != null)
            {
                this._flagStatus = true;
            }
            this._PaymentAccount = paymentAccount;
            if (this.PaymentAccount != null)
            {
                this._flagPaymentAccount = true;
            }
            this._PaidDate = paidDate;
            if (this.PaidDate != null)
            {
                this._flagPaidDate = true;
            }
            this._EiRaw = eiRaw;
            if (this.EiRaw != null)
            {
                this._flagEiRaw = true;
            }
            this._PaymentTerms = paymentTerms;
            if (this.PaymentTerms != null)
            {
                this._flagPaymentTerms = true;
            }
        }

        /// <summary>
        /// Issued document payment item id
        /// </summary>
        /// <value>Issued document payment item id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Issued document payment due date
        /// </summary>
        /// <value>Issued document payment due date</value>
        /*
        <example>Tue Apr 03 02:00:00 CEST 2018</example>
        */
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "due_date", EmitDefaultValue = true)]
        public DateOnly DueDate
        {
            get{ return _DueDate;}
            set
            {
                _DueDate = value;
                _flagDueDate = true;
            }
        }
        private DateOnly _DueDate;
        private bool _flagDueDate;

        /// <summary>
        /// Returns false as DueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDueDate()
        {
            return _flagDueDate;
        }
        /// <summary>
        /// Issued document payment amount
        /// </summary>
        /// <value>Issued document payment amount</value>
        /*
        <example>1.45</example>
        */
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private decimal _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [DataMember(Name = "payment_account", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccount
        {
            get{ return _PaymentAccount;}
            set
            {
                _PaymentAccount = value;
                _flagPaymentAccount = true;
            }
        }
        private PaymentAccount _PaymentAccount;
        private bool _flagPaymentAccount;

        /// <summary>
        /// Returns false as PaymentAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccount()
        {
            return _flagPaymentAccount;
        }
        /// <summary>
        /// Issued document payment date [Only if status is paid]
        /// </summary>
        /// <value>Issued document payment date [Only if status is paid]</value>
        /*
        <example>Tue Apr 03 02:00:00 CEST 2018</example>
        */
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "paid_date", EmitDefaultValue = true)]
        public DateOnly PaidDate
        {
            get{ return _PaidDate;}
            set
            {
                _PaidDate = value;
                _flagPaidDate = true;
            }
        }
        private DateOnly _PaidDate;
        private bool _flagPaidDate;

        /// <summary>
        /// Returns false as PaidDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaidDate()
        {
            return _flagPaidDate;
        }
        /// <summary>
        /// Issued document payment advanced raw attributes for e-invoices
        /// </summary>
        /// <value>Issued document payment advanced raw attributes for e-invoices</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw
        {
            get{ return _EiRaw;}
            set
            {
                _EiRaw = value;
                _flagEiRaw = true;
            }
        }
        private Object _EiRaw;
        private bool _flagEiRaw;

        /// <summary>
        /// Returns false as EiRaw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiRaw()
        {
            return _flagEiRaw;
        }
        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name = "payment_terms", EmitDefaultValue = false)]
        public IssuedDocumentPaymentsListItemPaymentTerms PaymentTerms
        {
            get{ return _PaymentTerms;}
            set
            {
                _PaymentTerms = value;
                _flagPaymentTerms = true;
            }
        }
        private IssuedDocumentPaymentsListItemPaymentTerms _PaymentTerms;
        private bool _flagPaymentTerms;

        /// <summary>
        /// Returns false as PaymentTerms should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentTerms()
        {
            return _flagPaymentTerms;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPaymentsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentPaymentsListItem);
        }

        /// <summary>
        /// Returns true if IssuedDocumentPaymentsListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentPaymentsListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentPaymentsListItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    this.DueDate.Equals(input.DueDate)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.PaymentAccount == input.PaymentAccount ||
                    (this.PaymentAccount != null &&
                    this.PaymentAccount.Equals(input.PaymentAccount))
                ) && 
                (
                    this.PaidDate == input.PaidDate ||
                    this.PaidDate.Equals(input.PaidDate)
                ) && 
                (
                    this.EiRaw == input.EiRaw ||
                    (this.EiRaw != null &&
                    this.EiRaw.Equals(input.EiRaw))
                ) && 
                (
                    this.PaymentTerms == input.PaymentTerms ||
                    (this.PaymentTerms != null &&
                    this.PaymentTerms.Equals(input.PaymentTerms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.PaymentAccount != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PaidDate.GetHashCode();
                if (this.EiRaw != null)
                {
                    hashCode = (hashCode * 59) + this.EiRaw.GetHashCode();
                }
                if (this.PaymentTerms != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTerms.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentPaymentsListItem" />
    /// </summary>
    public class IssuedDocumentPaymentsListItemJsonConverter : JsonConverter<IssuedDocumentPaymentsListItem>
    {
        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize PaidDate
        /// </summary>
        public static string PaidDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentPaymentsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<DateOnly?> dueDate = default;
            Option<decimal?> amount = default;
            Option<IssuedDocumentStatus?> status = default;
            Option<PaymentAccount?> paymentAccount = default;
            Option<DateOnly?> paidDate = default;
            Option<Object?> eiRaw = default;
            Option<IssuedDocumentPaymentsListItemPaymentTerms?> paymentTerms = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "due_date":
                            dueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "amount":
                            amount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<IssuedDocumentStatus?>(IssuedDocumentStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "payment_account":
                            paymentAccount = new Option<PaymentAccount?>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "paid_date":
                            paidDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ei_raw":
                            eiRaw = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_terms":
                            paymentTerms = new Option<IssuedDocumentPaymentsListItemPaymentTerms?>(JsonSerializer.Deserialize<IssuedDocumentPaymentsListItemPaymentTerms>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class IssuedDocumentPaymentsListItem.");

            if (paymentTerms.IsSet && paymentTerms.Value == null)
                throw new ArgumentNullException(nameof(paymentTerms), "Property is not nullable for class IssuedDocumentPaymentsListItem.");

            return new IssuedDocumentPaymentsListItem(id, dueDate, amount, status, paymentAccount, paidDate, eiRaw, paymentTerms);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPaymentsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentPaymentsListItem issuedDocumentPaymentsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentPaymentsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPaymentsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentPaymentsListItem issuedDocumentPaymentsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentPaymentsListItem.PaymentTermsOption.IsSet && issuedDocumentPaymentsListItem.PaymentTerms == null)
                throw new ArgumentNullException(nameof(issuedDocumentPaymentsListItem.PaymentTerms), "Property is required for class IssuedDocumentPaymentsListItem.");

            if (issuedDocumentPaymentsListItem.IdOption.IsSet)
                if (issuedDocumentPaymentsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", issuedDocumentPaymentsListItem.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (issuedDocumentPaymentsListItem.DueDateOption.IsSet)
                if (issuedDocumentPaymentsListItem.DueDateOption.Value != null)
                    writer.WriteString("due_date", issuedDocumentPaymentsListItem.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("due_date");

            if (issuedDocumentPaymentsListItem.AmountOption.IsSet)
                if (issuedDocumentPaymentsListItem.AmountOption.Value != null)
                    writer.WriteNumber("amount", issuedDocumentPaymentsListItem.AmountOption.Value!.Value);
                else
                    writer.WriteNull("amount");

            if (issuedDocumentPaymentsListItem.StatusOption.IsSet)
            {
                var statusRawValue = IssuedDocumentStatusValueConverter.ToJsonValue(issuedDocumentPaymentsListItem.Status!.Value);
                writer.WriteString("status", statusRawValue);
            }
            if (issuedDocumentPaymentsListItem.PaymentAccountOption.IsSet)
                if (issuedDocumentPaymentsListItem.PaymentAccountOption.Value != null)
                {
                    writer.WritePropertyName("payment_account");
                    JsonSerializer.Serialize(writer, issuedDocumentPaymentsListItem.PaymentAccount, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account");
            if (issuedDocumentPaymentsListItem.PaidDateOption.IsSet)
                if (issuedDocumentPaymentsListItem.PaidDateOption.Value != null)
                    writer.WriteString("paid_date", issuedDocumentPaymentsListItem.PaidDateOption.Value!.Value.ToString(PaidDateFormat));
                else
                    writer.WriteNull("paid_date");

            if (issuedDocumentPaymentsListItem.EiRawOption.IsSet)
                if (issuedDocumentPaymentsListItem.EiRawOption.Value != null)
                {
                    writer.WritePropertyName("ei_raw");
                    JsonSerializer.Serialize(writer, issuedDocumentPaymentsListItem.EiRaw, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_raw");
            if (issuedDocumentPaymentsListItem.PaymentTermsOption.IsSet)
            {
                writer.WritePropertyName("payment_terms");
                JsonSerializer.Serialize(writer, issuedDocumentPaymentsListItem.PaymentTerms, jsonSerializerOptions);
            }
        }
    }
}
