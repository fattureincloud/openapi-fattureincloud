// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocumentPaymentsListItemPaymentTerms
    /// </summary>
    [DataContract(Name = "ReceivedDocumentPaymentsListItem_payment_terms")]
    public partial class ReceivedDocumentPaymentsListItemPaymentTerms : IEquatable<ReceivedDocumentPaymentsListItemPaymentTerms>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public PaymentTermsType? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private PaymentTermsType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentPaymentsListItemPaymentTerms" /> class.
        /// </summary>
        /// <param name="days">Received document payment number of days by which the payment must be made.</param>
        /// <param name="type">type.</param>
        public ReceivedDocumentPaymentsListItemPaymentTerms(int days = default, PaymentTermsType? type = default)
        {
            this._Days = days;
            if (this.Days != null)
            {
                this._flagDays = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
        }

        /// <summary>
        /// Received document payment number of days by which the payment must be made
        /// </summary>
        /// <value>Received document payment number of days by which the payment must be made</value>
        [DataMember(Name = "days", EmitDefaultValue = true)]
        public int Days
        {
            get{ return _Days;}
            set
            {
                _Days = value;
                _flagDays = true;
            }
        }
        private int _Days;
        private bool _flagDays;

        /// <summary>
        /// Returns false as Days should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDays()
        {
            return _flagDays;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentPaymentsListItemPaymentTerms {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceivedDocumentPaymentsListItemPaymentTerms);
        }

        /// <summary>
        /// Returns true if ReceivedDocumentPaymentsListItemPaymentTerms instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocumentPaymentsListItemPaymentTerms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocumentPaymentsListItemPaymentTerms input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Days == input.Days ||
                    this.Days.Equals(input.Days)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Days.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentPaymentsListItemPaymentTerms" />
    /// </summary>
    public class ReceivedDocumentPaymentsListItemPaymentTermsJsonConverter : JsonConverter<ReceivedDocumentPaymentsListItemPaymentTerms>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocumentPaymentsListItemPaymentTerms" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocumentPaymentsListItemPaymentTerms Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> days = default;
            Option<PaymentTermsType?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "days":
                            days = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PaymentTermsType?>(PaymentTermsTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ReceivedDocumentPaymentsListItemPaymentTerms.");

            return new ReceivedDocumentPaymentsListItemPaymentTerms(days, type);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocumentPaymentsListItemPaymentTerms" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentPaymentsListItemPaymentTerms"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentPaymentsListItemPaymentTerms receivedDocumentPaymentsListItemPaymentTerms, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocumentPaymentsListItemPaymentTerms, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocumentPaymentsListItemPaymentTerms" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentPaymentsListItemPaymentTerms"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocumentPaymentsListItemPaymentTerms receivedDocumentPaymentsListItemPaymentTerms, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocumentPaymentsListItemPaymentTerms.DaysOption.IsSet)
                if (receivedDocumentPaymentsListItemPaymentTerms.DaysOption.Value != null)
                    writer.WriteNumber("days", receivedDocumentPaymentsListItemPaymentTerms.DaysOption.Value!.Value);
                else
                    writer.WriteNull("days");

            if (receivedDocumentPaymentsListItemPaymentTerms.TypeOption.IsSet)
            {
                var typeRawValue = PaymentTermsTypeValueConverter.ToJsonValue(receivedDocumentPaymentsListItemPaymentTerms.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
        }
    }
}
