// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EmailSchedule
    /// </summary>
    [DataContract(Name = "EmailSchedule")]
    public partial class EmailSchedule : IEquatable<EmailSchedule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSchedule" /> class.
        /// </summary>
        /// <param name="senderId">Email sender id [required if **sender_email** is not specified].</param>
        /// <param name="senderEmail">Email sender address [required if **sender_id** is not specified].</param>
        /// <param name="recipientEmail">Email recipient emails [comma separated].</param>
        /// <param name="subject">Email subject.</param>
        /// <param name="body">Email body [HTML Escaped] [max size 50KiB].</param>
        /// <param name="include">include.</param>
        /// <param name="attachPdf">Attach the pdf of the document.</param>
        /// <param name="sendCopy">Send a copy of the email to the **cc_email** specified by **Get email data**.</param>
        public EmailSchedule(int senderId = default, string senderEmail = default, string recipientEmail = default, string subject = default, string body = default, EmailScheduleInclude include = default, bool attachPdf = default, bool sendCopy = default)
        {
            this._SenderId = senderId;
            if (this.SenderId != null)
            {
                this._flagSenderId = true;
            }
            this._SenderEmail = senderEmail;
            if (this.SenderEmail != null)
            {
                this._flagSenderEmail = true;
            }
            this._RecipientEmail = recipientEmail;
            if (this.RecipientEmail != null)
            {
                this._flagRecipientEmail = true;
            }
            this._Subject = subject;
            if (this.Subject != null)
            {
                this._flagSubject = true;
            }
            this._Body = body;
            if (this.Body != null)
            {
                this._flagBody = true;
            }
            this._Include = include;
            if (this.Include != null)
            {
                this._flagInclude = true;
            }
            this._AttachPdf = attachPdf;
            if (this.AttachPdf != null)
            {
                this._flagAttachPdf = true;
            }
            this._SendCopy = sendCopy;
            if (this.SendCopy != null)
            {
                this._flagSendCopy = true;
            }
        }

        /// <summary>
        /// Email sender id [required if **sender_email** is not specified]
        /// </summary>
        /// <value>Email sender id [required if **sender_email** is not specified]</value>
        [DataMember(Name = "sender_id", EmitDefaultValue = true)]
        public int SenderId
        {
            get{ return _SenderId;}
            set
            {
                _SenderId = value;
                _flagSenderId = true;
            }
        }
        private int _SenderId;
        private bool _flagSenderId;

        /// <summary>
        /// Returns false as SenderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSenderId()
        {
            return _flagSenderId;
        }
        /// <summary>
        /// Email sender address [required if **sender_id** is not specified]
        /// </summary>
        /// <value>Email sender address [required if **sender_id** is not specified]</value>
        [DataMember(Name = "sender_email", EmitDefaultValue = true)]
        public string SenderEmail
        {
            get{ return _SenderEmail;}
            set
            {
                _SenderEmail = value;
                _flagSenderEmail = true;
            }
        }
        private string _SenderEmail;
        private bool _flagSenderEmail;

        /// <summary>
        /// Returns false as SenderEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSenderEmail()
        {
            return _flagSenderEmail;
        }
        /// <summary>
        /// Email recipient emails [comma separated]
        /// </summary>
        /// <value>Email recipient emails [comma separated]</value>
        [DataMember(Name = "recipient_email", EmitDefaultValue = true)]
        public string RecipientEmail
        {
            get{ return _RecipientEmail;}
            set
            {
                _RecipientEmail = value;
                _flagRecipientEmail = true;
            }
        }
        private string _RecipientEmail;
        private bool _flagRecipientEmail;

        /// <summary>
        /// Returns false as RecipientEmail should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipientEmail()
        {
            return _flagRecipientEmail;
        }
        /// <summary>
        /// Email subject
        /// </summary>
        /// <value>Email subject</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject
        {
            get{ return _Subject;}
            set
            {
                _Subject = value;
                _flagSubject = true;
            }
        }
        private string _Subject;
        private bool _flagSubject;

        /// <summary>
        /// Returns false as Subject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubject()
        {
            return _flagSubject;
        }
        /// <summary>
        /// Email body [HTML Escaped] [max size 50KiB]
        /// </summary>
        /// <value>Email body [HTML Escaped] [max size 50KiB]</value>
        [DataMember(Name = "body", EmitDefaultValue = true)]
        public string Body
        {
            get{ return _Body;}
            set
            {
                _Body = value;
                _flagBody = true;
            }
        }
        private string _Body;
        private bool _flagBody;

        /// <summary>
        /// Returns false as Body should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBody()
        {
            return _flagBody;
        }
        /// <summary>
        /// Gets or Sets Include
        /// </summary>
        [DataMember(Name = "include", EmitDefaultValue = true)]
        public EmailScheduleInclude Include
        {
            get{ return _Include;}
            set
            {
                _Include = value;
                _flagInclude = true;
            }
        }
        private EmailScheduleInclude _Include;
        private bool _flagInclude;

        /// <summary>
        /// Returns false as Include should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInclude()
        {
            return _flagInclude;
        }
        /// <summary>
        /// Attach the pdf of the document
        /// </summary>
        /// <value>Attach the pdf of the document</value>
        [DataMember(Name = "attach_pdf", EmitDefaultValue = true)]
        public bool AttachPdf
        {
            get{ return _AttachPdf;}
            set
            {
                _AttachPdf = value;
                _flagAttachPdf = true;
            }
        }
        private bool _AttachPdf;
        private bool _flagAttachPdf;

        /// <summary>
        /// Returns false as AttachPdf should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachPdf()
        {
            return _flagAttachPdf;
        }
        /// <summary>
        /// Send a copy of the email to the **cc_email** specified by **Get email data**
        /// </summary>
        /// <value>Send a copy of the email to the **cc_email** specified by **Get email data**</value>
        [DataMember(Name = "send_copy", EmitDefaultValue = true)]
        public bool SendCopy
        {
            get{ return _SendCopy;}
            set
            {
                _SendCopy = value;
                _flagSendCopy = true;
            }
        }
        private bool _SendCopy;
        private bool _flagSendCopy;

        /// <summary>
        /// Returns false as SendCopy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSendCopy()
        {
            return _flagSendCopy;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailSchedule {\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  RecipientEmail: ").Append(RecipientEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  AttachPdf: ").Append(AttachPdf).Append("\n");
            sb.Append("  SendCopy: ").Append(SendCopy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailSchedule);
        }

        /// <summary>
        /// Returns true if EmailSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailSchedule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SenderId == input.SenderId ||
                    this.SenderId.Equals(input.SenderId)
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                ) && 
                (
                    this.RecipientEmail == input.RecipientEmail ||
                    (this.RecipientEmail != null &&
                    this.RecipientEmail.Equals(input.RecipientEmail))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Include == input.Include ||
                    (this.Include != null &&
                    this.Include.Equals(input.Include))
                ) && 
                (
                    this.AttachPdf == input.AttachPdf ||
                    this.AttachPdf.Equals(input.AttachPdf)
                ) && 
                (
                    this.SendCopy == input.SendCopy ||
                    this.SendCopy.Equals(input.SendCopy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SenderId.GetHashCode();
                if (this.SenderEmail != null)
                {
                    hashCode = (hashCode * 59) + this.SenderEmail.GetHashCode();
                }
                if (this.RecipientEmail != null)
                {
                    hashCode = (hashCode * 59) + this.RecipientEmail.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.Include != null)
                {
                    hashCode = (hashCode * 59) + this.Include.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AttachPdf.GetHashCode();
                hashCode = (hashCode * 59) + this.SendCopy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="EmailSchedule" />
    /// </summary>
    public class EmailScheduleJsonConverter : JsonConverter<EmailSchedule>
    {
        /// <summary>
        /// Deserializes json to <see cref="EmailSchedule" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EmailSchedule Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> senderId = default;
            Option<string?> senderEmail = default;
            Option<string?> recipientEmail = default;
            Option<string?> subject = default;
            Option<string?> body = default;
            Option<EmailScheduleInclude?> include = default;
            Option<bool?> attachPdf = default;
            Option<bool?> sendCopy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sender_id":
                            senderId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sender_email":
                            senderEmail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "recipient_email":
                            recipientEmail = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "body":
                            body = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "include":
                            include = new Option<EmailScheduleInclude?>(JsonSerializer.Deserialize<EmailScheduleInclude>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attach_pdf":
                            attachPdf = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "send_copy":
                            sendCopy = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EmailSchedule(senderId, senderEmail, recipientEmail, subject, body, include, attachPdf, sendCopy);
        }

        /// <summary>
        /// Serializes a <see cref="EmailSchedule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailSchedule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EmailSchedule emailSchedule, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, emailSchedule, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EmailSchedule" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailSchedule"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EmailSchedule emailSchedule, JsonSerializerOptions jsonSerializerOptions)
        {
            if (emailSchedule.SenderIdOption.IsSet)
                if (emailSchedule.SenderIdOption.Value != null)
                    writer.WriteNumber("sender_id", emailSchedule.SenderIdOption.Value!.Value);
                else
                    writer.WriteNull("sender_id");

            if (emailSchedule.SenderEmailOption.IsSet)
                if (emailSchedule.SenderEmailOption.Value != null)
                    writer.WriteString("sender_email", emailSchedule.SenderEmail);
                else
                    writer.WriteNull("sender_email");

            if (emailSchedule.RecipientEmailOption.IsSet)
                if (emailSchedule.RecipientEmailOption.Value != null)
                    writer.WriteString("recipient_email", emailSchedule.RecipientEmail);
                else
                    writer.WriteNull("recipient_email");

            if (emailSchedule.SubjectOption.IsSet)
                if (emailSchedule.SubjectOption.Value != null)
                    writer.WriteString("subject", emailSchedule.Subject);
                else
                    writer.WriteNull("subject");

            if (emailSchedule.BodyOption.IsSet)
                if (emailSchedule.BodyOption.Value != null)
                    writer.WriteString("body", emailSchedule.Body);
                else
                    writer.WriteNull("body");

            if (emailSchedule.IncludeOption.IsSet)
                if (emailSchedule.IncludeOption.Value != null)
                {
                    writer.WritePropertyName("include");
                    JsonSerializer.Serialize(writer, emailSchedule.Include, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("include");
            if (emailSchedule.AttachPdfOption.IsSet)
                if (emailSchedule.AttachPdfOption.Value != null)
                    writer.WriteBoolean("attach_pdf", emailSchedule.AttachPdfOption.Value!.Value);
                else
                    writer.WriteNull("attach_pdf");

            if (emailSchedule.SendCopyOption.IsSet)
                if (emailSchedule.SendCopyOption.Value != null)
                    writer.WriteBoolean("send_copy", emailSchedule.SendCopyOption.Value!.Value);
                else
                    writer.WriteNull("send_copy");
        }
    }
}
