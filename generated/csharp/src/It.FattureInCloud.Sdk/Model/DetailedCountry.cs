// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// DetailedCountry
    /// </summary>
    [DataContract(Name = "DetailedCountry")]
    public partial class DetailedCountry : IEquatable<DetailedCountry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedCountry" /> class.
        /// </summary>
        /// <param name="name">Country name.</param>
        /// <param name="settingsName">Country settings name.</param>
        /// <param name="iso">Country iso code.</param>
        /// <param name="fiscalIso">Country fiscal iso code.</param>
        /// <param name="uic">Country uic.</param>
        public DetailedCountry(string name = default, string settingsName = default, string iso = default, string fiscalIso = default, string uic = default)
        {
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._SettingsName = settingsName;
            if (this.SettingsName != null)
            {
                this._flagSettingsName = true;
            }
            this._Iso = iso;
            if (this.Iso != null)
            {
                this._flagIso = true;
            }
            this._FiscalIso = fiscalIso;
            if (this.FiscalIso != null)
            {
                this._flagFiscalIso = true;
            }
            this._Uic = uic;
            if (this.Uic != null)
            {
                this._flagUic = true;
            }
        }

        /// <summary>
        /// Country name
        /// </summary>
        /// <value>Country name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Country settings name
        /// </summary>
        /// <value>Country settings name</value>
        [DataMember(Name = "settings_name", EmitDefaultValue = true)]
        public string SettingsName
        {
            get{ return _SettingsName;}
            set
            {
                _SettingsName = value;
                _flagSettingsName = true;
            }
        }
        private string _SettingsName;
        private bool _flagSettingsName;

        /// <summary>
        /// Returns false as SettingsName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSettingsName()
        {
            return _flagSettingsName;
        }
        /// <summary>
        /// Country iso code
        /// </summary>
        /// <value>Country iso code</value>
        [DataMember(Name = "iso", EmitDefaultValue = true)]
        public string Iso
        {
            get{ return _Iso;}
            set
            {
                _Iso = value;
                _flagIso = true;
            }
        }
        private string _Iso;
        private bool _flagIso;

        /// <summary>
        /// Returns false as Iso should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIso()
        {
            return _flagIso;
        }
        /// <summary>
        /// Country fiscal iso code
        /// </summary>
        /// <value>Country fiscal iso code</value>
        [DataMember(Name = "fiscal_iso", EmitDefaultValue = true)]
        public string FiscalIso
        {
            get{ return _FiscalIso;}
            set
            {
                _FiscalIso = value;
                _flagFiscalIso = true;
            }
        }
        private string _FiscalIso;
        private bool _flagFiscalIso;

        /// <summary>
        /// Returns false as FiscalIso should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFiscalIso()
        {
            return _flagFiscalIso;
        }
        /// <summary>
        /// Country uic
        /// </summary>
        /// <value>Country uic</value>
        [DataMember(Name = "uic", EmitDefaultValue = true)]
        public string Uic
        {
            get{ return _Uic;}
            set
            {
                _Uic = value;
                _flagUic = true;
            }
        }
        private string _Uic;
        private bool _flagUic;

        /// <summary>
        /// Returns false as Uic should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUic()
        {
            return _flagUic;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DetailedCountry {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SettingsName: ").Append(SettingsName).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("  FiscalIso: ").Append(FiscalIso).Append("\n");
            sb.Append("  Uic: ").Append(Uic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedCountry);
        }

        /// <summary>
        /// Returns true if DetailedCountry instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedCountry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedCountry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SettingsName == input.SettingsName ||
                    (this.SettingsName != null &&
                    this.SettingsName.Equals(input.SettingsName))
                ) && 
                (
                    this.Iso == input.Iso ||
                    (this.Iso != null &&
                    this.Iso.Equals(input.Iso))
                ) && 
                (
                    this.FiscalIso == input.FiscalIso ||
                    (this.FiscalIso != null &&
                    this.FiscalIso.Equals(input.FiscalIso))
                ) && 
                (
                    this.Uic == input.Uic ||
                    (this.Uic != null &&
                    this.Uic.Equals(input.Uic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.SettingsName != null)
                {
                    hashCode = (hashCode * 59) + this.SettingsName.GetHashCode();
                }
                if (this.Iso != null)
                {
                    hashCode = (hashCode * 59) + this.Iso.GetHashCode();
                }
                if (this.FiscalIso != null)
                {
                    hashCode = (hashCode * 59) + this.FiscalIso.GetHashCode();
                }
                if (this.Uic != null)
                {
                    hashCode = (hashCode * 59) + this.Uic.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="DetailedCountry" />
    /// </summary>
    public class DetailedCountryJsonConverter : JsonConverter<DetailedCountry>
    {
        /// <summary>
        /// Deserializes json to <see cref="DetailedCountry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DetailedCountry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> settingsName = default;
            Option<string?> iso = default;
            Option<string?> fiscalIso = default;
            Option<string?> uic = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "settings_name":
                            settingsName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "iso":
                            iso = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fiscal_iso":
                            fiscalIso = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "uic":
                            uic = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DetailedCountry(name, settingsName, iso, fiscalIso, uic);
        }

        /// <summary>
        /// Serializes a <see cref="DetailedCountry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailedCountry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DetailedCountry detailedCountry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, detailedCountry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DetailedCountry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="detailedCountry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DetailedCountry detailedCountry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (detailedCountry.NameOption.IsSet)
                if (detailedCountry.NameOption.Value != null)
                    writer.WriteString("name", detailedCountry.Name);
                else
                    writer.WriteNull("name");

            if (detailedCountry.SettingsNameOption.IsSet)
                if (detailedCountry.SettingsNameOption.Value != null)
                    writer.WriteString("settings_name", detailedCountry.SettingsName);
                else
                    writer.WriteNull("settings_name");

            if (detailedCountry.IsoOption.IsSet)
                if (detailedCountry.IsoOption.Value != null)
                    writer.WriteString("iso", detailedCountry.Iso);
                else
                    writer.WriteNull("iso");

            if (detailedCountry.FiscalIsoOption.IsSet)
                if (detailedCountry.FiscalIsoOption.Value != null)
                    writer.WriteString("fiscal_iso", detailedCountry.FiscalIso);
                else
                    writer.WriteNull("fiscal_iso");

            if (detailedCountry.UicOption.IsSet)
                if (detailedCountry.UicOption.Value != null)
                    writer.WriteString("uic", detailedCountry.Uic);
                else
                    writer.WriteNull("uic");
        }
    }
}
