// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Vat kind [esigibilità IVA]
    /// </summary>
    /// <value>Vat kind [esigibilità IVA]</value>
    public enum VatKind
    {
        /// <summary>
        /// Enum I for value: I
        /// </summary>
        I = 1,

        /// <summary>
        /// Enum D for value: D
        /// </summary>
        D = 2,

        /// <summary>
        /// Enum S for value: S
        /// </summary>
        S = 3
    }

    /// <summary>
    /// Converts <see cref="VatKind"/> to and from the JSON value
    /// </summary>
    public static class VatKindValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VatKind"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VatKind FromString(string value)
        {
            if (value.Equals("I"))
                return VatKind.I;

            if (value.Equals("D"))
                return VatKind.D;

            if (value.Equals("S"))
                return VatKind.S;

            throw new NotImplementedException($"Could not convert value to type VatKind: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VatKind"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VatKind? FromStringOrDefault(string value)
        {
            if (value.Equals("I"))
                return VatKind.I;

            if (value.Equals("D"))
                return VatKind.D;

            if (value.Equals("S"))
                return VatKind.S;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VatKind"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VatKind value)
        {
            if (value == VatKind.I)
                return "I";

            if (value == VatKind.D)
                return "D";

            if (value == VatKind.S)
                return "S";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatKind"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VatKindJsonConverter : JsonConverter<VatKind>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VatKind Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VatKind? result = rawValue == null
                ? null
                : VatKindValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VatKind to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatKind"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VatKind vatKind, JsonSerializerOptions options)
        {
            writer.WriteStringValue(VatKindValueConverter.ToJsonValue(vatKind).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VatKind"/>
    /// </summary>
    public class VatKindNullableJsonConverter : JsonConverter<VatKind?>
    {
        /// <summary>
        /// Returns a VatKind from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VatKind? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VatKind? result = rawValue == null
                ? null
                : VatKindValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VatKind to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatKind"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VatKind? vatKind, JsonSerializerOptions options)
        {
            writer.WriteStringValue(vatKind.HasValue ? VatKindValueConverter.ToJsonValue(vatKind.Value).ToString() : "null");
        }
    }
}
