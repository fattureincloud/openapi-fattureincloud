// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceiptPreCreateInfo
    /// </summary>
    [DataContract(Name = "ReceiptPreCreateInfo")]
    public partial class ReceiptPreCreateInfo : IEquatable<ReceiptPreCreateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptPreCreateInfo" /> class.
        /// </summary>
        /// <param name="numerations">numerations.</param>
        /// <param name="numerationsList">Receipt used numerations list.</param>
        /// <param name="rcCentersList">Receipt used revenue centers list.</param>
        /// <param name="paymentAccountsList">Payment accounts list.</param>
        /// <param name="categoriesList">Receipt categories list.</param>
        /// <param name="vatTypesList">Vat types list.</param>
        public ReceiptPreCreateInfo(Dictionary<string, Dictionary<string, Dictionary<string, int>>> numerations = default, List<string> numerationsList = default, List<string> rcCentersList = default, List<PaymentAccount> paymentAccountsList = default, List<string> categoriesList = default, List<VatType> vatTypesList = default)
        {
            this._Numerations = numerations;
            if (this.Numerations != null)
            {
                this._flagNumerations = true;
            }
            this._NumerationsList = numerationsList;
            if (this.NumerationsList != null)
            {
                this._flagNumerationsList = true;
            }
            this._RcCentersList = rcCentersList;
            if (this.RcCentersList != null)
            {
                this._flagRcCentersList = true;
            }
            this._PaymentAccountsList = paymentAccountsList;
            if (this.PaymentAccountsList != null)
            {
                this._flagPaymentAccountsList = true;
            }
            this._CategoriesList = categoriesList;
            if (this.CategoriesList != null)
            {
                this._flagCategoriesList = true;
            }
            this._VatTypesList = vatTypesList;
            if (this.VatTypesList != null)
            {
                this._flagVatTypesList = true;
            }
        }

        /// <summary>
        /// Gets or Sets Numerations
        /// </summary>
        [DataMember(Name = "numerations", EmitDefaultValue = false)]
        public Dictionary<string, Dictionary<string, Dictionary<string, int>>> Numerations
        {
            get{ return _Numerations;}
            set
            {
                _Numerations = value;
                _flagNumerations = true;
            }
        }
        private Dictionary<string, Dictionary<string, Dictionary<string, int>>> _Numerations;
        private bool _flagNumerations;

        /// <summary>
        /// Returns false as Numerations should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumerations()
        {
            return _flagNumerations;
        }
        /// <summary>
        /// Receipt used numerations list
        /// </summary>
        /// <value>Receipt used numerations list</value>
        [DataMember(Name = "numerations_list", EmitDefaultValue = true)]
        public List<string> NumerationsList
        {
            get{ return _NumerationsList;}
            set
            {
                _NumerationsList = value;
                _flagNumerationsList = true;
            }
        }
        private List<string> _NumerationsList;
        private bool _flagNumerationsList;

        /// <summary>
        /// Returns false as NumerationsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumerationsList()
        {
            return _flagNumerationsList;
        }
        /// <summary>
        /// Receipt used revenue centers list
        /// </summary>
        /// <value>Receipt used revenue centers list</value>
        [DataMember(Name = "rc_centers_list", EmitDefaultValue = true)]
        public List<string> RcCentersList
        {
            get{ return _RcCentersList;}
            set
            {
                _RcCentersList = value;
                _flagRcCentersList = true;
            }
        }
        private List<string> _RcCentersList;
        private bool _flagRcCentersList;

        /// <summary>
        /// Returns false as RcCentersList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCentersList()
        {
            return _flagRcCentersList;
        }
        /// <summary>
        /// Payment accounts list
        /// </summary>
        /// <value>Payment accounts list</value>
        [DataMember(Name = "payment_accounts_list", EmitDefaultValue = true)]
        public List<PaymentAccount> PaymentAccountsList
        {
            get{ return _PaymentAccountsList;}
            set
            {
                _PaymentAccountsList = value;
                _flagPaymentAccountsList = true;
            }
        }
        private List<PaymentAccount> _PaymentAccountsList;
        private bool _flagPaymentAccountsList;

        /// <summary>
        /// Returns false as PaymentAccountsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountsList()
        {
            return _flagPaymentAccountsList;
        }
        /// <summary>
        /// Receipt categories list
        /// </summary>
        /// <value>Receipt categories list</value>
        [DataMember(Name = "categories_list", EmitDefaultValue = true)]
        public List<string> CategoriesList
        {
            get{ return _CategoriesList;}
            set
            {
                _CategoriesList = value;
                _flagCategoriesList = true;
            }
        }
        private List<string> _CategoriesList;
        private bool _flagCategoriesList;

        /// <summary>
        /// Returns false as CategoriesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoriesList()
        {
            return _flagCategoriesList;
        }
        /// <summary>
        /// Vat types list
        /// </summary>
        /// <value>Vat types list</value>
        [DataMember(Name = "vat_types_list", EmitDefaultValue = true)]
        public List<VatType> VatTypesList
        {
            get{ return _VatTypesList;}
            set
            {
                _VatTypesList = value;
                _flagVatTypesList = true;
            }
        }
        private List<VatType> _VatTypesList;
        private bool _flagVatTypesList;

        /// <summary>
        /// Returns false as VatTypesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatTypesList()
        {
            return _flagVatTypesList;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceiptPreCreateInfo {\n");
            sb.Append("  Numerations: ").Append(Numerations).Append("\n");
            sb.Append("  NumerationsList: ").Append(NumerationsList).Append("\n");
            sb.Append("  RcCentersList: ").Append(RcCentersList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  CategoriesList: ").Append(CategoriesList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceiptPreCreateInfo);
        }

        /// <summary>
        /// Returns true if ReceiptPreCreateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceiptPreCreateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceiptPreCreateInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Numerations == input.Numerations ||
                    this.Numerations != null &&
                    input.Numerations != null &&
                    this.Numerations.SequenceEqual(input.Numerations)
                ) && 
                (
                    this.NumerationsList == input.NumerationsList ||
                    this.NumerationsList != null &&
                    input.NumerationsList != null &&
                    this.NumerationsList.SequenceEqual(input.NumerationsList)
                ) && 
                (
                    this.RcCentersList == input.RcCentersList ||
                    this.RcCentersList != null &&
                    input.RcCentersList != null &&
                    this.RcCentersList.SequenceEqual(input.RcCentersList)
                ) && 
                (
                    this.PaymentAccountsList == input.PaymentAccountsList ||
                    this.PaymentAccountsList != null &&
                    input.PaymentAccountsList != null &&
                    this.PaymentAccountsList.SequenceEqual(input.PaymentAccountsList)
                ) && 
                (
                    this.CategoriesList == input.CategoriesList ||
                    this.CategoriesList != null &&
                    input.CategoriesList != null &&
                    this.CategoriesList.SequenceEqual(input.CategoriesList)
                ) && 
                (
                    this.VatTypesList == input.VatTypesList ||
                    this.VatTypesList != null &&
                    input.VatTypesList != null &&
                    this.VatTypesList.SequenceEqual(input.VatTypesList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Numerations != null)
                {
                    hashCode = (hashCode * 59) + this.Numerations.GetHashCode();
                }
                if (this.NumerationsList != null)
                {
                    hashCode = (hashCode * 59) + this.NumerationsList.GetHashCode();
                }
                if (this.RcCentersList != null)
                {
                    hashCode = (hashCode * 59) + this.RcCentersList.GetHashCode();
                }
                if (this.PaymentAccountsList != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccountsList.GetHashCode();
                }
                if (this.CategoriesList != null)
                {
                    hashCode = (hashCode * 59) + this.CategoriesList.GetHashCode();
                }
                if (this.VatTypesList != null)
                {
                    hashCode = (hashCode * 59) + this.VatTypesList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="ReceiptPreCreateInfo" />
    /// </summary>
    public class ReceiptPreCreateInfoJsonConverter : JsonConverter<ReceiptPreCreateInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceiptPreCreateInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceiptPreCreateInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, Dictionary<string, int>>?> numerations = default;
            Option<List<string>?> numerationsList = default;
            Option<List<string>?> rcCentersList = default;
            Option<List<PaymentAccount>?> paymentAccountsList = default;
            Option<List<string>?> categoriesList = default;
            Option<List<VatType>?> vatTypesList = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "numerations":
                            numerations = new Option<Dictionary<string, Dictionary<string, int>>?>(JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, int>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "numerations_list":
                            numerationsList = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "rc_centers_list":
                            rcCentersList = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_accounts_list":
                            paymentAccountsList = new Option<List<PaymentAccount>?>(JsonSerializer.Deserialize<List<PaymentAccount>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "categories_list":
                            categoriesList = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vat_types_list":
                            vatTypesList = new Option<List<VatType>?>(JsonSerializer.Deserialize<List<VatType>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (numerations.IsSet && numerations.Value == null)
                throw new ArgumentNullException(nameof(numerations), "Property is not nullable for class ReceiptPreCreateInfo.");

            return new ReceiptPreCreateInfo(numerations, numerationsList, rcCentersList, paymentAccountsList, categoriesList, vatTypesList);
        }

        /// <summary>
        /// Serializes a <see cref="ReceiptPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receiptPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceiptPreCreateInfo receiptPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receiptPreCreateInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceiptPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receiptPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceiptPreCreateInfo receiptPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receiptPreCreateInfo.NumerationsOption.IsSet && receiptPreCreateInfo.Numerations == null)
                throw new ArgumentNullException(nameof(receiptPreCreateInfo.Numerations), "Property is required for class ReceiptPreCreateInfo.");

            if (receiptPreCreateInfo.NumerationsOption.IsSet)
            {
                writer.WritePropertyName("numerations");
                JsonSerializer.Serialize(writer, receiptPreCreateInfo.Numerations, jsonSerializerOptions);
            }
            if (receiptPreCreateInfo.NumerationsListOption.IsSet)
                if (receiptPreCreateInfo.NumerationsListOption.Value != null)
                {
                    writer.WritePropertyName("numerations_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.NumerationsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("numerations_list");
            if (receiptPreCreateInfo.RcCentersListOption.IsSet)
                if (receiptPreCreateInfo.RcCentersListOption.Value != null)
                {
                    writer.WritePropertyName("rc_centers_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.RcCentersList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("rc_centers_list");
            if (receiptPreCreateInfo.PaymentAccountsListOption.IsSet)
                if (receiptPreCreateInfo.PaymentAccountsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_accounts_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.PaymentAccountsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_accounts_list");
            if (receiptPreCreateInfo.CategoriesListOption.IsSet)
                if (receiptPreCreateInfo.CategoriesListOption.Value != null)
                {
                    writer.WritePropertyName("categories_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.CategoriesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("categories_list");
            if (receiptPreCreateInfo.VatTypesListOption.IsSet)
                if (receiptPreCreateInfo.VatTypesListOption.Value != null)
                {
                    writer.WritePropertyName("vat_types_list");
                    JsonSerializer.Serialize(writer, receiptPreCreateInfo.VatTypesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat_types_list");
        }
    }
}
