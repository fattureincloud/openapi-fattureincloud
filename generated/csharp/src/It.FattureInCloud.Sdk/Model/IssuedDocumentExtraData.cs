// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document extra data [TS fields follow the technical specifications provided by \&quot;Sistema Tessera Sanitaria\&quot;]
    /// </summary>
    [DataContract(Name = "IssuedDocument_extra_data")]
    public partial class IssuedDocumentExtraData : IEquatable<IssuedDocumentExtraData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentExtraData" /> class.
        /// </summary>
        /// <param name="multifattureSent">multifattureSent.</param>
        /// <param name="tsCommunication">Send issued document to \&quot;Sistema Tessera Sanitaria\&quot;.</param>
        /// <param name="tsFlagTipoSpesa">Issued document ts \&quot;tipo spesa\&quot; [TK, FC, FV, SV,SP, AD, AS, ECG, SR].</param>
        /// <param name="tsPagamentoTracciato">Issued document ts traced payment.</param>
        /// <param name="tsTipoSpesa">Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more..</param>
        /// <param name="tsOpposizione">Issued document ts \&quot;opposizione\&quot;.</param>
        /// <param name="tsStatus">Issued document ts status.</param>
        /// <param name="tsFileId">Issued document ts file id.</param>
        /// <param name="tsSentDate">Issued document ts sent date.</param>
        /// <param name="tsFullAmount">Issued document ts total amount.</param>
        /// <param name="importedBy">Issued document imported by software.</param>
        public IssuedDocumentExtraData(int multifattureSent = default, bool tsCommunication = default, decimal tsFlagTipoSpesa = default, bool tsPagamentoTracciato = default, string tsTipoSpesa = default, bool tsOpposizione = default, int tsStatus = default, string tsFileId = default, DateOnly tsSentDate = default, bool tsFullAmount = default, string importedBy = default)
        {
            this._MultifattureSent = multifattureSent;
            if (this.MultifattureSent != null)
            {
                this._flagMultifattureSent = true;
            }
            this._TsCommunication = tsCommunication;
            if (this.TsCommunication != null)
            {
                this._flagTsCommunication = true;
            }
            this._TsFlagTipoSpesa = tsFlagTipoSpesa;
            if (this.TsFlagTipoSpesa != null)
            {
                this._flagTsFlagTipoSpesa = true;
            }
            this._TsPagamentoTracciato = tsPagamentoTracciato;
            if (this.TsPagamentoTracciato != null)
            {
                this._flagTsPagamentoTracciato = true;
            }
            this._TsTipoSpesa = tsTipoSpesa;
            if (this.TsTipoSpesa != null)
            {
                this._flagTsTipoSpesa = true;
            }
            this._TsOpposizione = tsOpposizione;
            if (this.TsOpposizione != null)
            {
                this._flagTsOpposizione = true;
            }
            this._TsStatus = tsStatus;
            if (this.TsStatus != null)
            {
                this._flagTsStatus = true;
            }
            this._TsFileId = tsFileId;
            if (this.TsFileId != null)
            {
                this._flagTsFileId = true;
            }
            this._TsSentDate = tsSentDate;
            if (this.TsSentDate != null)
            {
                this._flagTsSentDate = true;
            }
            this._TsFullAmount = tsFullAmount;
            if (this.TsFullAmount != null)
            {
                this._flagTsFullAmount = true;
            }
            this._ImportedBy = importedBy;
            if (this.ImportedBy != null)
            {
                this._flagImportedBy = true;
            }
        }

        /// <summary>
        /// Gets or Sets MultifattureSent
        /// </summary>
        [DataMember(Name = "multifatture_sent", EmitDefaultValue = true)]
        public int MultifattureSent
        {
            get{ return _MultifattureSent;}
            set
            {
                _MultifattureSent = value;
                _flagMultifattureSent = true;
            }
        }
        private int _MultifattureSent;
        private bool _flagMultifattureSent;

        /// <summary>
        /// Returns false as MultifattureSent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMultifattureSent()
        {
            return _flagMultifattureSent;
        }
        /// <summary>
        /// Send issued document to \&quot;Sistema Tessera Sanitaria\&quot;
        /// </summary>
        /// <value>Send issued document to \&quot;Sistema Tessera Sanitaria\&quot;</value>
        [DataMember(Name = "ts_communication", EmitDefaultValue = true)]
        public bool TsCommunication
        {
            get{ return _TsCommunication;}
            set
            {
                _TsCommunication = value;
                _flagTsCommunication = true;
            }
        }
        private bool _TsCommunication;
        private bool _flagTsCommunication;

        /// <summary>
        /// Returns false as TsCommunication should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsCommunication()
        {
            return _flagTsCommunication;
        }
        /// <summary>
        /// Issued document ts \&quot;tipo spesa\&quot; [TK, FC, FV, SV,SP, AD, AS, ECG, SR]
        /// </summary>
        /// <value>Issued document ts \&quot;tipo spesa\&quot; [TK, FC, FV, SV,SP, AD, AS, ECG, SR]</value>
        [DataMember(Name = "ts_flag_tipo_spesa", EmitDefaultValue = true)]
        public decimal TsFlagTipoSpesa
        {
            get{ return _TsFlagTipoSpesa;}
            set
            {
                _TsFlagTipoSpesa = value;
                _flagTsFlagTipoSpesa = true;
            }
        }
        private decimal _TsFlagTipoSpesa;
        private bool _flagTsFlagTipoSpesa;

        /// <summary>
        /// Returns false as TsFlagTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFlagTipoSpesa()
        {
            return _flagTsFlagTipoSpesa;
        }
        /// <summary>
        /// Issued document ts traced payment
        /// </summary>
        /// <value>Issued document ts traced payment</value>
        [DataMember(Name = "ts_pagamento_tracciato", EmitDefaultValue = true)]
        public bool TsPagamentoTracciato
        {
            get{ return _TsPagamentoTracciato;}
            set
            {
                _TsPagamentoTracciato = value;
                _flagTsPagamentoTracciato = true;
            }
        }
        private bool _TsPagamentoTracciato;
        private bool _flagTsPagamentoTracciato;

        /// <summary>
        /// Returns false as TsPagamentoTracciato should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsPagamentoTracciato()
        {
            return _flagTsPagamentoTracciato;
        }
        /// <summary>
        /// Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more.
        /// </summary>
        /// <value>Can be [ &#39;TK&#39;, &#39;FC&#39;, &#39;FV&#39;, &#39;SV&#39;, &#39;SP&#39;, &#39;AD&#39;, &#39;AS&#39;, &#39;SR&#39;, &#39;CT&#39;, &#39;PI&#39;, &#39;IC&#39;, &#39;AA&#39; ]. Refer to the technical specifications to learn more.</value>
        [DataMember(Name = "ts_tipo_spesa", EmitDefaultValue = true)]
        public string TsTipoSpesa
        {
            get{ return _TsTipoSpesa;}
            set
            {
                _TsTipoSpesa = value;
                _flagTsTipoSpesa = true;
            }
        }
        private string _TsTipoSpesa;
        private bool _flagTsTipoSpesa;

        /// <summary>
        /// Returns false as TsTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsTipoSpesa()
        {
            return _flagTsTipoSpesa;
        }
        /// <summary>
        /// Issued document ts \&quot;opposizione\&quot;
        /// </summary>
        /// <value>Issued document ts \&quot;opposizione\&quot;</value>
        [DataMember(Name = "ts_opposizione", EmitDefaultValue = true)]
        public bool TsOpposizione
        {
            get{ return _TsOpposizione;}
            set
            {
                _TsOpposizione = value;
                _flagTsOpposizione = true;
            }
        }
        private bool _TsOpposizione;
        private bool _flagTsOpposizione;

        /// <summary>
        /// Returns false as TsOpposizione should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsOpposizione()
        {
            return _flagTsOpposizione;
        }
        /// <summary>
        /// Issued document ts status
        /// </summary>
        /// <value>Issued document ts status</value>
        [DataMember(Name = "ts_status", EmitDefaultValue = true)]
        public int TsStatus
        {
            get{ return _TsStatus;}
            set
            {
                _TsStatus = value;
                _flagTsStatus = true;
            }
        }
        private int _TsStatus;
        private bool _flagTsStatus;

        /// <summary>
        /// Returns false as TsStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsStatus()
        {
            return _flagTsStatus;
        }
        /// <summary>
        /// Issued document ts file id
        /// </summary>
        /// <value>Issued document ts file id</value>
        [DataMember(Name = "ts_file_id", EmitDefaultValue = true)]
        public string TsFileId
        {
            get{ return _TsFileId;}
            set
            {
                _TsFileId = value;
                _flagTsFileId = true;
            }
        }
        private string _TsFileId;
        private bool _flagTsFileId;

        /// <summary>
        /// Returns false as TsFileId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFileId()
        {
            return _flagTsFileId;
        }
        /// <summary>
        /// Issued document ts sent date
        /// </summary>
        /// <value>Issued document ts sent date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "ts_sent_date", EmitDefaultValue = true)]
        public DateOnly TsSentDate
        {
            get{ return _TsSentDate;}
            set
            {
                _TsSentDate = value;
                _flagTsSentDate = true;
            }
        }
        private DateOnly _TsSentDate;
        private bool _flagTsSentDate;

        /// <summary>
        /// Returns false as TsSentDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsSentDate()
        {
            return _flagTsSentDate;
        }
        /// <summary>
        /// Issued document ts total amount
        /// </summary>
        /// <value>Issued document ts total amount</value>
        [DataMember(Name = "ts_full_amount", EmitDefaultValue = true)]
        public bool TsFullAmount
        {
            get{ return _TsFullAmount;}
            set
            {
                _TsFullAmount = value;
                _flagTsFullAmount = true;
            }
        }
        private bool _TsFullAmount;
        private bool _flagTsFullAmount;

        /// <summary>
        /// Returns false as TsFullAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFullAmount()
        {
            return _flagTsFullAmount;
        }
        /// <summary>
        /// Issued document imported by software
        /// </summary>
        /// <value>Issued document imported by software</value>
        [DataMember(Name = "imported_by", EmitDefaultValue = true)]
        public string ImportedBy
        {
            get{ return _ImportedBy;}
            set
            {
                _ImportedBy = value;
                _flagImportedBy = true;
            }
        }
        private string _ImportedBy;
        private bool _flagImportedBy;

        /// <summary>
        /// Returns false as ImportedBy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImportedBy()
        {
            return _flagImportedBy;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentExtraData {\n");
            sb.Append("  MultifattureSent: ").Append(MultifattureSent).Append("\n");
            sb.Append("  TsCommunication: ").Append(TsCommunication).Append("\n");
            sb.Append("  TsFlagTipoSpesa: ").Append(TsFlagTipoSpesa).Append("\n");
            sb.Append("  TsPagamentoTracciato: ").Append(TsPagamentoTracciato).Append("\n");
            sb.Append("  TsTipoSpesa: ").Append(TsTipoSpesa).Append("\n");
            sb.Append("  TsOpposizione: ").Append(TsOpposizione).Append("\n");
            sb.Append("  TsStatus: ").Append(TsStatus).Append("\n");
            sb.Append("  TsFileId: ").Append(TsFileId).Append("\n");
            sb.Append("  TsSentDate: ").Append(TsSentDate).Append("\n");
            sb.Append("  TsFullAmount: ").Append(TsFullAmount).Append("\n");
            sb.Append("  ImportedBy: ").Append(ImportedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentExtraData);
        }

        /// <summary>
        /// Returns true if IssuedDocumentExtraData instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentExtraData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentExtraData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MultifattureSent == input.MultifattureSent ||
                    this.MultifattureSent.Equals(input.MultifattureSent)
                ) && 
                (
                    this.TsCommunication == input.TsCommunication ||
                    this.TsCommunication.Equals(input.TsCommunication)
                ) && 
                (
                    this.TsFlagTipoSpesa == input.TsFlagTipoSpesa ||
                    this.TsFlagTipoSpesa.Equals(input.TsFlagTipoSpesa)
                ) && 
                (
                    this.TsPagamentoTracciato == input.TsPagamentoTracciato ||
                    this.TsPagamentoTracciato.Equals(input.TsPagamentoTracciato)
                ) && 
                (
                    this.TsTipoSpesa == input.TsTipoSpesa ||
                    (this.TsTipoSpesa != null &&
                    this.TsTipoSpesa.Equals(input.TsTipoSpesa))
                ) && 
                (
                    this.TsOpposizione == input.TsOpposizione ||
                    this.TsOpposizione.Equals(input.TsOpposizione)
                ) && 
                (
                    this.TsStatus == input.TsStatus ||
                    this.TsStatus.Equals(input.TsStatus)
                ) && 
                (
                    this.TsFileId == input.TsFileId ||
                    (this.TsFileId != null &&
                    this.TsFileId.Equals(input.TsFileId))
                ) && 
                (
                    this.TsSentDate == input.TsSentDate ||
                    this.TsSentDate.Equals(input.TsSentDate)
                ) && 
                (
                    this.TsFullAmount == input.TsFullAmount ||
                    this.TsFullAmount.Equals(input.TsFullAmount)
                ) && 
                (
                    this.ImportedBy == input.ImportedBy ||
                    (this.ImportedBy != null &&
                    this.ImportedBy.Equals(input.ImportedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MultifattureSent.GetHashCode();
                hashCode = (hashCode * 59) + this.TsCommunication.GetHashCode();
                hashCode = (hashCode * 59) + this.TsFlagTipoSpesa.GetHashCode();
                hashCode = (hashCode * 59) + this.TsPagamentoTracciato.GetHashCode();
                if (this.TsTipoSpesa != null)
                {
                    hashCode = (hashCode * 59) + this.TsTipoSpesa.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TsOpposizione.GetHashCode();
                hashCode = (hashCode * 59) + this.TsStatus.GetHashCode();
                if (this.TsFileId != null)
                {
                    hashCode = (hashCode * 59) + this.TsFileId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TsSentDate.GetHashCode();
                hashCode = (hashCode * 59) + this.TsFullAmount.GetHashCode();
                if (this.ImportedBy != null)
                {
                    hashCode = (hashCode * 59) + this.ImportedBy.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentExtraData" />
    /// </summary>
    public class IssuedDocumentExtraDataJsonConverter : JsonConverter<IssuedDocumentExtraData>
    {
        /// <summary>
        /// The format to use to serialize TsSentDate
        /// </summary>
        public static string TsSentDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentExtraData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentExtraData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> multifattureSent = default;
            Option<bool?> tsCommunication = default;
            Option<decimal?> tsFlagTipoSpesa = default;
            Option<bool?> tsPagamentoTracciato = default;
            Option<string?> tsTipoSpesa = default;
            Option<bool?> tsOpposizione = default;
            Option<int?> tsStatus = default;
            Option<string?> tsFileId = default;
            Option<DateOnly?> tsSentDate = default;
            Option<bool?> tsFullAmount = default;
            Option<string?> importedBy = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "multifatture_sent":
                            multifattureSent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ts_communication":
                            tsCommunication = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_flag_tipo_spesa":
                            tsFlagTipoSpesa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "ts_pagamento_tracciato":
                            tsPagamentoTracciato = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_tipo_spesa":
                            tsTipoSpesa = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ts_opposizione":
                            tsOpposizione = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_status":
                            tsStatus = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ts_file_id":
                            tsFileId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ts_sent_date":
                            tsSentDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ts_full_amount":
                            tsFullAmount = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "imported_by":
                            importedBy = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentExtraData(multifattureSent, tsCommunication, tsFlagTipoSpesa, tsPagamentoTracciato, tsTipoSpesa, tsOpposizione, tsStatus, tsFileId, tsSentDate, tsFullAmount, importedBy);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentExtraData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentExtraData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentExtraData issuedDocumentExtraData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentExtraData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentExtraData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentExtraData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentExtraData issuedDocumentExtraData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentExtraData.MultifattureSentOption.IsSet)
                if (issuedDocumentExtraData.MultifattureSentOption.Value != null)
                    writer.WriteNumber("multifatture_sent", issuedDocumentExtraData.MultifattureSentOption.Value!.Value);
                else
                    writer.WriteNull("multifatture_sent");

            if (issuedDocumentExtraData.TsCommunicationOption.IsSet)
                if (issuedDocumentExtraData.TsCommunicationOption.Value != null)
                    writer.WriteBoolean("ts_communication", issuedDocumentExtraData.TsCommunicationOption.Value!.Value);
                else
                    writer.WriteNull("ts_communication");

            if (issuedDocumentExtraData.TsFlagTipoSpesaOption.IsSet)
                if (issuedDocumentExtraData.TsFlagTipoSpesaOption.Value != null)
                    writer.WriteNumber("ts_flag_tipo_spesa", issuedDocumentExtraData.TsFlagTipoSpesaOption.Value!.Value);
                else
                    writer.WriteNull("ts_flag_tipo_spesa");

            if (issuedDocumentExtraData.TsPagamentoTracciatoOption.IsSet)
                if (issuedDocumentExtraData.TsPagamentoTracciatoOption.Value != null)
                    writer.WriteBoolean("ts_pagamento_tracciato", issuedDocumentExtraData.TsPagamentoTracciatoOption.Value!.Value);
                else
                    writer.WriteNull("ts_pagamento_tracciato");

            if (issuedDocumentExtraData.TsTipoSpesaOption.IsSet)
                if (issuedDocumentExtraData.TsTipoSpesaOption.Value != null)
                    writer.WriteString("ts_tipo_spesa", issuedDocumentExtraData.TsTipoSpesa);
                else
                    writer.WriteNull("ts_tipo_spesa");

            if (issuedDocumentExtraData.TsOpposizioneOption.IsSet)
                if (issuedDocumentExtraData.TsOpposizioneOption.Value != null)
                    writer.WriteBoolean("ts_opposizione", issuedDocumentExtraData.TsOpposizioneOption.Value!.Value);
                else
                    writer.WriteNull("ts_opposizione");

            if (issuedDocumentExtraData.TsStatusOption.IsSet)
                if (issuedDocumentExtraData.TsStatusOption.Value != null)
                    writer.WriteNumber("ts_status", issuedDocumentExtraData.TsStatusOption.Value!.Value);
                else
                    writer.WriteNull("ts_status");

            if (issuedDocumentExtraData.TsFileIdOption.IsSet)
                if (issuedDocumentExtraData.TsFileIdOption.Value != null)
                    writer.WriteString("ts_file_id", issuedDocumentExtraData.TsFileId);
                else
                    writer.WriteNull("ts_file_id");

            if (issuedDocumentExtraData.TsSentDateOption.IsSet)
                if (issuedDocumentExtraData.TsSentDateOption.Value != null)
                    writer.WriteString("ts_sent_date", issuedDocumentExtraData.TsSentDateOption.Value!.Value.ToString(TsSentDateFormat));
                else
                    writer.WriteNull("ts_sent_date");

            if (issuedDocumentExtraData.TsFullAmountOption.IsSet)
                if (issuedDocumentExtraData.TsFullAmountOption.Value != null)
                    writer.WriteBoolean("ts_full_amount", issuedDocumentExtraData.TsFullAmountOption.Value!.Value);
                else
                    writer.WriteNull("ts_full_amount");

            if (issuedDocumentExtraData.ImportedByOption.IsSet)
                if (issuedDocumentExtraData.ImportedByOption.Value != null)
                    writer.WriteString("imported_by", issuedDocumentExtraData.ImportedBy);
                else
                    writer.WriteNull("imported_by");
        }
    }
}
