// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocumentItemsListItem
    /// </summary>
    [DataContract(Name = "ReceivedDocumentItemsListItem")]
    public partial class ReceivedDocumentItemsListItem : IEquatable<ReceivedDocumentItemsListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentItemsListItem" /> class.
        /// </summary>
        /// <param name="id">Received document item id.</param>
        /// <param name="productId">Received document product id.</param>
        /// <param name="code">Received document item product code.</param>
        /// <param name="name">Received document item product name.</param>
        /// <param name="measure">Received document item measure.</param>
        /// <param name="netPrice">Received document item product net price.</param>
        /// <param name="category">Received document item product category.</param>
        /// <param name="qty">Received document item quantity.</param>
        /// <param name="vat">vat.</param>
        /// <param name="stock">Received document item product number of items in stock.</param>
        public ReceivedDocumentItemsListItem(int id = default, int productId = default, string code = default, string name = default, string measure = default, decimal netPrice = default, string category = default, decimal qty = default, VatType vat = default, decimal stock = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._ProductId = productId;
            if (this.ProductId != null)
            {
                this._flagProductId = true;
            }
            this._Code = code;
            if (this.Code != null)
            {
                this._flagCode = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Measure = measure;
            if (this.Measure != null)
            {
                this._flagMeasure = true;
            }
            this._NetPrice = netPrice;
            if (this.NetPrice != null)
            {
                this._flagNetPrice = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._Qty = qty;
            if (this.Qty != null)
            {
                this._flagQty = true;
            }
            this._Vat = vat;
            if (this.Vat != null)
            {
                this._flagVat = true;
            }
            this._Stock = stock;
            if (this.Stock != null)
            {
                this._flagStock = true;
            }
        }

        /// <summary>
        /// Received document item id
        /// </summary>
        /// <value>Received document item id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Received document product id
        /// </summary>
        /// <value>Received document product id</value>
        [DataMember(Name = "product_id", EmitDefaultValue = true)]
        public int ProductId
        {
            get{ return _ProductId;}
            set
            {
                _ProductId = value;
                _flagProductId = true;
            }
        }
        private int _ProductId;
        private bool _flagProductId;

        /// <summary>
        /// Returns false as ProductId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductId()
        {
            return _flagProductId;
        }
        /// <summary>
        /// Received document item product code
        /// </summary>
        /// <value>Received document item product code</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get{ return _Code;}
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }
        private string _Code;
        private bool _flagCode;

        /// <summary>
        /// Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }
        /// <summary>
        /// Received document item product name
        /// </summary>
        /// <value>Received document item product name</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Received document item measure
        /// </summary>
        /// <value>Received document item measure</value>
        [DataMember(Name = "measure", EmitDefaultValue = true)]
        public string Measure
        {
            get{ return _Measure;}
            set
            {
                _Measure = value;
                _flagMeasure = true;
            }
        }
        private string _Measure;
        private bool _flagMeasure;

        /// <summary>
        /// Returns false as Measure should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMeasure()
        {
            return _flagMeasure;
        }
        /// <summary>
        /// Received document item product net price
        /// </summary>
        /// <value>Received document item product net price</value>
        [DataMember(Name = "net_price", EmitDefaultValue = true)]
        public decimal NetPrice
        {
            get{ return _NetPrice;}
            set
            {
                _NetPrice = value;
                _flagNetPrice = true;
            }
        }
        private decimal _NetPrice;
        private bool _flagNetPrice;

        /// <summary>
        /// Returns false as NetPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetPrice()
        {
            return _flagNetPrice;
        }
        /// <summary>
        /// Received document item product category
        /// </summary>
        /// <value>Received document item product category</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get{ return _Category;}
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// Received document item quantity
        /// </summary>
        /// <value>Received document item quantity</value>
        [DataMember(Name = "qty", EmitDefaultValue = true)]
        public decimal Qty
        {
            get{ return _Qty;}
            set
            {
                _Qty = value;
                _flagQty = true;
            }
        }
        private decimal _Qty;
        private bool _flagQty;

        /// <summary>
        /// Returns false as Qty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQty()
        {
            return _flagQty;
        }
        /// <summary>
        /// Gets or Sets Vat
        /// </summary>
        [DataMember(Name = "vat", EmitDefaultValue = true)]
        public VatType Vat
        {
            get{ return _Vat;}
            set
            {
                _Vat = value;
                _flagVat = true;
            }
        }
        private VatType _Vat;
        private bool _flagVat;

        /// <summary>
        /// Returns false as Vat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVat()
        {
            return _flagVat;
        }
        /// <summary>
        /// Received document item product number of items in stock
        /// </summary>
        /// <value>Received document item product number of items in stock</value>
        [DataMember(Name = "stock", EmitDefaultValue = true)]
        public decimal Stock
        {
            get{ return _Stock;}
            set
            {
                _Stock = value;
                _flagStock = true;
            }
        }
        private decimal _Stock;
        private bool _flagStock;

        /// <summary>
        /// Returns false as Stock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStock()
        {
            return _flagStock;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentItemsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  NetPrice: ").Append(NetPrice).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  Vat: ").Append(Vat).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceivedDocumentItemsListItem);
        }

        /// <summary>
        /// Returns true if ReceivedDocumentItemsListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocumentItemsListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocumentItemsListItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    this.ProductId.Equals(input.ProductId)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Measure == input.Measure ||
                    (this.Measure != null &&
                    this.Measure.Equals(input.Measure))
                ) && 
                (
                    this.NetPrice == input.NetPrice ||
                    this.NetPrice.Equals(input.NetPrice)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Qty == input.Qty ||
                    this.Qty.Equals(input.Qty)
                ) && 
                (
                    this.Vat == input.Vat ||
                    (this.Vat != null &&
                    this.Vat.Equals(input.Vat))
                ) && 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Measure != null)
                {
                    hashCode = (hashCode * 59) + this.Measure.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NetPrice.GetHashCode();
                if (this.Category != null)
                {
                    hashCode = (hashCode * 59) + this.Category.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Qty.GetHashCode();
                if (this.Vat != null)
                {
                    hashCode = (hashCode * 59) + this.Vat.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Stock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentItemsListItem" />
    /// </summary>
    public class ReceivedDocumentItemsListItemJsonConverter : JsonConverter<ReceivedDocumentItemsListItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocumentItemsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocumentItemsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> productId = default;
            Option<string?> code = default;
            Option<string?> name = default;
            Option<string?> measure = default;
            Option<decimal?> netPrice = default;
            Option<string?> category = default;
            Option<decimal?> qty = default;
            Option<VatType?> vat = default;
            Option<decimal?> stock = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "product_id":
                            productId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "measure":
                            measure = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "net_price":
                            netPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "category":
                            category = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "qty":
                            qty = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "vat":
                            vat = new Option<VatType?>(JsonSerializer.Deserialize<VatType>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "stock":
                            stock = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReceivedDocumentItemsListItem(id, productId, code, name, measure, netPrice, category, qty, vat, stock);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentItemsListItem receivedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocumentItemsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocumentItemsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentItemsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocumentItemsListItem receivedDocumentItemsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocumentItemsListItem.IdOption.IsSet)
                if (receivedDocumentItemsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", receivedDocumentItemsListItem.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (receivedDocumentItemsListItem.ProductIdOption.IsSet)
                if (receivedDocumentItemsListItem.ProductIdOption.Value != null)
                    writer.WriteNumber("product_id", receivedDocumentItemsListItem.ProductIdOption.Value!.Value);
                else
                    writer.WriteNull("product_id");

            if (receivedDocumentItemsListItem.CodeOption.IsSet)
                if (receivedDocumentItemsListItem.CodeOption.Value != null)
                    writer.WriteString("code", receivedDocumentItemsListItem.Code);
                else
                    writer.WriteNull("code");

            if (receivedDocumentItemsListItem.NameOption.IsSet)
                if (receivedDocumentItemsListItem.NameOption.Value != null)
                    writer.WriteString("name", receivedDocumentItemsListItem.Name);
                else
                    writer.WriteNull("name");

            if (receivedDocumentItemsListItem.MeasureOption.IsSet)
                if (receivedDocumentItemsListItem.MeasureOption.Value != null)
                    writer.WriteString("measure", receivedDocumentItemsListItem.Measure);
                else
                    writer.WriteNull("measure");

            if (receivedDocumentItemsListItem.NetPriceOption.IsSet)
                if (receivedDocumentItemsListItem.NetPriceOption.Value != null)
                    writer.WriteNumber("net_price", receivedDocumentItemsListItem.NetPriceOption.Value!.Value);
                else
                    writer.WriteNull("net_price");

            if (receivedDocumentItemsListItem.CategoryOption.IsSet)
                if (receivedDocumentItemsListItem.CategoryOption.Value != null)
                    writer.WriteString("category", receivedDocumentItemsListItem.Category);
                else
                    writer.WriteNull("category");

            if (receivedDocumentItemsListItem.QtyOption.IsSet)
                if (receivedDocumentItemsListItem.QtyOption.Value != null)
                    writer.WriteNumber("qty", receivedDocumentItemsListItem.QtyOption.Value!.Value);
                else
                    writer.WriteNull("qty");

            if (receivedDocumentItemsListItem.VatOption.IsSet)
                if (receivedDocumentItemsListItem.VatOption.Value != null)
                {
                    writer.WritePropertyName("vat");
                    JsonSerializer.Serialize(writer, receivedDocumentItemsListItem.Vat, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat");
            if (receivedDocumentItemsListItem.StockOption.IsSet)
                if (receivedDocumentItemsListItem.StockOption.Value != null)
                    writer.WriteNumber("stock", receivedDocumentItemsListItem.StockOption.Value!.Value);
                else
                    writer.WriteNull("stock");
        }
    }
}
