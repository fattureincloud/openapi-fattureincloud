// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// IssuedDocument
    /// </summary>
    [DataContract(Name = "IssuedDocument")]
    public partial class IssuedDocument : IEquatable<IssuedDocument>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public IssuedDocumentType? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private IssuedDocumentType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        /// Gets or Sets ShowTotals
        /// </summary>

        [DataMember(Name = "show_totals", EmitDefaultValue = false)]
        public ShowTotalsMode? ShowTotals
        {
            get{ return _ShowTotals;}
            set
            {
                _ShowTotals = value;
                _flagShowTotals = true;
            }
        }
        private ShowTotalsMode? _ShowTotals;
        private bool _flagShowTotals;

        /// <summary>
        /// Returns false as ShowTotals should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowTotals()
        {
            return _flagShowTotals;
        }
        /// <summary>
        /// [Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice </value>
        public enum EiStatusEnum
        {
            /// <summary>
            /// Enum Attempt for value: attempt
            /// </summary>
            Attempt = 1,

            /// <summary>
            /// Enum Missing for value: missing
            /// </summary>
            Missing = 2,

            /// <summary>
            /// Enum NotSent for value: not_sent
            /// </summary>
            NotSent = 3,

            /// <summary>
            /// Enum Sent for value: sent
            /// </summary>
            Sent = 4,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 5,

            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            Processing = 6,

            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            Error = 7,

            /// <summary>
            /// Enum Discarded for value: discarded
            /// </summary>
            Discarded = 8,

            /// <summary>
            /// Enum NotDelivered for value: not_delivered
            /// </summary>
            NotDelivered = 9,

            /// <summary>
            /// Enum Accepted for value: accepted
            /// </summary>
            Accepted = 10,

            /// <summary>
            /// Enum Rejected for value: rejected
            /// </summary>
            Rejected = 11,

            /// <summary>
            /// Enum NoResponse for value: no_response
            /// </summary>
            NoResponse = 12,

            /// <summary>
            /// Enum ManualAccepted for value: manual_accepted
            /// </summary>
            ManualAccepted = 13,

            /// <summary>
            /// Enum ManualRejected for value: manual_rejected
            /// </summary>
            ManualRejected = 14
        }

        /// <summary>
        /// Returns a <see cref="EiStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EiStatusEnum EiStatusEnumFromString(string value)
        {
            if (value.Equals("attempt"))
                return EiStatusEnum.Attempt;

            if (value.Equals("missing"))
                return EiStatusEnum.Missing;

            if (value.Equals("not_sent"))
                return EiStatusEnum.NotSent;

            if (value.Equals("sent"))
                return EiStatusEnum.Sent;

            if (value.Equals("pending"))
                return EiStatusEnum.Pending;

            if (value.Equals("processing"))
                return EiStatusEnum.Processing;

            if (value.Equals("error"))
                return EiStatusEnum.Error;

            if (value.Equals("discarded"))
                return EiStatusEnum.Discarded;

            if (value.Equals("not_delivered"))
                return EiStatusEnum.NotDelivered;

            if (value.Equals("accepted"))
                return EiStatusEnum.Accepted;

            if (value.Equals("rejected"))
                return EiStatusEnum.Rejected;

            if (value.Equals("no_response"))
                return EiStatusEnum.NoResponse;

            if (value.Equals("manual_accepted"))
                return EiStatusEnum.ManualAccepted;

            if (value.Equals("manual_rejected"))
                return EiStatusEnum.ManualRejected;

            throw new NotImplementedException($"Could not convert value to type EiStatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EiStatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EiStatusEnum? EiStatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("attempt"))
                return EiStatusEnum.Attempt;

            if (value.Equals("missing"))
                return EiStatusEnum.Missing;

            if (value.Equals("not_sent"))
                return EiStatusEnum.NotSent;

            if (value.Equals("sent"))
                return EiStatusEnum.Sent;

            if (value.Equals("pending"))
                return EiStatusEnum.Pending;

            if (value.Equals("processing"))
                return EiStatusEnum.Processing;

            if (value.Equals("error"))
                return EiStatusEnum.Error;

            if (value.Equals("discarded"))
                return EiStatusEnum.Discarded;

            if (value.Equals("not_delivered"))
                return EiStatusEnum.NotDelivered;

            if (value.Equals("accepted"))
                return EiStatusEnum.Accepted;

            if (value.Equals("rejected"))
                return EiStatusEnum.Rejected;

            if (value.Equals("no_response"))
                return EiStatusEnum.NoResponse;

            if (value.Equals("manual_accepted"))
                return EiStatusEnum.ManualAccepted;

            if (value.Equals("manual_rejected"))
                return EiStatusEnum.ManualRejected;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EiStatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? EiStatusEnumToJsonValue(EiStatusEnum? value)
        {
            if (value == null)
                return null;

            if (value == EiStatusEnum.Attempt)
                return "attempt";

            if (value == EiStatusEnum.Missing)
                return "missing";

            if (value == EiStatusEnum.NotSent)
                return "not_sent";

            if (value == EiStatusEnum.Sent)
                return "sent";

            if (value == EiStatusEnum.Pending)
                return "pending";

            if (value == EiStatusEnum.Processing)
                return "processing";

            if (value == EiStatusEnum.Error)
                return "error";

            if (value == EiStatusEnum.Discarded)
                return "discarded";

            if (value == EiStatusEnum.NotDelivered)
                return "not_delivered";

            if (value == EiStatusEnum.Accepted)
                return "accepted";

            if (value == EiStatusEnum.Rejected)
                return "rejected";

            if (value == EiStatusEnum.NoResponse)
                return "no_response";

            if (value == EiStatusEnum.ManualAccepted)
                return "manual_accepted";

            if (value == EiStatusEnum.ManualRejected)
                return "manual_rejected";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// [Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice 
        /// </summary>
        /// <value>[Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice </value>

        [DataMember(Name = "ei_status", EmitDefaultValue = true)]
        public EiStatusEnum? EiStatus
        {
            get{ return _EiStatus;}
            set
            {
                _EiStatus = value;
                _flagEiStatus = true;
            }
        }
        private EiStatusEnum? _EiStatus;
        private bool _flagEiStatus;

        /// <summary>
        /// Returns false as EiStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiStatus()
        {
            return _flagEiStatus;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocument" /> class.
        /// </summary>
        /// <param name="id">Issued document id.</param>
        /// <param name="entity">entity.</param>
        /// <param name="type">type.</param>
        /// <param name="number">Issued document number [If not specified, next number is used].</param>
        /// <param name="numeration">Issued document numeration [Not available if type&#x3D;delivery_note].</param>
        /// <param name="date">Issued document date [defaults to today&#39;s date].</param>
        /// <param name="year">Issued document year.</param>
        /// <param name="currency">currency.</param>
        /// <param name="language">language.</param>
        /// <param name="subject">Issued document subject [not shown on the PDF].</param>
        /// <param name="visibleSubject">Issued document visible subject.</param>
        /// <param name="rcCenter">Issued document revenue center [or cost center if type&#x3D;supplier_order]..</param>
        /// <param name="notes">Issued document extra notes.</param>
        /// <param name="rivalsa">Issued document \&quot;Rivalsa INPS\&quot; percentual value.</param>
        /// <param name="cassa">Issued document \&quot;Cassa previdenziale\&quot; percentual value.</param>
        /// <param name="cassaTaxable">Issued document cassa taxable percentage.</param>
        /// <param name="amountCassaTaxable">[Can be set only if cassa_taxable is NULL] Issued document cassa taxable amount.</param>
        /// <param name="cassa2">Issued document \&quot;Cassa previdenziale 2\&quot; percentual value.</param>
        /// <param name="cassa2Taxable">Issued document cassa2 taxable percentage.</param>
        /// <param name="amountCassa2Taxable">[Can be set only if cassa2_taxable is NULL] Issued document cassa2 taxable amount.</param>
        /// <param name="globalCassaTaxable">Issued document global cassa taxable percentage.</param>
        /// <param name="amountGlobalCassaTaxable">[Can be set only if global_cassa_taxable is NULL] Issued document global cassa taxable amount.</param>
        /// <param name="withholdingTax">Issued document withholding tax (ritenuta d&#39;acconto) percentual value.</param>
        /// <param name="withholdingTaxTaxable">Issued document withholding tax taxable (imponibile) percentual value.</param>
        /// <param name="otherWithholdingTax">Issued document other withholding tax (altra ritenuta) percentual value.</param>
        /// <param name="stampDuty">Issued document stamp duty value [0 if not present].</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="useSplitPayment">Issued document uses split payment.</param>
        /// <param name="useGrossPrices">Issued document uses gross prices.</param>
        /// <param name="eInvoice">Issued document is an e-invoice..</param>
        /// <param name="eiData">eiData.</param>
        /// <param name="eiCassaType">E-invoice cassa type.</param>
        /// <param name="eiCassa2Type">E-invoice cassa2 type.</param>
        /// <param name="eiWithholdingTaxCausal">E-invoice withholding tax causal.</param>
        /// <param name="eiOtherWithholdingTaxType">E-invoice other withholding tax type.</param>
        /// <param name="eiOtherWithholdingTaxCausal">E-invoice other withholding tax causal.</param>
        /// <param name="itemsList">itemsList.</param>
        /// <param name="paymentsList">paymentsList.</param>
        /// <param name="template">template.</param>
        /// <param name="deliveryNoteTemplate">deliveryNoteTemplate.</param>
        /// <param name="accInvTemplate">accInvTemplate.</param>
        /// <param name="hMargins">Issued document PDF horizontal margins.</param>
        /// <param name="vMargins">Issued document PDF vertical margins.</param>
        /// <param name="showPayments">Show the expiration dates of the payments on the document.</param>
        /// <param name="showPaymentMethod">Show the payment method details on the document.</param>
        /// <param name="showTotals">showTotals.</param>
        /// <param name="showNotificationButton">Show notification button in the PDF.</param>
        /// <param name="showTspayButton">Show ts pay button in the PDF.</param>
        /// <param name="deliveryNote">Issued document has delivery note.</param>
        /// <param name="accompanyingInvoice">Issued document has an accompanying invoice.</param>
        /// <param name="dnNumber">Issued document attached delivery note number.</param>
        /// <param name="dnDate">Issued document attached delivery note date.</param>
        /// <param name="dnAiPackagesNumber">Issued document attached delivery note number of packages.</param>
        /// <param name="dnAiWeight">Issued document attached delivery note package weight.</param>
        /// <param name="dnAiCausal">Issued document attached delivery note causal.</param>
        /// <param name="dnAiDestination">Issued document attached delivery note destination.</param>
        /// <param name="dnAiTransporter">Issued document attached delivery note transporter.</param>
        /// <param name="dnAiNotes">Issued document attached delivery note notes.</param>
        /// <param name="isMarked">Issued document is marked.</param>
        /// <param name="amountDueDiscount">Issued document amount due discount.</param>
        /// <param name="amountRivalsaTaxable">Issued document taxable rivalsa amount.</param>
        /// <param name="amountWithholdingTaxTaxable">Issued document taxable withholding tax amount.</param>
        /// <param name="amountOtherWithholdingTaxTaxable">Issued document taxable other withholding tax amount.</param>
        /// <param name="amountEnasarcoTaxable">Issued document taxable enasarco amount.</param>
        /// <param name="extraData">extraData.</param>
        /// <param name="seenDate">Issued document seen date.</param>
        /// <param name="nextDueDate">Issued document date of the next not paid payment.</param>
        /// <param name="url">[Temporary] [Read Only] Issued document url of the document PDF file.</param>
        /// <param name="dnUrl">[Temporary] [Read Only] Issued document url of the attached delivery note PDF file.</param>
        /// <param name="aiUrl">[Temporary] [Read Only] Issued document url of the accompanying invoice PDF file.</param>
        /// <param name="attachmentToken">[Write Only] Issued document attachment token returned by POST /issued_documents/attachment.</param>
        /// <param name="eiRaw">Issued document advanced raw attributes for e-invoices.</param>
        /// <param name="eiStatus">[Read only] Status of the e-invoice.   * **attempt** - We are trying to send the invoice, please wait up to 2 hours   * **missing** - The invoice is missing   * **not_sent** - The invoice has yet to be sent   * **sent** - The invoice was sent   * **pending** - The checks for the digital signature and sending are in progress   * **processing** - The SDI is delivering the invoice to the customer   * **error** - An error occurred while handling the invoice, please try to resend it or contact support   * **discarded** - The invoice has been rejected by the SDI, so it must be corrected and re-sent   * **not_delivered** - The SDI was unable to deliver the invoice   * **accepted** - The customer accepted the invoice   * **rejected** - The customer rejected the invoice, so it must be corrected   * **no_response** - A response has not yet been received whithin the deadline, contact the customer to ascertain the status of the invoice   * **manual_accepted** - The customer accepted the invoice   * **manual_rejected** - The customer rejected the invoice .</param>
        /// <param name="priceListId">Price list id.</param>
        /// <param name="locked">Issued Document can&#39;t be edited.</param>
        /// <param name="createdAt">Issued document creation date.</param>
        /// <param name="updatedAt">Issued document last update date.</param>
        public IssuedDocument(int id = default, Entity entity = default, IssuedDocumentType? type = default, int number = default, string numeration = default, DateOnly date = default, int year = default, Currency currency = default, Language language = default, string subject = default, string visibleSubject = default, string rcCenter = default, string notes = default, decimal rivalsa = default, decimal cassa = default, decimal cassaTaxable = default, decimal amountCassaTaxable = default, decimal cassa2 = default, decimal cassa2Taxable = default, decimal amountCassa2Taxable = default, decimal globalCassaTaxable = default, decimal amountGlobalCassaTaxable = default, decimal withholdingTax = default, decimal withholdingTaxTaxable = default, decimal otherWithholdingTax = default, decimal stampDuty = default, PaymentMethod paymentMethod = default, bool useSplitPayment = default, bool useGrossPrices = default, bool eInvoice = default, IssuedDocumentEiData eiData = default, string eiCassaType = default, string eiCassa2Type = default, string eiWithholdingTaxCausal = default, string eiOtherWithholdingTaxType = default, string eiOtherWithholdingTaxCausal = default, List<IssuedDocumentItemsListItem> itemsList = default, List<IssuedDocumentPaymentsListItem> paymentsList = default, DocumentTemplate template = default, DocumentTemplate deliveryNoteTemplate = default, DocumentTemplate accInvTemplate = default, int hMargins = default, int vMargins = default, bool showPayments = default, bool showPaymentMethod = default, ShowTotalsMode? showTotals = default, bool showNotificationButton = default, bool showTspayButton = default, bool deliveryNote = default, bool accompanyingInvoice = default, int dnNumber = default, DateOnly dnDate = default, string dnAiPackagesNumber = default, string dnAiWeight = default, string dnAiCausal = default, string dnAiDestination = default, string dnAiTransporter = default, string dnAiNotes = default, bool isMarked = default, decimal amountDueDiscount = default, decimal amountRivalsaTaxable = default, decimal amountWithholdingTaxTaxable = default, decimal amountOtherWithholdingTaxTaxable = default, decimal amountEnasarcoTaxable = default, IssuedDocumentExtraData extraData = default, DateOnly seenDate = default, DateOnly nextDueDate = default, string url = default, string dnUrl = default, string aiUrl = default, string attachmentToken = default, Object eiRaw = default, EiStatusEnum? eiStatus = default, string priceListId = default, bool locked = default, string createdAt = default, string updatedAt = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Entity = entity;
            if (this.Entity != null)
            {
                this._flagEntity = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Number = number;
            if (this.Number != null)
            {
                this._flagNumber = true;
            }
            this._Numeration = numeration;
            if (this.Numeration != null)
            {
                this._flagNumeration = true;
            }
            this._Date = date;
            if (this.Date != null)
            {
                this._flagDate = true;
            }
            this._Year = year;
            if (this.Year != null)
            {
                this._flagYear = true;
            }
            this._Currency = currency;
            if (this.Currency != null)
            {
                this._flagCurrency = true;
            }
            this._Language = language;
            if (this.Language != null)
            {
                this._flagLanguage = true;
            }
            this._Subject = subject;
            if (this.Subject != null)
            {
                this._flagSubject = true;
            }
            this._VisibleSubject = visibleSubject;
            if (this.VisibleSubject != null)
            {
                this._flagVisibleSubject = true;
            }
            this._RcCenter = rcCenter;
            if (this.RcCenter != null)
            {
                this._flagRcCenter = true;
            }
            this._Notes = notes;
            if (this.Notes != null)
            {
                this._flagNotes = true;
            }
            this._Rivalsa = rivalsa;
            if (this.Rivalsa != null)
            {
                this._flagRivalsa = true;
            }
            this._Cassa = cassa;
            if (this.Cassa != null)
            {
                this._flagCassa = true;
            }
            this._CassaTaxable = cassaTaxable;
            if (this.CassaTaxable != null)
            {
                this._flagCassaTaxable = true;
            }
            this._AmountCassaTaxable = amountCassaTaxable;
            if (this.AmountCassaTaxable != null)
            {
                this._flagAmountCassaTaxable = true;
            }
            this._Cassa2 = cassa2;
            if (this.Cassa2 != null)
            {
                this._flagCassa2 = true;
            }
            this._Cassa2Taxable = cassa2Taxable;
            if (this.Cassa2Taxable != null)
            {
                this._flagCassa2Taxable = true;
            }
            this._AmountCassa2Taxable = amountCassa2Taxable;
            if (this.AmountCassa2Taxable != null)
            {
                this._flagAmountCassa2Taxable = true;
            }
            this._GlobalCassaTaxable = globalCassaTaxable;
            if (this.GlobalCassaTaxable != null)
            {
                this._flagGlobalCassaTaxable = true;
            }
            this._AmountGlobalCassaTaxable = amountGlobalCassaTaxable;
            if (this.AmountGlobalCassaTaxable != null)
            {
                this._flagAmountGlobalCassaTaxable = true;
            }
            this._WithholdingTax = withholdingTax;
            if (this.WithholdingTax != null)
            {
                this._flagWithholdingTax = true;
            }
            this._WithholdingTaxTaxable = withholdingTaxTaxable;
            if (this.WithholdingTaxTaxable != null)
            {
                this._flagWithholdingTaxTaxable = true;
            }
            this._OtherWithholdingTax = otherWithholdingTax;
            if (this.OtherWithholdingTax != null)
            {
                this._flagOtherWithholdingTax = true;
            }
            this._StampDuty = stampDuty;
            if (this.StampDuty != null)
            {
                this._flagStampDuty = true;
            }
            this._PaymentMethod = paymentMethod;
            if (this.PaymentMethod != null)
            {
                this._flagPaymentMethod = true;
            }
            this._UseSplitPayment = useSplitPayment;
            if (this.UseSplitPayment != null)
            {
                this._flagUseSplitPayment = true;
            }
            this._UseGrossPrices = useGrossPrices;
            if (this.UseGrossPrices != null)
            {
                this._flagUseGrossPrices = true;
            }
            this._EInvoice = eInvoice;
            if (this.EInvoice != null)
            {
                this._flagEInvoice = true;
            }
            this._EiData = eiData;
            if (this.EiData != null)
            {
                this._flagEiData = true;
            }
            this._EiCassaType = eiCassaType;
            if (this.EiCassaType != null)
            {
                this._flagEiCassaType = true;
            }
            this._EiCassa2Type = eiCassa2Type;
            if (this.EiCassa2Type != null)
            {
                this._flagEiCassa2Type = true;
            }
            this._EiWithholdingTaxCausal = eiWithholdingTaxCausal;
            if (this.EiWithholdingTaxCausal != null)
            {
                this._flagEiWithholdingTaxCausal = true;
            }
            this._EiOtherWithholdingTaxType = eiOtherWithholdingTaxType;
            if (this.EiOtherWithholdingTaxType != null)
            {
                this._flagEiOtherWithholdingTaxType = true;
            }
            this._EiOtherWithholdingTaxCausal = eiOtherWithholdingTaxCausal;
            if (this.EiOtherWithholdingTaxCausal != null)
            {
                this._flagEiOtherWithholdingTaxCausal = true;
            }
            this._ItemsList = itemsList;
            if (this.ItemsList != null)
            {
                this._flagItemsList = true;
            }
            this._PaymentsList = paymentsList;
            if (this.PaymentsList != null)
            {
                this._flagPaymentsList = true;
            }
            this._Template = template;
            if (this.Template != null)
            {
                this._flagTemplate = true;
            }
            this._DeliveryNoteTemplate = deliveryNoteTemplate;
            if (this.DeliveryNoteTemplate != null)
            {
                this._flagDeliveryNoteTemplate = true;
            }
            this._AccInvTemplate = accInvTemplate;
            if (this.AccInvTemplate != null)
            {
                this._flagAccInvTemplate = true;
            }
            this._HMargins = hMargins;
            if (this.HMargins != null)
            {
                this._flagHMargins = true;
            }
            this._VMargins = vMargins;
            if (this.VMargins != null)
            {
                this._flagVMargins = true;
            }
            this._ShowPayments = showPayments;
            if (this.ShowPayments != null)
            {
                this._flagShowPayments = true;
            }
            this._ShowPaymentMethod = showPaymentMethod;
            if (this.ShowPaymentMethod != null)
            {
                this._flagShowPaymentMethod = true;
            }
            this._ShowTotals = showTotals;
            if (this.ShowTotals != null)
            {
                this._flagShowTotals = true;
            }
            this._ShowNotificationButton = showNotificationButton;
            if (this.ShowNotificationButton != null)
            {
                this._flagShowNotificationButton = true;
            }
            this._ShowTspayButton = showTspayButton;
            if (this.ShowTspayButton != null)
            {
                this._flagShowTspayButton = true;
            }
            this._DeliveryNote = deliveryNote;
            if (this.DeliveryNote != null)
            {
                this._flagDeliveryNote = true;
            }
            this._AccompanyingInvoice = accompanyingInvoice;
            if (this.AccompanyingInvoice != null)
            {
                this._flagAccompanyingInvoice = true;
            }
            this._DnNumber = dnNumber;
            if (this.DnNumber != null)
            {
                this._flagDnNumber = true;
            }
            this._DnDate = dnDate;
            if (this.DnDate != null)
            {
                this._flagDnDate = true;
            }
            this._DnAiPackagesNumber = dnAiPackagesNumber;
            if (this.DnAiPackagesNumber != null)
            {
                this._flagDnAiPackagesNumber = true;
            }
            this._DnAiWeight = dnAiWeight;
            if (this.DnAiWeight != null)
            {
                this._flagDnAiWeight = true;
            }
            this._DnAiCausal = dnAiCausal;
            if (this.DnAiCausal != null)
            {
                this._flagDnAiCausal = true;
            }
            this._DnAiDestination = dnAiDestination;
            if (this.DnAiDestination != null)
            {
                this._flagDnAiDestination = true;
            }
            this._DnAiTransporter = dnAiTransporter;
            if (this.DnAiTransporter != null)
            {
                this._flagDnAiTransporter = true;
            }
            this._DnAiNotes = dnAiNotes;
            if (this.DnAiNotes != null)
            {
                this._flagDnAiNotes = true;
            }
            this._IsMarked = isMarked;
            if (this.IsMarked != null)
            {
                this._flagIsMarked = true;
            }
            this._AmountDueDiscount = amountDueDiscount;
            if (this.AmountDueDiscount != null)
            {
                this._flagAmountDueDiscount = true;
            }
            this._AmountRivalsaTaxable = amountRivalsaTaxable;
            if (this.AmountRivalsaTaxable != null)
            {
                this._flagAmountRivalsaTaxable = true;
            }
            this._AmountWithholdingTaxTaxable = amountWithholdingTaxTaxable;
            if (this.AmountWithholdingTaxTaxable != null)
            {
                this._flagAmountWithholdingTaxTaxable = true;
            }
            this._AmountOtherWithholdingTaxTaxable = amountOtherWithholdingTaxTaxable;
            if (this.AmountOtherWithholdingTaxTaxable != null)
            {
                this._flagAmountOtherWithholdingTaxTaxable = true;
            }
            this._AmountEnasarcoTaxable = amountEnasarcoTaxable;
            if (this.AmountEnasarcoTaxable != null)
            {
                this._flagAmountEnasarcoTaxable = true;
            }
            this._ExtraData = extraData;
            if (this.ExtraData != null)
            {
                this._flagExtraData = true;
            }
            this._SeenDate = seenDate;
            if (this.SeenDate != null)
            {
                this._flagSeenDate = true;
            }
            this._NextDueDate = nextDueDate;
            if (this.NextDueDate != null)
            {
                this._flagNextDueDate = true;
            }
            this._Url = url;
            if (this.Url != null)
            {
                this._flagUrl = true;
            }
            this._DnUrl = dnUrl;
            if (this.DnUrl != null)
            {
                this._flagDnUrl = true;
            }
            this._AiUrl = aiUrl;
            if (this.AiUrl != null)
            {
                this._flagAiUrl = true;
            }
            this._AttachmentToken = attachmentToken;
            if (this.AttachmentToken != null)
            {
                this._flagAttachmentToken = true;
            }
            this._EiRaw = eiRaw;
            if (this.EiRaw != null)
            {
                this._flagEiRaw = true;
            }
            this._EiStatus = eiStatus;
            if (this.EiStatus != null)
            {
                this._flagEiStatus = true;
            }
            this._PriceListId = priceListId;
            if (this.PriceListId != null)
            {
                this._flagPriceListId = true;
            }
            this._Locked = locked;
            if (this.Locked != null)
            {
                this._flagLocked = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Issued document id
        /// </summary>
        /// <value>Issued document id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets Entity
        /// </summary>
        [DataMember(Name = "entity", EmitDefaultValue = false)]
        public Entity Entity
        {
            get{ return _Entity;}
            set
            {
                _Entity = value;
                _flagEntity = true;
            }
        }
        private Entity _Entity;
        private bool _flagEntity;

        /// <summary>
        /// Returns false as Entity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEntity()
        {
            return _flagEntity;
        }
        /// <summary>
        /// Issued document number [If not specified, next number is used]
        /// </summary>
        /// <value>Issued document number [If not specified, next number is used]</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "number", EmitDefaultValue = true)]
        public int Number
        {
            get{ return _Number;}
            set
            {
                _Number = value;
                _flagNumber = true;
            }
        }
        private int _Number;
        private bool _flagNumber;

        /// <summary>
        /// Returns false as Number should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumber()
        {
            return _flagNumber;
        }
        /// <summary>
        /// Issued document numeration [Not available if type&#x3D;delivery_note]
        /// </summary>
        /// <value>Issued document numeration [Not available if type&#x3D;delivery_note]</value>
        /*
        <example>/A</example>
        */
        [DataMember(Name = "numeration", EmitDefaultValue = true)]
        public string Numeration
        {
            get{ return _Numeration;}
            set
            {
                _Numeration = value;
                _flagNumeration = true;
            }
        }
        private string _Numeration;
        private bool _flagNumeration;

        /// <summary>
        /// Returns false as Numeration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumeration()
        {
            return _flagNumeration;
        }
        /// <summary>
        /// Issued document date [defaults to today&#39;s date]
        /// </summary>
        /// <value>Issued document date [defaults to today&#39;s date]</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateOnly Date
        {
            get{ return _Date;}
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }
        private DateOnly _Date;
        private bool _flagDate;

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }
        /// <summary>
        /// Issued document year
        /// </summary>
        /// <value>Issued document year</value>
        [DataMember(Name = "year", EmitDefaultValue = true)]
        public int Year
        {
            get{ return _Year;}
            set
            {
                _Year = value;
                _flagYear = true;
            }
        }
        private int _Year;
        private bool _flagYear;

        /// <summary>
        /// Returns false as Year should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeYear()
        {
            return _flagYear;
        }
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency
        {
            get{ return _Currency;}
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }
        private Currency _Currency;
        private bool _flagCurrency;

        /// <summary>
        /// Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }
        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public Language Language
        {
            get{ return _Language;}
            set
            {
                _Language = value;
                _flagLanguage = true;
            }
        }
        private Language _Language;
        private bool _flagLanguage;

        /// <summary>
        /// Returns false as Language should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLanguage()
        {
            return _flagLanguage;
        }
        /// <summary>
        /// Issued document subject [not shown on the PDF]
        /// </summary>
        /// <value>Issued document subject [not shown on the PDF]</value>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public string Subject
        {
            get{ return _Subject;}
            set
            {
                _Subject = value;
                _flagSubject = true;
            }
        }
        private string _Subject;
        private bool _flagSubject;

        /// <summary>
        /// Returns false as Subject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubject()
        {
            return _flagSubject;
        }
        /// <summary>
        /// Issued document visible subject
        /// </summary>
        /// <value>Issued document visible subject</value>
        [DataMember(Name = "visible_subject", EmitDefaultValue = true)]
        public string VisibleSubject
        {
            get{ return _VisibleSubject;}
            set
            {
                _VisibleSubject = value;
                _flagVisibleSubject = true;
            }
        }
        private string _VisibleSubject;
        private bool _flagVisibleSubject;

        /// <summary>
        /// Returns false as VisibleSubject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVisibleSubject()
        {
            return _flagVisibleSubject;
        }
        /// <summary>
        /// Issued document revenue center [or cost center if type&#x3D;supplier_order].
        /// </summary>
        /// <value>Issued document revenue center [or cost center if type&#x3D;supplier_order].</value>
        [DataMember(Name = "rc_center", EmitDefaultValue = true)]
        public string RcCenter
        {
            get{ return _RcCenter;}
            set
            {
                _RcCenter = value;
                _flagRcCenter = true;
            }
        }
        private string _RcCenter;
        private bool _flagRcCenter;

        /// <summary>
        /// Returns false as RcCenter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRcCenter()
        {
            return _flagRcCenter;
        }
        /// <summary>
        /// Issued document extra notes
        /// </summary>
        /// <value>Issued document extra notes</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get{ return _Notes;}
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }
        private string _Notes;
        private bool _flagNotes;

        /// <summary>
        /// Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }
        /// <summary>
        /// Issued document \&quot;Rivalsa INPS\&quot; percentual value
        /// </summary>
        /// <value>Issued document \&quot;Rivalsa INPS\&quot; percentual value</value>
        [DataMember(Name = "rivalsa", EmitDefaultValue = true)]
        public decimal Rivalsa
        {
            get{ return _Rivalsa;}
            set
            {
                _Rivalsa = value;
                _flagRivalsa = true;
            }
        }
        private decimal _Rivalsa;
        private bool _flagRivalsa;

        /// <summary>
        /// Returns false as Rivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRivalsa()
        {
            return _flagRivalsa;
        }
        /// <summary>
        /// Issued document \&quot;Cassa previdenziale\&quot; percentual value
        /// </summary>
        /// <value>Issued document \&quot;Cassa previdenziale\&quot; percentual value</value>
        [DataMember(Name = "cassa", EmitDefaultValue = true)]
        public decimal Cassa
        {
            get{ return _Cassa;}
            set
            {
                _Cassa = value;
                _flagCassa = true;
            }
        }
        private decimal _Cassa;
        private bool _flagCassa;

        /// <summary>
        /// Returns false as Cassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa()
        {
            return _flagCassa;
        }
        /// <summary>
        /// [Read Only] Issued document cassa amount.
        /// </summary>
        /// <value>[Read Only] Issued document cassa amount.</value>
        [DataMember(Name = "amount_cassa", EmitDefaultValue = true)]
        public decimal AmountCassa { get; private set; }

        /// <summary>
        /// Returns false as AmountCassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa()
        {
            return false;
        }
        /// <summary>
        /// Issued document cassa taxable percentage
        /// </summary>
        /// <value>Issued document cassa taxable percentage</value>
        [DataMember(Name = "cassa_taxable", EmitDefaultValue = true)]
        public decimal CassaTaxable
        {
            get{ return _CassaTaxable;}
            set
            {
                _CassaTaxable = value;
                _flagCassaTaxable = true;
            }
        }
        private decimal _CassaTaxable;
        private bool _flagCassaTaxable;

        /// <summary>
        /// Returns false as CassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassaTaxable()
        {
            return _flagCassaTaxable;
        }
        /// <summary>
        /// [Can be set only if cassa_taxable is NULL] Issued document cassa taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa_taxable is NULL] Issued document cassa taxable amount</value>
        [DataMember(Name = "amount_cassa_taxable", EmitDefaultValue = true)]
        public decimal AmountCassaTaxable
        {
            get{ return _AmountCassaTaxable;}
            set
            {
                _AmountCassaTaxable = value;
                _flagAmountCassaTaxable = true;
            }
        }
        private decimal _AmountCassaTaxable;
        private bool _flagAmountCassaTaxable;

        /// <summary>
        /// Returns false as AmountCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassaTaxable()
        {
            return _flagAmountCassaTaxable;
        }
        /// <summary>
        /// Issued document \&quot;Cassa previdenziale 2\&quot; percentual value
        /// </summary>
        /// <value>Issued document \&quot;Cassa previdenziale 2\&quot; percentual value</value>
        [DataMember(Name = "cassa2", EmitDefaultValue = true)]
        public decimal Cassa2
        {
            get{ return _Cassa2;}
            set
            {
                _Cassa2 = value;
                _flagCassa2 = true;
            }
        }
        private decimal _Cassa2;
        private bool _flagCassa2;

        /// <summary>
        /// Returns false as Cassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa2()
        {
            return _flagCassa2;
        }
        /// <summary>
        /// [Read Only] Issued document cassa2 amount
        /// </summary>
        /// <value>[Read Only] Issued document cassa2 amount</value>
        [DataMember(Name = "amount_cassa2", EmitDefaultValue = true)]
        public decimal AmountCassa2 { get; private set; }

        /// <summary>
        /// Returns false as AmountCassa2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa2()
        {
            return false;
        }
        /// <summary>
        /// Issued document cassa2 taxable percentage
        /// </summary>
        /// <value>Issued document cassa2 taxable percentage</value>
        [DataMember(Name = "cassa2_taxable", EmitDefaultValue = true)]
        public decimal Cassa2Taxable
        {
            get{ return _Cassa2Taxable;}
            set
            {
                _Cassa2Taxable = value;
                _flagCassa2Taxable = true;
            }
        }
        private decimal _Cassa2Taxable;
        private bool _flagCassa2Taxable;

        /// <summary>
        /// Returns false as Cassa2Taxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa2Taxable()
        {
            return _flagCassa2Taxable;
        }
        /// <summary>
        /// [Can be set only if cassa2_taxable is NULL] Issued document cassa2 taxable amount
        /// </summary>
        /// <value>[Can be set only if cassa2_taxable is NULL] Issued document cassa2 taxable amount</value>
        [DataMember(Name = "amount_cassa2_taxable", EmitDefaultValue = true)]
        public decimal AmountCassa2Taxable
        {
            get{ return _AmountCassa2Taxable;}
            set
            {
                _AmountCassa2Taxable = value;
                _flagAmountCassa2Taxable = true;
            }
        }
        private decimal _AmountCassa2Taxable;
        private bool _flagAmountCassa2Taxable;

        /// <summary>
        /// Returns false as AmountCassa2Taxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountCassa2Taxable()
        {
            return _flagAmountCassa2Taxable;
        }
        /// <summary>
        /// Issued document global cassa taxable percentage
        /// </summary>
        /// <value>Issued document global cassa taxable percentage</value>
        [DataMember(Name = "global_cassa_taxable", EmitDefaultValue = true)]
        public decimal GlobalCassaTaxable
        {
            get{ return _GlobalCassaTaxable;}
            set
            {
                _GlobalCassaTaxable = value;
                _flagGlobalCassaTaxable = true;
            }
        }
        private decimal _GlobalCassaTaxable;
        private bool _flagGlobalCassaTaxable;

        /// <summary>
        /// Returns false as GlobalCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGlobalCassaTaxable()
        {
            return _flagGlobalCassaTaxable;
        }
        /// <summary>
        /// [Can be set only if global_cassa_taxable is NULL] Issued document global cassa taxable amount
        /// </summary>
        /// <value>[Can be set only if global_cassa_taxable is NULL] Issued document global cassa taxable amount</value>
        [DataMember(Name = "amount_global_cassa_taxable", EmitDefaultValue = true)]
        public decimal AmountGlobalCassaTaxable
        {
            get{ return _AmountGlobalCassaTaxable;}
            set
            {
                _AmountGlobalCassaTaxable = value;
                _flagAmountGlobalCassaTaxable = true;
            }
        }
        private decimal _AmountGlobalCassaTaxable;
        private bool _flagAmountGlobalCassaTaxable;

        /// <summary>
        /// Returns false as AmountGlobalCassaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGlobalCassaTaxable()
        {
            return _flagAmountGlobalCassaTaxable;
        }
        /// <summary>
        /// Issued document withholding tax (ritenuta d&#39;acconto) percentual value
        /// </summary>
        /// <value>Issued document withholding tax (ritenuta d&#39;acconto) percentual value</value>
        [DataMember(Name = "withholding_tax", EmitDefaultValue = true)]
        public decimal WithholdingTax
        {
            get{ return _WithholdingTax;}
            set
            {
                _WithholdingTax = value;
                _flagWithholdingTax = true;
            }
        }
        private decimal _WithholdingTax;
        private bool _flagWithholdingTax;

        /// <summary>
        /// Returns false as WithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTax()
        {
            return _flagWithholdingTax;
        }
        /// <summary>
        /// Issued document withholding tax taxable (imponibile) percentual value
        /// </summary>
        /// <value>Issued document withholding tax taxable (imponibile) percentual value</value>
        [DataMember(Name = "withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal WithholdingTaxTaxable
        {
            get{ return _WithholdingTaxTaxable;}
            set
            {
                _WithholdingTaxTaxable = value;
                _flagWithholdingTaxTaxable = true;
            }
        }
        private decimal _WithholdingTaxTaxable;
        private bool _flagWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as WithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTaxTaxable()
        {
            return _flagWithholdingTaxTaxable;
        }
        /// <summary>
        /// Issued document other withholding tax (altra ritenuta) percentual value
        /// </summary>
        /// <value>Issued document other withholding tax (altra ritenuta) percentual value</value>
        [DataMember(Name = "other_withholding_tax", EmitDefaultValue = true)]
        public decimal OtherWithholdingTax
        {
            get{ return _OtherWithholdingTax;}
            set
            {
                _OtherWithholdingTax = value;
                _flagOtherWithholdingTax = true;
            }
        }
        private decimal _OtherWithholdingTax;
        private bool _flagOtherWithholdingTax;

        /// <summary>
        /// Returns false as OtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOtherWithholdingTax()
        {
            return _flagOtherWithholdingTax;
        }
        /// <summary>
        /// Issued document stamp duty value [0 if not present]
        /// </summary>
        /// <value>Issued document stamp duty value [0 if not present]</value>
        [DataMember(Name = "stamp_duty", EmitDefaultValue = true)]
        public decimal StampDuty
        {
            get{ return _StampDuty;}
            set
            {
                _StampDuty = value;
                _flagStampDuty = true;
            }
        }
        private decimal _StampDuty;
        private bool _flagStampDuty;

        /// <summary>
        /// Returns false as StampDuty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStampDuty()
        {
            return _flagStampDuty;
        }
        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod
        {
            get{ return _PaymentMethod;}
            set
            {
                _PaymentMethod = value;
                _flagPaymentMethod = true;
            }
        }
        private PaymentMethod _PaymentMethod;
        private bool _flagPaymentMethod;

        /// <summary>
        /// Returns false as PaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethod()
        {
            return _flagPaymentMethod;
        }
        /// <summary>
        /// Issued document uses split payment
        /// </summary>
        /// <value>Issued document uses split payment</value>
        [DataMember(Name = "use_split_payment", EmitDefaultValue = true)]
        public bool UseSplitPayment
        {
            get{ return _UseSplitPayment;}
            set
            {
                _UseSplitPayment = value;
                _flagUseSplitPayment = true;
            }
        }
        private bool _UseSplitPayment;
        private bool _flagUseSplitPayment;

        /// <summary>
        /// Returns false as UseSplitPayment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseSplitPayment()
        {
            return _flagUseSplitPayment;
        }
        /// <summary>
        /// Issued document uses gross prices
        /// </summary>
        /// <value>Issued document uses gross prices</value>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool UseGrossPrices
        {
            get{ return _UseGrossPrices;}
            set
            {
                _UseGrossPrices = value;
                _flagUseGrossPrices = true;
            }
        }
        private bool _UseGrossPrices;
        private bool _flagUseGrossPrices;

        /// <summary>
        /// Returns false as UseGrossPrices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrices()
        {
            return _flagUseGrossPrices;
        }
        /// <summary>
        /// Issued document is an e-invoice.
        /// </summary>
        /// <value>Issued document is an e-invoice.</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool EInvoice
        {
            get{ return _EInvoice;}
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }
        private bool _EInvoice;
        private bool _flagEInvoice;

        /// <summary>
        /// Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }
        /// <summary>
        /// Gets or Sets EiData
        /// </summary>
        [DataMember(Name = "ei_data", EmitDefaultValue = true)]
        public IssuedDocumentEiData EiData
        {
            get{ return _EiData;}
            set
            {
                _EiData = value;
                _flagEiData = true;
            }
        }
        private IssuedDocumentEiData _EiData;
        private bool _flagEiData;

        /// <summary>
        /// Returns false as EiData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiData()
        {
            return _flagEiData;
        }
        /// <summary>
        /// E-invoice cassa type
        /// </summary>
        /// <value>E-invoice cassa type</value>
        [DataMember(Name = "ei_cassa_type", EmitDefaultValue = true)]
        public string EiCassaType
        {
            get{ return _EiCassaType;}
            set
            {
                _EiCassaType = value;
                _flagEiCassaType = true;
            }
        }
        private string _EiCassaType;
        private bool _flagEiCassaType;

        /// <summary>
        /// Returns false as EiCassaType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCassaType()
        {
            return _flagEiCassaType;
        }
        /// <summary>
        /// E-invoice cassa2 type
        /// </summary>
        /// <value>E-invoice cassa2 type</value>
        [DataMember(Name = "ei_cassa2_type", EmitDefaultValue = true)]
        public string EiCassa2Type
        {
            get{ return _EiCassa2Type;}
            set
            {
                _EiCassa2Type = value;
                _flagEiCassa2Type = true;
            }
        }
        private string _EiCassa2Type;
        private bool _flagEiCassa2Type;

        /// <summary>
        /// Returns false as EiCassa2Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiCassa2Type()
        {
            return _flagEiCassa2Type;
        }
        /// <summary>
        /// E-invoice withholding tax causal
        /// </summary>
        /// <value>E-invoice withholding tax causal</value>
        [DataMember(Name = "ei_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiWithholdingTaxCausal
        {
            get{ return _EiWithholdingTaxCausal;}
            set
            {
                _EiWithholdingTaxCausal = value;
                _flagEiWithholdingTaxCausal = true;
            }
        }
        private string _EiWithholdingTaxCausal;
        private bool _flagEiWithholdingTaxCausal;

        /// <summary>
        /// Returns false as EiWithholdingTaxCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiWithholdingTaxCausal()
        {
            return _flagEiWithholdingTaxCausal;
        }
        /// <summary>
        /// E-invoice other withholding tax type
        /// </summary>
        /// <value>E-invoice other withholding tax type</value>
        [DataMember(Name = "ei_other_withholding_tax_type", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxType
        {
            get{ return _EiOtherWithholdingTaxType;}
            set
            {
                _EiOtherWithholdingTaxType = value;
                _flagEiOtherWithholdingTaxType = true;
            }
        }
        private string _EiOtherWithholdingTaxType;
        private bool _flagEiOtherWithholdingTaxType;

        /// <summary>
        /// Returns false as EiOtherWithholdingTaxType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiOtherWithholdingTaxType()
        {
            return _flagEiOtherWithholdingTaxType;
        }
        /// <summary>
        /// E-invoice other withholding tax causal
        /// </summary>
        /// <value>E-invoice other withholding tax causal</value>
        [DataMember(Name = "ei_other_withholding_tax_causal", EmitDefaultValue = true)]
        public string EiOtherWithholdingTaxCausal
        {
            get{ return _EiOtherWithholdingTaxCausal;}
            set
            {
                _EiOtherWithholdingTaxCausal = value;
                _flagEiOtherWithholdingTaxCausal = true;
            }
        }
        private string _EiOtherWithholdingTaxCausal;
        private bool _flagEiOtherWithholdingTaxCausal;

        /// <summary>
        /// Returns false as EiOtherWithholdingTaxCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiOtherWithholdingTaxCausal()
        {
            return _flagEiOtherWithholdingTaxCausal;
        }
        /// <summary>
        /// Gets or Sets ItemsList
        /// </summary>
        [DataMember(Name = "items_list", EmitDefaultValue = true)]
        public List<IssuedDocumentItemsListItem> ItemsList
        {
            get{ return _ItemsList;}
            set
            {
                _ItemsList = value;
                _flagItemsList = true;
            }
        }
        private List<IssuedDocumentItemsListItem> _ItemsList;
        private bool _flagItemsList;

        /// <summary>
        /// Returns false as ItemsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsList()
        {
            return _flagItemsList;
        }
        /// <summary>
        /// Gets or Sets PaymentsList
        /// </summary>
        [DataMember(Name = "payments_list", EmitDefaultValue = true)]
        public List<IssuedDocumentPaymentsListItem> PaymentsList
        {
            get{ return _PaymentsList;}
            set
            {
                _PaymentsList = value;
                _flagPaymentsList = true;
            }
        }
        private List<IssuedDocumentPaymentsListItem> _PaymentsList;
        private bool _flagPaymentsList;

        /// <summary>
        /// Returns false as PaymentsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentsList()
        {
            return _flagPaymentsList;
        }
        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", EmitDefaultValue = false)]
        public DocumentTemplate Template
        {
            get{ return _Template;}
            set
            {
                _Template = value;
                _flagTemplate = true;
            }
        }
        private DocumentTemplate _Template;
        private bool _flagTemplate;

        /// <summary>
        /// Returns false as Template should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTemplate()
        {
            return _flagTemplate;
        }
        /// <summary>
        /// Gets or Sets DeliveryNoteTemplate
        /// </summary>
        [DataMember(Name = "delivery_note_template", EmitDefaultValue = false)]
        public DocumentTemplate DeliveryNoteTemplate
        {
            get{ return _DeliveryNoteTemplate;}
            set
            {
                _DeliveryNoteTemplate = value;
                _flagDeliveryNoteTemplate = true;
            }
        }
        private DocumentTemplate _DeliveryNoteTemplate;
        private bool _flagDeliveryNoteTemplate;

        /// <summary>
        /// Returns false as DeliveryNoteTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNoteTemplate()
        {
            return _flagDeliveryNoteTemplate;
        }
        /// <summary>
        /// Gets or Sets AccInvTemplate
        /// </summary>
        [DataMember(Name = "acc_inv_template", EmitDefaultValue = false)]
        public DocumentTemplate AccInvTemplate
        {
            get{ return _AccInvTemplate;}
            set
            {
                _AccInvTemplate = value;
                _flagAccInvTemplate = true;
            }
        }
        private DocumentTemplate _AccInvTemplate;
        private bool _flagAccInvTemplate;

        /// <summary>
        /// Returns false as AccInvTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccInvTemplate()
        {
            return _flagAccInvTemplate;
        }
        /// <summary>
        /// Issued document PDF horizontal margins
        /// </summary>
        /// <value>Issued document PDF horizontal margins</value>
        [DataMember(Name = "h_margins", EmitDefaultValue = true)]
        public int HMargins
        {
            get{ return _HMargins;}
            set
            {
                _HMargins = value;
                _flagHMargins = true;
            }
        }
        private int _HMargins;
        private bool _flagHMargins;

        /// <summary>
        /// Returns false as HMargins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHMargins()
        {
            return _flagHMargins;
        }
        /// <summary>
        /// Issued document PDF vertical margins
        /// </summary>
        /// <value>Issued document PDF vertical margins</value>
        [DataMember(Name = "v_margins", EmitDefaultValue = true)]
        public int VMargins
        {
            get{ return _VMargins;}
            set
            {
                _VMargins = value;
                _flagVMargins = true;
            }
        }
        private int _VMargins;
        private bool _flagVMargins;

        /// <summary>
        /// Returns false as VMargins should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVMargins()
        {
            return _flagVMargins;
        }
        /// <summary>
        /// Show the expiration dates of the payments on the document
        /// </summary>
        /// <value>Show the expiration dates of the payments on the document</value>
        [DataMember(Name = "show_payments", EmitDefaultValue = true)]
        public bool ShowPayments
        {
            get{ return _ShowPayments;}
            set
            {
                _ShowPayments = value;
                _flagShowPayments = true;
            }
        }
        private bool _ShowPayments;
        private bool _flagShowPayments;

        /// <summary>
        /// Returns false as ShowPayments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPayments()
        {
            return _flagShowPayments;
        }
        /// <summary>
        /// Show the payment method details on the document
        /// </summary>
        /// <value>Show the payment method details on the document</value>
        [DataMember(Name = "show_payment_method", EmitDefaultValue = true)]
        public bool ShowPaymentMethod
        {
            get{ return _ShowPaymentMethod;}
            set
            {
                _ShowPaymentMethod = value;
                _flagShowPaymentMethod = true;
            }
        }
        private bool _ShowPaymentMethod;
        private bool _flagShowPaymentMethod;

        /// <summary>
        /// Returns false as ShowPaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowPaymentMethod()
        {
            return _flagShowPaymentMethod;
        }
        /// <summary>
        /// Show notification button in the PDF
        /// </summary>
        /// <value>Show notification button in the PDF</value>
        [DataMember(Name = "show_notification_button", EmitDefaultValue = true)]
        public bool ShowNotificationButton
        {
            get{ return _ShowNotificationButton;}
            set
            {
                _ShowNotificationButton = value;
                _flagShowNotificationButton = true;
            }
        }
        private bool _ShowNotificationButton;
        private bool _flagShowNotificationButton;

        /// <summary>
        /// Returns false as ShowNotificationButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowNotificationButton()
        {
            return _flagShowNotificationButton;
        }
        /// <summary>
        /// Show ts pay button in the PDF
        /// </summary>
        /// <value>Show ts pay button in the PDF</value>
        [DataMember(Name = "show_tspay_button", EmitDefaultValue = true)]
        public bool ShowTspayButton
        {
            get{ return _ShowTspayButton;}
            set
            {
                _ShowTspayButton = value;
                _flagShowTspayButton = true;
            }
        }
        private bool _ShowTspayButton;
        private bool _flagShowTspayButton;

        /// <summary>
        /// Returns false as ShowTspayButton should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeShowTspayButton()
        {
            return _flagShowTspayButton;
        }
        /// <summary>
        /// Issued document has delivery note
        /// </summary>
        /// <value>Issued document has delivery note</value>
        [DataMember(Name = "delivery_note", EmitDefaultValue = true)]
        public bool DeliveryNote
        {
            get{ return _DeliveryNote;}
            set
            {
                _DeliveryNote = value;
                _flagDeliveryNote = true;
            }
        }
        private bool _DeliveryNote;
        private bool _flagDeliveryNote;

        /// <summary>
        /// Returns false as DeliveryNote should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeliveryNote()
        {
            return _flagDeliveryNote;
        }
        /// <summary>
        /// Issued document has an accompanying invoice
        /// </summary>
        /// <value>Issued document has an accompanying invoice</value>
        [DataMember(Name = "accompanying_invoice", EmitDefaultValue = true)]
        public bool AccompanyingInvoice
        {
            get{ return _AccompanyingInvoice;}
            set
            {
                _AccompanyingInvoice = value;
                _flagAccompanyingInvoice = true;
            }
        }
        private bool _AccompanyingInvoice;
        private bool _flagAccompanyingInvoice;

        /// <summary>
        /// Returns false as AccompanyingInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccompanyingInvoice()
        {
            return _flagAccompanyingInvoice;
        }
        /// <summary>
        /// Issued document attached delivery note number
        /// </summary>
        /// <value>Issued document attached delivery note number</value>
        [DataMember(Name = "dn_number", EmitDefaultValue = true)]
        public int DnNumber
        {
            get{ return _DnNumber;}
            set
            {
                _DnNumber = value;
                _flagDnNumber = true;
            }
        }
        private int _DnNumber;
        private bool _flagDnNumber;

        /// <summary>
        /// Returns false as DnNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnNumber()
        {
            return _flagDnNumber;
        }
        /// <summary>
        /// Issued document attached delivery note date
        /// </summary>
        /// <value>Issued document attached delivery note date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "dn_date", EmitDefaultValue = true)]
        public DateOnly DnDate
        {
            get{ return _DnDate;}
            set
            {
                _DnDate = value;
                _flagDnDate = true;
            }
        }
        private DateOnly _DnDate;
        private bool _flagDnDate;

        /// <summary>
        /// Returns false as DnDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnDate()
        {
            return _flagDnDate;
        }
        /// <summary>
        /// Issued document attached delivery note number of packages
        /// </summary>
        /// <value>Issued document attached delivery note number of packages</value>
        [DataMember(Name = "dn_ai_packages_number", EmitDefaultValue = true)]
        public string DnAiPackagesNumber
        {
            get{ return _DnAiPackagesNumber;}
            set
            {
                _DnAiPackagesNumber = value;
                _flagDnAiPackagesNumber = true;
            }
        }
        private string _DnAiPackagesNumber;
        private bool _flagDnAiPackagesNumber;

        /// <summary>
        /// Returns false as DnAiPackagesNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiPackagesNumber()
        {
            return _flagDnAiPackagesNumber;
        }
        /// <summary>
        /// Issued document attached delivery note package weight
        /// </summary>
        /// <value>Issued document attached delivery note package weight</value>
        [DataMember(Name = "dn_ai_weight", EmitDefaultValue = true)]
        public string DnAiWeight
        {
            get{ return _DnAiWeight;}
            set
            {
                _DnAiWeight = value;
                _flagDnAiWeight = true;
            }
        }
        private string _DnAiWeight;
        private bool _flagDnAiWeight;

        /// <summary>
        /// Returns false as DnAiWeight should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiWeight()
        {
            return _flagDnAiWeight;
        }
        /// <summary>
        /// Issued document attached delivery note causal
        /// </summary>
        /// <value>Issued document attached delivery note causal</value>
        [DataMember(Name = "dn_ai_causal", EmitDefaultValue = true)]
        public string DnAiCausal
        {
            get{ return _DnAiCausal;}
            set
            {
                _DnAiCausal = value;
                _flagDnAiCausal = true;
            }
        }
        private string _DnAiCausal;
        private bool _flagDnAiCausal;

        /// <summary>
        /// Returns false as DnAiCausal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiCausal()
        {
            return _flagDnAiCausal;
        }
        /// <summary>
        /// Issued document attached delivery note destination
        /// </summary>
        /// <value>Issued document attached delivery note destination</value>
        [DataMember(Name = "dn_ai_destination", EmitDefaultValue = true)]
        public string DnAiDestination
        {
            get{ return _DnAiDestination;}
            set
            {
                _DnAiDestination = value;
                _flagDnAiDestination = true;
            }
        }
        private string _DnAiDestination;
        private bool _flagDnAiDestination;

        /// <summary>
        /// Returns false as DnAiDestination should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiDestination()
        {
            return _flagDnAiDestination;
        }
        /// <summary>
        /// Issued document attached delivery note transporter
        /// </summary>
        /// <value>Issued document attached delivery note transporter</value>
        [DataMember(Name = "dn_ai_transporter", EmitDefaultValue = true)]
        public string DnAiTransporter
        {
            get{ return _DnAiTransporter;}
            set
            {
                _DnAiTransporter = value;
                _flagDnAiTransporter = true;
            }
        }
        private string _DnAiTransporter;
        private bool _flagDnAiTransporter;

        /// <summary>
        /// Returns false as DnAiTransporter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiTransporter()
        {
            return _flagDnAiTransporter;
        }
        /// <summary>
        /// Issued document attached delivery note notes
        /// </summary>
        /// <value>Issued document attached delivery note notes</value>
        [DataMember(Name = "dn_ai_notes", EmitDefaultValue = true)]
        public string DnAiNotes
        {
            get{ return _DnAiNotes;}
            set
            {
                _DnAiNotes = value;
                _flagDnAiNotes = true;
            }
        }
        private string _DnAiNotes;
        private bool _flagDnAiNotes;

        /// <summary>
        /// Returns false as DnAiNotes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnAiNotes()
        {
            return _flagDnAiNotes;
        }
        /// <summary>
        /// Issued document is marked
        /// </summary>
        /// <value>Issued document is marked</value>
        [DataMember(Name = "is_marked", EmitDefaultValue = true)]
        public bool IsMarked
        {
            get{ return _IsMarked;}
            set
            {
                _IsMarked = value;
                _flagIsMarked = true;
            }
        }
        private bool _IsMarked;
        private bool _flagIsMarked;

        /// <summary>
        /// Returns false as IsMarked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMarked()
        {
            return _flagIsMarked;
        }
        /// <summary>
        /// [Read only] Issued document total net amount
        /// </summary>
        /// <value>[Read only] Issued document total net amount</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal AmountNet { get; private set; }

        /// <summary>
        /// Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return false;
        }
        /// <summary>
        /// [Read Only] Issued document total vat amount
        /// </summary>
        /// <value>[Read Only] Issued document total vat amount</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal AmountVat { get; private set; }

        /// <summary>
        /// Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return false;
        }
        /// <summary>
        /// [Read Only] Issued document total gross amount
        /// </summary>
        /// <value>[Read Only] Issued document total gross amount</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal AmountGross { get; private set; }

        /// <summary>
        /// Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return false;
        }
        /// <summary>
        /// Issued document amount due discount
        /// </summary>
        /// <value>Issued document amount due discount</value>
        [DataMember(Name = "amount_due_discount", EmitDefaultValue = true)]
        public decimal AmountDueDiscount
        {
            get{ return _AmountDueDiscount;}
            set
            {
                _AmountDueDiscount = value;
                _flagAmountDueDiscount = true;
            }
        }
        private decimal _AmountDueDiscount;
        private bool _flagAmountDueDiscount;

        /// <summary>
        /// Returns false as AmountDueDiscount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDueDiscount()
        {
            return _flagAmountDueDiscount;
        }
        /// <summary>
        /// [Read Only] Issued document rivalsa amount
        /// </summary>
        /// <value>[Read Only] Issued document rivalsa amount</value>
        [DataMember(Name = "amount_rivalsa", EmitDefaultValue = true)]
        public decimal AmountRivalsa { get; private set; }

        /// <summary>
        /// Returns false as AmountRivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsa()
        {
            return false;
        }
        /// <summary>
        /// Issued document taxable rivalsa amount
        /// </summary>
        /// <value>Issued document taxable rivalsa amount</value>
        [DataMember(Name = "amount_rivalsa_taxable", EmitDefaultValue = true)]
        public decimal AmountRivalsaTaxable
        {
            get{ return _AmountRivalsaTaxable;}
            set
            {
                _AmountRivalsaTaxable = value;
                _flagAmountRivalsaTaxable = true;
            }
        }
        private decimal _AmountRivalsaTaxable;
        private bool _flagAmountRivalsaTaxable;

        /// <summary>
        /// Returns false as AmountRivalsaTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountRivalsaTaxable()
        {
            return _flagAmountRivalsaTaxable;
        }
        /// <summary>
        /// [Read Only] Issued document withholding tax amount (ritenuta d&#39;acconto).
        /// </summary>
        /// <value>[Read Only] Issued document withholding tax amount (ritenuta d&#39;acconto).</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = true)]
        public decimal AmountWithholdingTax { get; private set; }

        /// <summary>
        /// Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return false;
        }
        /// <summary>
        /// Issued document taxable withholding tax amount
        /// </summary>
        /// <value>Issued document taxable withholding tax amount</value>
        [DataMember(Name = "amount_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal AmountWithholdingTaxTaxable
        {
            get{ return _AmountWithholdingTaxTaxable;}
            set
            {
                _AmountWithholdingTaxTaxable = value;
                _flagAmountWithholdingTaxTaxable = true;
            }
        }
        private decimal _AmountWithholdingTaxTaxable;
        private bool _flagAmountWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as AmountWithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTaxTaxable()
        {
            return _flagAmountWithholdingTaxTaxable;
        }
        /// <summary>
        /// [Read Only] Issued document other withholding tax amount (altra ritenuta)
        /// </summary>
        /// <value>[Read Only] Issued document other withholding tax amount (altra ritenuta)</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal AmountOtherWithholdingTax { get; private set; }

        /// <summary>
        /// Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return false;
        }
        /// <summary>
        /// Issued document taxable other withholding tax amount
        /// </summary>
        /// <value>Issued document taxable other withholding tax amount</value>
        [DataMember(Name = "amount_other_withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal AmountOtherWithholdingTaxTaxable
        {
            get{ return _AmountOtherWithholdingTaxTaxable;}
            set
            {
                _AmountOtherWithholdingTaxTaxable = value;
                _flagAmountOtherWithholdingTaxTaxable = true;
            }
        }
        private decimal _AmountOtherWithholdingTaxTaxable;
        private bool _flagAmountOtherWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as AmountOtherWithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTaxTaxable()
        {
            return _flagAmountOtherWithholdingTaxTaxable;
        }
        /// <summary>
        /// Issued document taxable enasarco amount
        /// </summary>
        /// <value>Issued document taxable enasarco amount</value>
        [DataMember(Name = "amount_enasarco_taxable", EmitDefaultValue = true)]
        public decimal AmountEnasarcoTaxable
        {
            get{ return _AmountEnasarcoTaxable;}
            set
            {
                _AmountEnasarcoTaxable = value;
                _flagAmountEnasarcoTaxable = true;
            }
        }
        private decimal _AmountEnasarcoTaxable;
        private bool _flagAmountEnasarcoTaxable;

        /// <summary>
        /// Returns false as AmountEnasarcoTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountEnasarcoTaxable()
        {
            return _flagAmountEnasarcoTaxable;
        }
        /// <summary>
        /// Gets or Sets ExtraData
        /// </summary>
        [DataMember(Name = "extra_data", EmitDefaultValue = true)]
        public IssuedDocumentExtraData ExtraData
        {
            get{ return _ExtraData;}
            set
            {
                _ExtraData = value;
                _flagExtraData = true;
            }
        }
        private IssuedDocumentExtraData _ExtraData;
        private bool _flagExtraData;

        /// <summary>
        /// Returns false as ExtraData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExtraData()
        {
            return _flagExtraData;
        }
        /// <summary>
        /// Issued document seen date
        /// </summary>
        /// <value>Issued document seen date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "seen_date", EmitDefaultValue = true)]
        public DateOnly SeenDate
        {
            get{ return _SeenDate;}
            set
            {
                _SeenDate = value;
                _flagSeenDate = true;
            }
        }
        private DateOnly _SeenDate;
        private bool _flagSeenDate;

        /// <summary>
        /// Returns false as SeenDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSeenDate()
        {
            return _flagSeenDate;
        }
        /// <summary>
        /// Issued document date of the next not paid payment
        /// </summary>
        /// <value>Issued document date of the next not paid payment</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "next_due_date", EmitDefaultValue = true)]
        public DateOnly NextDueDate
        {
            get{ return _NextDueDate;}
            set
            {
                _NextDueDate = value;
                _flagNextDueDate = true;
            }
        }
        private DateOnly _NextDueDate;
        private bool _flagNextDueDate;

        /// <summary>
        /// Returns false as NextDueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextDueDate()
        {
            return _flagNextDueDate;
        }
        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the document PDF file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the document PDF file</value>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url
        {
            get{ return _Url;}
            set
            {
                _Url = value;
                _flagUrl = true;
            }
        }
        private string _Url;
        private bool _flagUrl;

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return _flagUrl;
        }
        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the attached delivery note PDF file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the attached delivery note PDF file</value>
        [DataMember(Name = "dn_url", EmitDefaultValue = true)]
        public string DnUrl
        {
            get{ return _DnUrl;}
            set
            {
                _DnUrl = value;
                _flagDnUrl = true;
            }
        }
        private string _DnUrl;
        private bool _flagDnUrl;

        /// <summary>
        /// Returns false as DnUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnUrl()
        {
            return _flagDnUrl;
        }
        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the accompanying invoice PDF file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the accompanying invoice PDF file</value>
        [DataMember(Name = "ai_url", EmitDefaultValue = true)]
        public string AiUrl
        {
            get{ return _AiUrl;}
            set
            {
                _AiUrl = value;
                _flagAiUrl = true;
            }
        }
        private string _AiUrl;
        private bool _flagAiUrl;

        /// <summary>
        /// Returns false as AiUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAiUrl()
        {
            return _flagAiUrl;
        }
        /// <summary>
        /// [Temporary] [Read Only] Issued document url of the attached file
        /// </summary>
        /// <value>[Temporary] [Read Only] Issued document url of the attached file</value>
        [DataMember(Name = "attachment_url", EmitDefaultValue = true)]
        public string AttachmentUrl { get; private set; }

        /// <summary>
        /// Returns false as AttachmentUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentUrl()
        {
            return false;
        }
        /// <summary>
        /// [Write Only] Issued document attachment token returned by POST /issued_documents/attachment
        /// </summary>
        /// <value>[Write Only] Issued document attachment token returned by POST /issued_documents/attachment</value>
        [DataMember(Name = "attachment_token", EmitDefaultValue = true)]
        public string AttachmentToken
        {
            get{ return _AttachmentToken;}
            set
            {
                _AttachmentToken = value;
                _flagAttachmentToken = true;
            }
        }
        private string _AttachmentToken;
        private bool _flagAttachmentToken;

        /// <summary>
        /// Returns false as AttachmentToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttachmentToken()
        {
            return _flagAttachmentToken;
        }
        /// <summary>
        /// Issued document advanced raw attributes for e-invoices
        /// </summary>
        /// <value>Issued document advanced raw attributes for e-invoices</value>
        [DataMember(Name = "ei_raw", EmitDefaultValue = true)]
        public Object EiRaw
        {
            get{ return _EiRaw;}
            set
            {
                _EiRaw = value;
                _flagEiRaw = true;
            }
        }
        private Object _EiRaw;
        private bool _flagEiRaw;

        /// <summary>
        /// Returns false as EiRaw should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiRaw()
        {
            return _flagEiRaw;
        }
        /// <summary>
        /// Price list id
        /// </summary>
        /// <value>Price list id</value>
        [DataMember(Name = "price_list_id", EmitDefaultValue = true)]
        public string PriceListId
        {
            get{ return _PriceListId;}
            set
            {
                _PriceListId = value;
                _flagPriceListId = true;
            }
        }
        private string _PriceListId;
        private bool _flagPriceListId;

        /// <summary>
        /// Returns false as PriceListId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePriceListId()
        {
            return _flagPriceListId;
        }
        /// <summary>
        /// Issued Document can&#39;t be edited
        /// </summary>
        /// <value>Issued Document can&#39;t be edited</value>
        [DataMember(Name = "locked", EmitDefaultValue = true)]
        public bool Locked
        {
            get{ return _Locked;}
            set
            {
                _Locked = value;
                _flagLocked = true;
            }
        }
        private bool _Locked;
        private bool _flagLocked;

        /// <summary>
        /// Returns false as Locked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLocked()
        {
            return _flagLocked;
        }
        /// <summary>
        /// Issued document creation date
        /// </summary>
        /// <value>Issued document creation date</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public string CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private string _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Issued document last update date
        /// </summary>
        /// <value>Issued document last update date</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public string UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private string _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocument {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Numeration: ").Append(Numeration).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  VisibleSubject: ").Append(VisibleSubject).Append("\n");
            sb.Append("  RcCenter: ").Append(RcCenter).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  AmountCassa: ").Append(AmountCassa).Append("\n");
            sb.Append("  CassaTaxable: ").Append(CassaTaxable).Append("\n");
            sb.Append("  AmountCassaTaxable: ").Append(AmountCassaTaxable).Append("\n");
            sb.Append("  Cassa2: ").Append(Cassa2).Append("\n");
            sb.Append("  AmountCassa2: ").Append(AmountCassa2).Append("\n");
            sb.Append("  Cassa2Taxable: ").Append(Cassa2Taxable).Append("\n");
            sb.Append("  AmountCassa2Taxable: ").Append(AmountCassa2Taxable).Append("\n");
            sb.Append("  GlobalCassaTaxable: ").Append(GlobalCassaTaxable).Append("\n");
            sb.Append("  AmountGlobalCassaTaxable: ").Append(AmountGlobalCassaTaxable).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  StampDuty: ").Append(StampDuty).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  UseSplitPayment: ").Append(UseSplitPayment).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiData: ").Append(EiData).Append("\n");
            sb.Append("  EiCassaType: ").Append(EiCassaType).Append("\n");
            sb.Append("  EiCassa2Type: ").Append(EiCassa2Type).Append("\n");
            sb.Append("  EiWithholdingTaxCausal: ").Append(EiWithholdingTaxCausal).Append("\n");
            sb.Append("  EiOtherWithholdingTaxType: ").Append(EiOtherWithholdingTaxType).Append("\n");
            sb.Append("  EiOtherWithholdingTaxCausal: ").Append(EiOtherWithholdingTaxCausal).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  PaymentsList: ").Append(PaymentsList).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  DeliveryNoteTemplate: ").Append(DeliveryNoteTemplate).Append("\n");
            sb.Append("  AccInvTemplate: ").Append(AccInvTemplate).Append("\n");
            sb.Append("  HMargins: ").Append(HMargins).Append("\n");
            sb.Append("  VMargins: ").Append(VMargins).Append("\n");
            sb.Append("  ShowPayments: ").Append(ShowPayments).Append("\n");
            sb.Append("  ShowPaymentMethod: ").Append(ShowPaymentMethod).Append("\n");
            sb.Append("  ShowTotals: ").Append(ShowTotals).Append("\n");
            sb.Append("  ShowNotificationButton: ").Append(ShowNotificationButton).Append("\n");
            sb.Append("  ShowTspayButton: ").Append(ShowTspayButton).Append("\n");
            sb.Append("  DeliveryNote: ").Append(DeliveryNote).Append("\n");
            sb.Append("  AccompanyingInvoice: ").Append(AccompanyingInvoice).Append("\n");
            sb.Append("  DnNumber: ").Append(DnNumber).Append("\n");
            sb.Append("  DnDate: ").Append(DnDate).Append("\n");
            sb.Append("  DnAiPackagesNumber: ").Append(DnAiPackagesNumber).Append("\n");
            sb.Append("  DnAiWeight: ").Append(DnAiWeight).Append("\n");
            sb.Append("  DnAiCausal: ").Append(DnAiCausal).Append("\n");
            sb.Append("  DnAiDestination: ").Append(DnAiDestination).Append("\n");
            sb.Append("  DnAiTransporter: ").Append(DnAiTransporter).Append("\n");
            sb.Append("  DnAiNotes: ").Append(DnAiNotes).Append("\n");
            sb.Append("  IsMarked: ").Append(IsMarked).Append("\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountDueDiscount: ").Append(AmountDueDiscount).Append("\n");
            sb.Append("  AmountRivalsa: ").Append(AmountRivalsa).Append("\n");
            sb.Append("  AmountRivalsaTaxable: ").Append(AmountRivalsaTaxable).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountWithholdingTaxTaxable: ").Append(AmountWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTaxTaxable: ").Append(AmountOtherWithholdingTaxTaxable).Append("\n");
            sb.Append("  AmountEnasarcoTaxable: ").Append(AmountEnasarcoTaxable).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  SeenDate: ").Append(SeenDate).Append("\n");
            sb.Append("  NextDueDate: ").Append(NextDueDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  DnUrl: ").Append(DnUrl).Append("\n");
            sb.Append("  AiUrl: ").Append(AiUrl).Append("\n");
            sb.Append("  AttachmentUrl: ").Append(AttachmentUrl).Append("\n");
            sb.Append("  AttachmentToken: ").Append(AttachmentToken).Append("\n");
            sb.Append("  EiRaw: ").Append(EiRaw).Append("\n");
            sb.Append("  EiStatus: ").Append(EiStatus).Append("\n");
            sb.Append("  PriceListId: ").Append(PriceListId).Append("\n");
            sb.Append("  Locked: ").Append(Locked).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocument);
        }

        /// <summary>
        /// Returns true if IssuedDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Number == input.Number ||
                    this.Number.Equals(input.Number)
                ) && 
                (
                    this.Numeration == input.Numeration ||
                    (this.Numeration != null &&
                    this.Numeration.Equals(input.Numeration))
                ) && 
                (
                    this.Date == input.Date ||
                    this.Date.Equals(input.Date)
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.VisibleSubject == input.VisibleSubject ||
                    (this.VisibleSubject != null &&
                    this.VisibleSubject.Equals(input.VisibleSubject))
                ) && 
                (
                    this.RcCenter == input.RcCenter ||
                    (this.RcCenter != null &&
                    this.RcCenter.Equals(input.RcCenter))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Rivalsa == input.Rivalsa ||
                    this.Rivalsa.Equals(input.Rivalsa)
                ) && 
                (
                    this.Cassa == input.Cassa ||
                    this.Cassa.Equals(input.Cassa)
                ) && 
                (
                    this.AmountCassa == input.AmountCassa ||
                    this.AmountCassa.Equals(input.AmountCassa)
                ) && 
                (
                    this.CassaTaxable == input.CassaTaxable ||
                    this.CassaTaxable.Equals(input.CassaTaxable)
                ) && 
                (
                    this.AmountCassaTaxable == input.AmountCassaTaxable ||
                    this.AmountCassaTaxable.Equals(input.AmountCassaTaxable)
                ) && 
                (
                    this.Cassa2 == input.Cassa2 ||
                    this.Cassa2.Equals(input.Cassa2)
                ) && 
                (
                    this.AmountCassa2 == input.AmountCassa2 ||
                    this.AmountCassa2.Equals(input.AmountCassa2)
                ) && 
                (
                    this.Cassa2Taxable == input.Cassa2Taxable ||
                    this.Cassa2Taxable.Equals(input.Cassa2Taxable)
                ) && 
                (
                    this.AmountCassa2Taxable == input.AmountCassa2Taxable ||
                    this.AmountCassa2Taxable.Equals(input.AmountCassa2Taxable)
                ) && 
                (
                    this.GlobalCassaTaxable == input.GlobalCassaTaxable ||
                    this.GlobalCassaTaxable.Equals(input.GlobalCassaTaxable)
                ) && 
                (
                    this.AmountGlobalCassaTaxable == input.AmountGlobalCassaTaxable ||
                    this.AmountGlobalCassaTaxable.Equals(input.AmountGlobalCassaTaxable)
                ) && 
                (
                    this.WithholdingTax == input.WithholdingTax ||
                    this.WithholdingTax.Equals(input.WithholdingTax)
                ) && 
                (
                    this.WithholdingTaxTaxable == input.WithholdingTaxTaxable ||
                    this.WithholdingTaxTaxable.Equals(input.WithholdingTaxTaxable)
                ) && 
                (
                    this.OtherWithholdingTax == input.OtherWithholdingTax ||
                    this.OtherWithholdingTax.Equals(input.OtherWithholdingTax)
                ) && 
                (
                    this.StampDuty == input.StampDuty ||
                    this.StampDuty.Equals(input.StampDuty)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.UseSplitPayment == input.UseSplitPayment ||
                    this.UseSplitPayment.Equals(input.UseSplitPayment)
                ) && 
                (
                    this.UseGrossPrices == input.UseGrossPrices ||
                    this.UseGrossPrices.Equals(input.UseGrossPrices)
                ) && 
                (
                    this.EInvoice == input.EInvoice ||
                    this.EInvoice.Equals(input.EInvoice)
                ) && 
                (
                    this.EiData == input.EiData ||
                    (this.EiData != null &&
                    this.EiData.Equals(input.EiData))
                ) && 
                (
                    this.EiCassaType == input.EiCassaType ||
                    (this.EiCassaType != null &&
                    this.EiCassaType.Equals(input.EiCassaType))
                ) && 
                (
                    this.EiCassa2Type == input.EiCassa2Type ||
                    (this.EiCassa2Type != null &&
                    this.EiCassa2Type.Equals(input.EiCassa2Type))
                ) && 
                (
                    this.EiWithholdingTaxCausal == input.EiWithholdingTaxCausal ||
                    (this.EiWithholdingTaxCausal != null &&
                    this.EiWithholdingTaxCausal.Equals(input.EiWithholdingTaxCausal))
                ) && 
                (
                    this.EiOtherWithholdingTaxType == input.EiOtherWithholdingTaxType ||
                    (this.EiOtherWithholdingTaxType != null &&
                    this.EiOtherWithholdingTaxType.Equals(input.EiOtherWithholdingTaxType))
                ) && 
                (
                    this.EiOtherWithholdingTaxCausal == input.EiOtherWithholdingTaxCausal ||
                    (this.EiOtherWithholdingTaxCausal != null &&
                    this.EiOtherWithholdingTaxCausal.Equals(input.EiOtherWithholdingTaxCausal))
                ) && 
                (
                    this.ItemsList == input.ItemsList ||
                    this.ItemsList != null &&
                    input.ItemsList != null &&
                    this.ItemsList.SequenceEqual(input.ItemsList)
                ) && 
                (
                    this.PaymentsList == input.PaymentsList ||
                    this.PaymentsList != null &&
                    input.PaymentsList != null &&
                    this.PaymentsList.SequenceEqual(input.PaymentsList)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.DeliveryNoteTemplate == input.DeliveryNoteTemplate ||
                    (this.DeliveryNoteTemplate != null &&
                    this.DeliveryNoteTemplate.Equals(input.DeliveryNoteTemplate))
                ) && 
                (
                    this.AccInvTemplate == input.AccInvTemplate ||
                    (this.AccInvTemplate != null &&
                    this.AccInvTemplate.Equals(input.AccInvTemplate))
                ) && 
                (
                    this.HMargins == input.HMargins ||
                    this.HMargins.Equals(input.HMargins)
                ) && 
                (
                    this.VMargins == input.VMargins ||
                    this.VMargins.Equals(input.VMargins)
                ) && 
                (
                    this.ShowPayments == input.ShowPayments ||
                    this.ShowPayments.Equals(input.ShowPayments)
                ) && 
                (
                    this.ShowPaymentMethod == input.ShowPaymentMethod ||
                    this.ShowPaymentMethod.Equals(input.ShowPaymentMethod)
                ) && 
                (
                    this.ShowTotals == input.ShowTotals ||
                    this.ShowTotals.Equals(input.ShowTotals)
                ) && 
                (
                    this.ShowNotificationButton == input.ShowNotificationButton ||
                    this.ShowNotificationButton.Equals(input.ShowNotificationButton)
                ) && 
                (
                    this.ShowTspayButton == input.ShowTspayButton ||
                    this.ShowTspayButton.Equals(input.ShowTspayButton)
                ) && 
                (
                    this.DeliveryNote == input.DeliveryNote ||
                    this.DeliveryNote.Equals(input.DeliveryNote)
                ) && 
                (
                    this.AccompanyingInvoice == input.AccompanyingInvoice ||
                    this.AccompanyingInvoice.Equals(input.AccompanyingInvoice)
                ) && 
                (
                    this.DnNumber == input.DnNumber ||
                    this.DnNumber.Equals(input.DnNumber)
                ) && 
                (
                    this.DnDate == input.DnDate ||
                    this.DnDate.Equals(input.DnDate)
                ) && 
                (
                    this.DnAiPackagesNumber == input.DnAiPackagesNumber ||
                    (this.DnAiPackagesNumber != null &&
                    this.DnAiPackagesNumber.Equals(input.DnAiPackagesNumber))
                ) && 
                (
                    this.DnAiWeight == input.DnAiWeight ||
                    (this.DnAiWeight != null &&
                    this.DnAiWeight.Equals(input.DnAiWeight))
                ) && 
                (
                    this.DnAiCausal == input.DnAiCausal ||
                    (this.DnAiCausal != null &&
                    this.DnAiCausal.Equals(input.DnAiCausal))
                ) && 
                (
                    this.DnAiDestination == input.DnAiDestination ||
                    (this.DnAiDestination != null &&
                    this.DnAiDestination.Equals(input.DnAiDestination))
                ) && 
                (
                    this.DnAiTransporter == input.DnAiTransporter ||
                    (this.DnAiTransporter != null &&
                    this.DnAiTransporter.Equals(input.DnAiTransporter))
                ) && 
                (
                    this.DnAiNotes == input.DnAiNotes ||
                    (this.DnAiNotes != null &&
                    this.DnAiNotes.Equals(input.DnAiNotes))
                ) && 
                (
                    this.IsMarked == input.IsMarked ||
                    this.IsMarked.Equals(input.IsMarked)
                ) && 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.AmountVat == input.AmountVat ||
                    this.AmountVat.Equals(input.AmountVat)
                ) && 
                (
                    this.AmountGross == input.AmountGross ||
                    this.AmountGross.Equals(input.AmountGross)
                ) && 
                (
                    this.AmountDueDiscount == input.AmountDueDiscount ||
                    this.AmountDueDiscount.Equals(input.AmountDueDiscount)
                ) && 
                (
                    this.AmountRivalsa == input.AmountRivalsa ||
                    this.AmountRivalsa.Equals(input.AmountRivalsa)
                ) && 
                (
                    this.AmountRivalsaTaxable == input.AmountRivalsaTaxable ||
                    this.AmountRivalsaTaxable.Equals(input.AmountRivalsaTaxable)
                ) && 
                (
                    this.AmountWithholdingTax == input.AmountWithholdingTax ||
                    this.AmountWithholdingTax.Equals(input.AmountWithholdingTax)
                ) && 
                (
                    this.AmountWithholdingTaxTaxable == input.AmountWithholdingTaxTaxable ||
                    this.AmountWithholdingTaxTaxable.Equals(input.AmountWithholdingTaxTaxable)
                ) && 
                (
                    this.AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    this.AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax)
                ) && 
                (
                    this.AmountOtherWithholdingTaxTaxable == input.AmountOtherWithholdingTaxTaxable ||
                    this.AmountOtherWithholdingTaxTaxable.Equals(input.AmountOtherWithholdingTaxTaxable)
                ) && 
                (
                    this.AmountEnasarcoTaxable == input.AmountEnasarcoTaxable ||
                    this.AmountEnasarcoTaxable.Equals(input.AmountEnasarcoTaxable)
                ) && 
                (
                    this.ExtraData == input.ExtraData ||
                    (this.ExtraData != null &&
                    this.ExtraData.Equals(input.ExtraData))
                ) && 
                (
                    this.SeenDate == input.SeenDate ||
                    this.SeenDate.Equals(input.SeenDate)
                ) && 
                (
                    this.NextDueDate == input.NextDueDate ||
                    this.NextDueDate.Equals(input.NextDueDate)
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.DnUrl == input.DnUrl ||
                    (this.DnUrl != null &&
                    this.DnUrl.Equals(input.DnUrl))
                ) && 
                (
                    this.AiUrl == input.AiUrl ||
                    (this.AiUrl != null &&
                    this.AiUrl.Equals(input.AiUrl))
                ) && 
                (
                    this.AttachmentUrl == input.AttachmentUrl ||
                    (this.AttachmentUrl != null &&
                    this.AttachmentUrl.Equals(input.AttachmentUrl))
                ) && 
                (
                    this.AttachmentToken == input.AttachmentToken ||
                    (this.AttachmentToken != null &&
                    this.AttachmentToken.Equals(input.AttachmentToken))
                ) && 
                (
                    this.EiRaw == input.EiRaw ||
                    (this.EiRaw != null &&
                    this.EiRaw.Equals(input.EiRaw))
                ) && 
                (
                    this.EiStatus == input.EiStatus ||
                    this.EiStatus.Equals(input.EiStatus)
                ) && 
                (
                    this.PriceListId == input.PriceListId ||
                    (this.PriceListId != null &&
                    this.PriceListId.Equals(input.PriceListId))
                ) && 
                (
                    this.Locked == input.Locked ||
                    this.Locked.Equals(input.Locked)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Entity != null)
                {
                    hashCode = (hashCode * 59) + this.Entity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Number.GetHashCode();
                if (this.Numeration != null)
                {
                    hashCode = (hashCode * 59) + this.Numeration.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Date.GetHashCode();
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.VisibleSubject != null)
                {
                    hashCode = (hashCode * 59) + this.VisibleSubject.GetHashCode();
                }
                if (this.RcCenter != null)
                {
                    hashCode = (hashCode * 59) + this.RcCenter.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rivalsa.GetHashCode();
                hashCode = (hashCode * 59) + this.Cassa.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountCassa.GetHashCode();
                hashCode = (hashCode * 59) + this.CassaTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountCassaTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.Cassa2.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountCassa2.GetHashCode();
                hashCode = (hashCode * 59) + this.Cassa2Taxable.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountCassa2Taxable.GetHashCode();
                hashCode = (hashCode * 59) + this.GlobalCassaTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountGlobalCassaTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.WithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.WithholdingTaxTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.OtherWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.StampDuty.GetHashCode();
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.UseSplitPayment.GetHashCode();
                hashCode = (hashCode * 59) + this.UseGrossPrices.GetHashCode();
                hashCode = (hashCode * 59) + this.EInvoice.GetHashCode();
                if (this.EiData != null)
                {
                    hashCode = (hashCode * 59) + this.EiData.GetHashCode();
                }
                if (this.EiCassaType != null)
                {
                    hashCode = (hashCode * 59) + this.EiCassaType.GetHashCode();
                }
                if (this.EiCassa2Type != null)
                {
                    hashCode = (hashCode * 59) + this.EiCassa2Type.GetHashCode();
                }
                if (this.EiWithholdingTaxCausal != null)
                {
                    hashCode = (hashCode * 59) + this.EiWithholdingTaxCausal.GetHashCode();
                }
                if (this.EiOtherWithholdingTaxType != null)
                {
                    hashCode = (hashCode * 59) + this.EiOtherWithholdingTaxType.GetHashCode();
                }
                if (this.EiOtherWithholdingTaxCausal != null)
                {
                    hashCode = (hashCode * 59) + this.EiOtherWithholdingTaxCausal.GetHashCode();
                }
                if (this.ItemsList != null)
                {
                    hashCode = (hashCode * 59) + this.ItemsList.GetHashCode();
                }
                if (this.PaymentsList != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentsList.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                if (this.DeliveryNoteTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryNoteTemplate.GetHashCode();
                }
                if (this.AccInvTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.AccInvTemplate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HMargins.GetHashCode();
                hashCode = (hashCode * 59) + this.VMargins.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPayments.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowPaymentMethod.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowTotals.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowNotificationButton.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowTspayButton.GetHashCode();
                hashCode = (hashCode * 59) + this.DeliveryNote.GetHashCode();
                hashCode = (hashCode * 59) + this.AccompanyingInvoice.GetHashCode();
                hashCode = (hashCode * 59) + this.DnNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.DnDate.GetHashCode();
                if (this.DnAiPackagesNumber != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiPackagesNumber.GetHashCode();
                }
                if (this.DnAiWeight != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiWeight.GetHashCode();
                }
                if (this.DnAiCausal != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiCausal.GetHashCode();
                }
                if (this.DnAiDestination != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiDestination.GetHashCode();
                }
                if (this.DnAiTransporter != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiTransporter.GetHashCode();
                }
                if (this.DnAiNotes != null)
                {
                    hashCode = (hashCode * 59) + this.DnAiNotes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMarked.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountNet.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountVat.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountGross.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountDueDiscount.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountRivalsa.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountRivalsaTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountWithholdingTaxTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountOtherWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountOtherWithholdingTaxTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountEnasarcoTaxable.GetHashCode();
                if (this.ExtraData != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraData.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SeenDate.GetHashCode();
                hashCode = (hashCode * 59) + this.NextDueDate.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.DnUrl != null)
                {
                    hashCode = (hashCode * 59) + this.DnUrl.GetHashCode();
                }
                if (this.AiUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AiUrl.GetHashCode();
                }
                if (this.AttachmentUrl != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentUrl.GetHashCode();
                }
                if (this.AttachmentToken != null)
                {
                    hashCode = (hashCode * 59) + this.AttachmentToken.GetHashCode();
                }
                if (this.EiRaw != null)
                {
                    hashCode = (hashCode * 59) + this.EiRaw.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EiStatus.GetHashCode();
                if (this.PriceListId != null)
                {
                    hashCode = (hashCode * 59) + this.PriceListId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Locked.GetHashCode();
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocument" />
    /// </summary>
    public class IssuedDocumentJsonConverter : JsonConverter<IssuedDocument>
    {
        /// <summary>
        /// The format to use to serialize Date
        /// </summary>
        public static string DateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize DnDate
        /// </summary>
        public static string DnDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize SeenDate
        /// </summary>
        public static string SeenDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize NextDueDate
        /// </summary>
        public static string NextDueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="IssuedDocument" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocument Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<Entity?> entity = default;
            Option<IssuedDocumentType?> type = default;
            Option<int?> number = default;
            Option<string?> numeration = default;
            Option<DateOnly?> date = default;
            Option<int?> year = default;
            Option<Currency?> currency = default;
            Option<Language?> language = default;
            Option<string?> subject = default;
            Option<string?> visibleSubject = default;
            Option<string?> rcCenter = default;
            Option<string?> notes = default;
            Option<decimal?> rivalsa = default;
            Option<decimal?> cassa = default;
            Option<decimal?> amountCassa = default;
            Option<decimal?> cassaTaxable = default;
            Option<decimal?> amountCassaTaxable = default;
            Option<decimal?> cassa2 = default;
            Option<decimal?> amountCassa2 = default;
            Option<decimal?> cassa2Taxable = default;
            Option<decimal?> amountCassa2Taxable = default;
            Option<decimal?> globalCassaTaxable = default;
            Option<decimal?> amountGlobalCassaTaxable = default;
            Option<decimal?> withholdingTax = default;
            Option<decimal?> withholdingTaxTaxable = default;
            Option<decimal?> otherWithholdingTax = default;
            Option<decimal?> stampDuty = default;
            Option<PaymentMethod?> paymentMethod = default;
            Option<bool?> useSplitPayment = default;
            Option<bool?> useGrossPrices = default;
            Option<bool?> eInvoice = default;
            Option<IssuedDocumentEiData?> eiData = default;
            Option<string?> eiCassaType = default;
            Option<string?> eiCassa2Type = default;
            Option<string?> eiWithholdingTaxCausal = default;
            Option<string?> eiOtherWithholdingTaxType = default;
            Option<string?> eiOtherWithholdingTaxCausal = default;
            Option<List<IssuedDocumentItemsListItem>?> itemsList = default;
            Option<List<IssuedDocumentPaymentsListItem>?> paymentsList = default;
            Option<DocumentTemplate?> template = default;
            Option<DocumentTemplate?> deliveryNoteTemplate = default;
            Option<DocumentTemplate?> accInvTemplate = default;
            Option<int?> hMargins = default;
            Option<int?> vMargins = default;
            Option<bool?> showPayments = default;
            Option<bool?> showPaymentMethod = default;
            Option<ShowTotalsMode?> showTotals = default;
            Option<bool?> showNotificationButton = default;
            Option<bool?> showTspayButton = default;
            Option<bool?> deliveryNote = default;
            Option<bool?> accompanyingInvoice = default;
            Option<int?> dnNumber = default;
            Option<DateOnly?> dnDate = default;
            Option<string?> dnAiPackagesNumber = default;
            Option<string?> dnAiWeight = default;
            Option<string?> dnAiCausal = default;
            Option<string?> dnAiDestination = default;
            Option<string?> dnAiTransporter = default;
            Option<string?> dnAiNotes = default;
            Option<bool?> isMarked = default;
            Option<decimal?> amountNet = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountGross = default;
            Option<decimal?> amountDueDiscount = default;
            Option<decimal?> amountRivalsa = default;
            Option<decimal?> amountRivalsaTaxable = default;
            Option<decimal?> amountWithholdingTax = default;
            Option<decimal?> amountWithholdingTaxTaxable = default;
            Option<decimal?> amountOtherWithholdingTax = default;
            Option<decimal?> amountOtherWithholdingTaxTaxable = default;
            Option<decimal?> amountEnasarcoTaxable = default;
            Option<IssuedDocumentExtraData?> extraData = default;
            Option<DateOnly?> seenDate = default;
            Option<DateOnly?> nextDueDate = default;
            Option<string?> url = default;
            Option<string?> dnUrl = default;
            Option<string?> aiUrl = default;
            Option<string?> attachmentUrl = default;
            Option<string?> attachmentToken = default;
            Option<Object?> eiRaw = default;
            Option<IssuedDocument.EiStatusEnum?> eiStatus = default;
            Option<string?> priceListId = default;
            Option<bool?> locked = default;
            Option<string?> createdAt = default;
            Option<string?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "entity":
                            entity = new Option<Entity?>(JsonSerializer.Deserialize<Entity>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<IssuedDocumentType?>(IssuedDocumentTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "number":
                            number = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "numeration":
                            numeration = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "date":
                            date = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "year":
                            year = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "currency":
                            currency = new Option<Currency?>(JsonSerializer.Deserialize<Currency>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "language":
                            language = new Option<Language?>(JsonSerializer.Deserialize<Language>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "visible_subject":
                            visibleSubject = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rc_center":
                            rcCenter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rivalsa":
                            rivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa":
                            cassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa":
                            amountCassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa_taxable":
                            cassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa_taxable":
                            amountCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa2":
                            cassa2 = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa2":
                            amountCassa2 = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa2_taxable":
                            cassa2Taxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_cassa2_taxable":
                            amountCassa2Taxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "global_cassa_taxable":
                            globalCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_global_cassa_taxable":
                            amountGlobalCassaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax":
                            withholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax_taxable":
                            withholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "other_withholding_tax":
                            otherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stamp_duty":
                            stampDuty = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payment_method":
                            paymentMethod = new Option<PaymentMethod?>(JsonSerializer.Deserialize<PaymentMethod>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "use_split_payment":
                            useSplitPayment = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "use_gross_prices":
                            useGrossPrices = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_data":
                            eiData = new Option<IssuedDocumentEiData?>(JsonSerializer.Deserialize<IssuedDocumentEiData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ei_cassa_type":
                            eiCassaType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ei_cassa2_type":
                            eiCassa2Type = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ei_withholding_tax_causal":
                            eiWithholdingTaxCausal = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ei_other_withholding_tax_type":
                            eiOtherWithholdingTaxType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ei_other_withholding_tax_causal":
                            eiOtherWithholdingTaxCausal = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "items_list":
                            itemsList = new Option<List<IssuedDocumentItemsListItem>?>(JsonSerializer.Deserialize<List<IssuedDocumentItemsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payments_list":
                            paymentsList = new Option<List<IssuedDocumentPaymentsListItem>?>(JsonSerializer.Deserialize<List<IssuedDocumentPaymentsListItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "template":
                            template = new Option<DocumentTemplate?>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "delivery_note_template":
                            deliveryNoteTemplate = new Option<DocumentTemplate?>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "acc_inv_template":
                            accInvTemplate = new Option<DocumentTemplate?>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "h_margins":
                            hMargins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "v_margins":
                            vMargins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "show_payments":
                            showPayments = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "show_payment_method":
                            showPaymentMethod = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "show_totals":
                            string? showTotalsRawValue = utf8JsonReader.GetString();
                            if (showTotalsRawValue != null)
                                showTotals = new Option<ShowTotalsMode?>(ShowTotalsModeValueConverter.FromStringOrDefault(showTotalsRawValue));
                            break;
                        case "show_notification_button":
                            showNotificationButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "show_tspay_button":
                            showTspayButton = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "delivery_note":
                            deliveryNote = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "accompanying_invoice":
                            accompanyingInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dn_number":
                            dnNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "dn_date":
                            dnDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dn_ai_packages_number":
                            dnAiPackagesNumber = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_weight":
                            dnAiWeight = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_causal":
                            dnAiCausal = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_destination":
                            dnAiDestination = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_transporter":
                            dnAiTransporter = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dn_ai_notes":
                            dnAiNotes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "is_marked":
                            isMarked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_due_discount":
                            amountDueDiscount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_rivalsa":
                            amountRivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_rivalsa_taxable":
                            amountRivalsaTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax":
                            amountWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax_taxable":
                            amountWithholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax":
                            amountOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax_taxable":
                            amountOtherWithholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_enasarco_taxable":
                            amountEnasarcoTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "extra_data":
                            extraData = new Option<IssuedDocumentExtraData?>(JsonSerializer.Deserialize<IssuedDocumentExtraData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "seen_date":
                            seenDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "next_due_date":
                            nextDueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dn_url":
                            dnUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ai_url":
                            aiUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "attachment_url":
                            attachmentUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "attachment_token":
                            attachmentToken = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ei_raw":
                            eiRaw = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ei_status":
                            string? eiStatusRawValue = utf8JsonReader.GetString();
                            if (eiStatusRawValue != null)
                                eiStatus = new Option<IssuedDocument.EiStatusEnum?>(IssuedDocument.EiStatusEnumFromStringOrDefault(eiStatusRawValue));
                            break;
                        case "price_list_id":
                            priceListId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "locked":
                            locked = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "created_at":
                            createdAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "updated_at":
                            updatedAt = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (entity.IsSet && entity.Value == null)
                throw new ArgumentNullException(nameof(entity), "Property is not nullable for class IssuedDocument.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class IssuedDocument.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class IssuedDocument.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class IssuedDocument.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class IssuedDocument.");

            if (template.IsSet && template.Value == null)
                throw new ArgumentNullException(nameof(template), "Property is not nullable for class IssuedDocument.");

            if (deliveryNoteTemplate.IsSet && deliveryNoteTemplate.Value == null)
                throw new ArgumentNullException(nameof(deliveryNoteTemplate), "Property is not nullable for class IssuedDocument.");

            if (accInvTemplate.IsSet && accInvTemplate.Value == null)
                throw new ArgumentNullException(nameof(accInvTemplate), "Property is not nullable for class IssuedDocument.");

            if (showTotals.IsSet && showTotals.Value == null)
                throw new ArgumentNullException(nameof(showTotals), "Property is not nullable for class IssuedDocument.");

            return new IssuedDocument(id, entity, type, number, numeration, date, year, currency, language, subject, visibleSubject, rcCenter, notes, rivalsa, cassa, amountCassa, cassaTaxable, amountCassaTaxable, cassa2, amountCassa2, cassa2Taxable, amountCassa2Taxable, globalCassaTaxable, amountGlobalCassaTaxable, withholdingTax, withholdingTaxTaxable, otherWithholdingTax, stampDuty, paymentMethod, useSplitPayment, useGrossPrices, eInvoice, eiData, eiCassaType, eiCassa2Type, eiWithholdingTaxCausal, eiOtherWithholdingTaxType, eiOtherWithholdingTaxCausal, itemsList, paymentsList, template, deliveryNoteTemplate, accInvTemplate, hMargins, vMargins, showPayments, showPaymentMethod, showTotals, showNotificationButton, showTspayButton, deliveryNote, accompanyingInvoice, dnNumber, dnDate, dnAiPackagesNumber, dnAiWeight, dnAiCausal, dnAiDestination, dnAiTransporter, dnAiNotes, isMarked, amountNet, amountVat, amountGross, amountDueDiscount, amountRivalsa, amountRivalsaTaxable, amountWithholdingTax, amountWithholdingTaxTaxable, amountOtherWithholdingTax, amountOtherWithholdingTaxTaxable, amountEnasarcoTaxable, extraData, seenDate, nextDueDate, url, dnUrl, aiUrl, attachmentUrl, attachmentToken, eiRaw, eiStatus, priceListId, locked, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocument issuedDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocument, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocument" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocument"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocument issuedDocument, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocument.EntityOption.IsSet && issuedDocument.Entity == null)
                throw new ArgumentNullException(nameof(issuedDocument.Entity), "Property is required for class IssuedDocument.");

            if (issuedDocument.CurrencyOption.IsSet && issuedDocument.Currency == null)
                throw new ArgumentNullException(nameof(issuedDocument.Currency), "Property is required for class IssuedDocument.");

            if (issuedDocument.LanguageOption.IsSet && issuedDocument.Language == null)
                throw new ArgumentNullException(nameof(issuedDocument.Language), "Property is required for class IssuedDocument.");

            if (issuedDocument.PaymentMethodOption.IsSet && issuedDocument.PaymentMethod == null)
                throw new ArgumentNullException(nameof(issuedDocument.PaymentMethod), "Property is required for class IssuedDocument.");

            if (issuedDocument.TemplateOption.IsSet && issuedDocument.Template == null)
                throw new ArgumentNullException(nameof(issuedDocument.Template), "Property is required for class IssuedDocument.");

            if (issuedDocument.DeliveryNoteTemplateOption.IsSet && issuedDocument.DeliveryNoteTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocument.DeliveryNoteTemplate), "Property is required for class IssuedDocument.");

            if (issuedDocument.AccInvTemplateOption.IsSet && issuedDocument.AccInvTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocument.AccInvTemplate), "Property is required for class IssuedDocument.");

            if (issuedDocument.IdOption.IsSet)
                if (issuedDocument.IdOption.Value != null)
                    writer.WriteNumber("id", issuedDocument.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (issuedDocument.EntityOption.IsSet)
            {
                writer.WritePropertyName("entity");
                JsonSerializer.Serialize(writer, issuedDocument.Entity, jsonSerializerOptions);
            }
            if (issuedDocument.TypeOption.IsSet)
            {
                var typeRawValue = IssuedDocumentTypeValueConverter.ToJsonValue(issuedDocument.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (issuedDocument.NumberOption.IsSet)
                if (issuedDocument.NumberOption.Value != null)
                    writer.WriteNumber("number", issuedDocument.NumberOption.Value!.Value);
                else
                    writer.WriteNull("number");

            if (issuedDocument.NumerationOption.IsSet)
                if (issuedDocument.NumerationOption.Value != null)
                    writer.WriteString("numeration", issuedDocument.Numeration);
                else
                    writer.WriteNull("numeration");

            if (issuedDocument.DateOption.IsSet)
                if (issuedDocument.DateOption.Value != null)
                    writer.WriteString("date", issuedDocument.DateOption.Value!.Value.ToString(DateFormat));
                else
                    writer.WriteNull("date");

            if (issuedDocument.YearOption.IsSet)
                if (issuedDocument.YearOption.Value != null)
                    writer.WriteNumber("year", issuedDocument.YearOption.Value!.Value);
                else
                    writer.WriteNull("year");

            if (issuedDocument.CurrencyOption.IsSet)
            {
                writer.WritePropertyName("currency");
                JsonSerializer.Serialize(writer, issuedDocument.Currency, jsonSerializerOptions);
            }
            if (issuedDocument.LanguageOption.IsSet)
            {
                writer.WritePropertyName("language");
                JsonSerializer.Serialize(writer, issuedDocument.Language, jsonSerializerOptions);
            }
            if (issuedDocument.SubjectOption.IsSet)
                if (issuedDocument.SubjectOption.Value != null)
                    writer.WriteString("subject", issuedDocument.Subject);
                else
                    writer.WriteNull("subject");

            if (issuedDocument.VisibleSubjectOption.IsSet)
                if (issuedDocument.VisibleSubjectOption.Value != null)
                    writer.WriteString("visible_subject", issuedDocument.VisibleSubject);
                else
                    writer.WriteNull("visible_subject");

            if (issuedDocument.RcCenterOption.IsSet)
                if (issuedDocument.RcCenterOption.Value != null)
                    writer.WriteString("rc_center", issuedDocument.RcCenter);
                else
                    writer.WriteNull("rc_center");

            if (issuedDocument.NotesOption.IsSet)
                if (issuedDocument.NotesOption.Value != null)
                    writer.WriteString("notes", issuedDocument.Notes);
                else
                    writer.WriteNull("notes");

            if (issuedDocument.RivalsaOption.IsSet)
                if (issuedDocument.RivalsaOption.Value != null)
                    writer.WriteNumber("rivalsa", issuedDocument.RivalsaOption.Value!.Value);
                else
                    writer.WriteNull("rivalsa");

            if (issuedDocument.CassaOption.IsSet)
                if (issuedDocument.CassaOption.Value != null)
                    writer.WriteNumber("cassa", issuedDocument.CassaOption.Value!.Value);
                else
                    writer.WriteNull("cassa");

            if (issuedDocument.AmountCassaOption.IsSet)
                if (issuedDocument.AmountCassaOption.Value != null)
                    writer.WriteNumber("amount_cassa", issuedDocument.AmountCassaOption.Value!.Value);
                else
                    writer.WriteNull("amount_cassa");

            if (issuedDocument.CassaTaxableOption.IsSet)
                if (issuedDocument.CassaTaxableOption.Value != null)
                    writer.WriteNumber("cassa_taxable", issuedDocument.CassaTaxableOption.Value!.Value);
                else
                    writer.WriteNull("cassa_taxable");

            if (issuedDocument.AmountCassaTaxableOption.IsSet)
                if (issuedDocument.AmountCassaTaxableOption.Value != null)
                    writer.WriteNumber("amount_cassa_taxable", issuedDocument.AmountCassaTaxableOption.Value!.Value);
                else
                    writer.WriteNull("amount_cassa_taxable");

            if (issuedDocument.Cassa2Option.IsSet)
                if (issuedDocument.Cassa2Option.Value != null)
                    writer.WriteNumber("cassa2", issuedDocument.Cassa2Option.Value!.Value);
                else
                    writer.WriteNull("cassa2");

            if (issuedDocument.AmountCassa2Option.IsSet)
                if (issuedDocument.AmountCassa2Option.Value != null)
                    writer.WriteNumber("amount_cassa2", issuedDocument.AmountCassa2Option.Value!.Value);
                else
                    writer.WriteNull("amount_cassa2");

            if (issuedDocument.Cassa2TaxableOption.IsSet)
                if (issuedDocument.Cassa2TaxableOption.Value != null)
                    writer.WriteNumber("cassa2_taxable", issuedDocument.Cassa2TaxableOption.Value!.Value);
                else
                    writer.WriteNull("cassa2_taxable");

            if (issuedDocument.AmountCassa2TaxableOption.IsSet)
                if (issuedDocument.AmountCassa2TaxableOption.Value != null)
                    writer.WriteNumber("amount_cassa2_taxable", issuedDocument.AmountCassa2TaxableOption.Value!.Value);
                else
                    writer.WriteNull("amount_cassa2_taxable");

            if (issuedDocument.GlobalCassaTaxableOption.IsSet)
                if (issuedDocument.GlobalCassaTaxableOption.Value != null)
                    writer.WriteNumber("global_cassa_taxable", issuedDocument.GlobalCassaTaxableOption.Value!.Value);
                else
                    writer.WriteNull("global_cassa_taxable");

            if (issuedDocument.AmountGlobalCassaTaxableOption.IsSet)
                if (issuedDocument.AmountGlobalCassaTaxableOption.Value != null)
                    writer.WriteNumber("amount_global_cassa_taxable", issuedDocument.AmountGlobalCassaTaxableOption.Value!.Value);
                else
                    writer.WriteNull("amount_global_cassa_taxable");

            if (issuedDocument.WithholdingTaxOption.IsSet)
                if (issuedDocument.WithholdingTaxOption.Value != null)
                    writer.WriteNumber("withholding_tax", issuedDocument.WithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("withholding_tax");

            if (issuedDocument.WithholdingTaxTaxableOption.IsSet)
                if (issuedDocument.WithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("withholding_tax_taxable", issuedDocument.WithholdingTaxTaxableOption.Value!.Value);
                else
                    writer.WriteNull("withholding_tax_taxable");

            if (issuedDocument.OtherWithholdingTaxOption.IsSet)
                if (issuedDocument.OtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("other_withholding_tax", issuedDocument.OtherWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("other_withholding_tax");

            if (issuedDocument.StampDutyOption.IsSet)
                if (issuedDocument.StampDutyOption.Value != null)
                    writer.WriteNumber("stamp_duty", issuedDocument.StampDutyOption.Value!.Value);
                else
                    writer.WriteNull("stamp_duty");

            if (issuedDocument.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("payment_method");
                JsonSerializer.Serialize(writer, issuedDocument.PaymentMethod, jsonSerializerOptions);
            }
            if (issuedDocument.UseSplitPaymentOption.IsSet)
                if (issuedDocument.UseSplitPaymentOption.Value != null)
                    writer.WriteBoolean("use_split_payment", issuedDocument.UseSplitPaymentOption.Value!.Value);
                else
                    writer.WriteNull("use_split_payment");

            if (issuedDocument.UseGrossPricesOption.IsSet)
                if (issuedDocument.UseGrossPricesOption.Value != null)
                    writer.WriteBoolean("use_gross_prices", issuedDocument.UseGrossPricesOption.Value!.Value);
                else
                    writer.WriteNull("use_gross_prices");

            if (issuedDocument.EInvoiceOption.IsSet)
                if (issuedDocument.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", issuedDocument.EInvoiceOption.Value!.Value);
                else
                    writer.WriteNull("e_invoice");

            if (issuedDocument.EiDataOption.IsSet)
                if (issuedDocument.EiDataOption.Value != null)
                {
                    writer.WritePropertyName("ei_data");
                    JsonSerializer.Serialize(writer, issuedDocument.EiData, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_data");
            if (issuedDocument.EiCassaTypeOption.IsSet)
                if (issuedDocument.EiCassaTypeOption.Value != null)
                    writer.WriteString("ei_cassa_type", issuedDocument.EiCassaType);
                else
                    writer.WriteNull("ei_cassa_type");

            if (issuedDocument.EiCassa2TypeOption.IsSet)
                if (issuedDocument.EiCassa2TypeOption.Value != null)
                    writer.WriteString("ei_cassa2_type", issuedDocument.EiCassa2Type);
                else
                    writer.WriteNull("ei_cassa2_type");

            if (issuedDocument.EiWithholdingTaxCausalOption.IsSet)
                if (issuedDocument.EiWithholdingTaxCausalOption.Value != null)
                    writer.WriteString("ei_withholding_tax_causal", issuedDocument.EiWithholdingTaxCausal);
                else
                    writer.WriteNull("ei_withholding_tax_causal");

            if (issuedDocument.EiOtherWithholdingTaxTypeOption.IsSet)
                if (issuedDocument.EiOtherWithholdingTaxTypeOption.Value != null)
                    writer.WriteString("ei_other_withholding_tax_type", issuedDocument.EiOtherWithholdingTaxType);
                else
                    writer.WriteNull("ei_other_withholding_tax_type");

            if (issuedDocument.EiOtherWithholdingTaxCausalOption.IsSet)
                if (issuedDocument.EiOtherWithholdingTaxCausalOption.Value != null)
                    writer.WriteString("ei_other_withholding_tax_causal", issuedDocument.EiOtherWithholdingTaxCausal);
                else
                    writer.WriteNull("ei_other_withholding_tax_causal");

            if (issuedDocument.ItemsListOption.IsSet)
                if (issuedDocument.ItemsListOption.Value != null)
                {
                    writer.WritePropertyName("items_list");
                    JsonSerializer.Serialize(writer, issuedDocument.ItemsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("items_list");
            if (issuedDocument.PaymentsListOption.IsSet)
                if (issuedDocument.PaymentsListOption.Value != null)
                {
                    writer.WritePropertyName("payments_list");
                    JsonSerializer.Serialize(writer, issuedDocument.PaymentsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payments_list");
            if (issuedDocument.TemplateOption.IsSet)
            {
                writer.WritePropertyName("template");
                JsonSerializer.Serialize(writer, issuedDocument.Template, jsonSerializerOptions);
            }
            if (issuedDocument.DeliveryNoteTemplateOption.IsSet)
            {
                writer.WritePropertyName("delivery_note_template");
                JsonSerializer.Serialize(writer, issuedDocument.DeliveryNoteTemplate, jsonSerializerOptions);
            }
            if (issuedDocument.AccInvTemplateOption.IsSet)
            {
                writer.WritePropertyName("acc_inv_template");
                JsonSerializer.Serialize(writer, issuedDocument.AccInvTemplate, jsonSerializerOptions);
            }
            if (issuedDocument.HMarginsOption.IsSet)
                if (issuedDocument.HMarginsOption.Value != null)
                    writer.WriteNumber("h_margins", issuedDocument.HMarginsOption.Value!.Value);
                else
                    writer.WriteNull("h_margins");

            if (issuedDocument.VMarginsOption.IsSet)
                if (issuedDocument.VMarginsOption.Value != null)
                    writer.WriteNumber("v_margins", issuedDocument.VMarginsOption.Value!.Value);
                else
                    writer.WriteNull("v_margins");

            if (issuedDocument.ShowPaymentsOption.IsSet)
                if (issuedDocument.ShowPaymentsOption.Value != null)
                    writer.WriteBoolean("show_payments", issuedDocument.ShowPaymentsOption.Value!.Value);
                else
                    writer.WriteNull("show_payments");

            if (issuedDocument.ShowPaymentMethodOption.IsSet)
                if (issuedDocument.ShowPaymentMethodOption.Value != null)
                    writer.WriteBoolean("show_payment_method", issuedDocument.ShowPaymentMethodOption.Value!.Value);
                else
                    writer.WriteNull("show_payment_method");

            if (issuedDocument.ShowTotalsOption.IsSet)
            {
                var showTotalsRawValue = ShowTotalsModeValueConverter.ToJsonValue(issuedDocument.ShowTotals!.Value);
                writer.WriteString("show_totals", showTotalsRawValue);
            }
            if (issuedDocument.ShowNotificationButtonOption.IsSet)
                if (issuedDocument.ShowNotificationButtonOption.Value != null)
                    writer.WriteBoolean("show_notification_button", issuedDocument.ShowNotificationButtonOption.Value!.Value);
                else
                    writer.WriteNull("show_notification_button");

            if (issuedDocument.ShowTspayButtonOption.IsSet)
                if (issuedDocument.ShowTspayButtonOption.Value != null)
                    writer.WriteBoolean("show_tspay_button", issuedDocument.ShowTspayButtonOption.Value!.Value);
                else
                    writer.WriteNull("show_tspay_button");

            if (issuedDocument.DeliveryNoteOption.IsSet)
                if (issuedDocument.DeliveryNoteOption.Value != null)
                    writer.WriteBoolean("delivery_note", issuedDocument.DeliveryNoteOption.Value!.Value);
                else
                    writer.WriteNull("delivery_note");

            if (issuedDocument.AccompanyingInvoiceOption.IsSet)
                if (issuedDocument.AccompanyingInvoiceOption.Value != null)
                    writer.WriteBoolean("accompanying_invoice", issuedDocument.AccompanyingInvoiceOption.Value!.Value);
                else
                    writer.WriteNull("accompanying_invoice");

            if (issuedDocument.DnNumberOption.IsSet)
                if (issuedDocument.DnNumberOption.Value != null)
                    writer.WriteNumber("dn_number", issuedDocument.DnNumberOption.Value!.Value);
                else
                    writer.WriteNull("dn_number");

            if (issuedDocument.DnDateOption.IsSet)
                if (issuedDocument.DnDateOption.Value != null)
                    writer.WriteString("dn_date", issuedDocument.DnDateOption.Value!.Value.ToString(DnDateFormat));
                else
                    writer.WriteNull("dn_date");

            if (issuedDocument.DnAiPackagesNumberOption.IsSet)
                if (issuedDocument.DnAiPackagesNumberOption.Value != null)
                    writer.WriteString("dn_ai_packages_number", issuedDocument.DnAiPackagesNumber);
                else
                    writer.WriteNull("dn_ai_packages_number");

            if (issuedDocument.DnAiWeightOption.IsSet)
                if (issuedDocument.DnAiWeightOption.Value != null)
                    writer.WriteString("dn_ai_weight", issuedDocument.DnAiWeight);
                else
                    writer.WriteNull("dn_ai_weight");

            if (issuedDocument.DnAiCausalOption.IsSet)
                if (issuedDocument.DnAiCausalOption.Value != null)
                    writer.WriteString("dn_ai_causal", issuedDocument.DnAiCausal);
                else
                    writer.WriteNull("dn_ai_causal");

            if (issuedDocument.DnAiDestinationOption.IsSet)
                if (issuedDocument.DnAiDestinationOption.Value != null)
                    writer.WriteString("dn_ai_destination", issuedDocument.DnAiDestination);
                else
                    writer.WriteNull("dn_ai_destination");

            if (issuedDocument.DnAiTransporterOption.IsSet)
                if (issuedDocument.DnAiTransporterOption.Value != null)
                    writer.WriteString("dn_ai_transporter", issuedDocument.DnAiTransporter);
                else
                    writer.WriteNull("dn_ai_transporter");

            if (issuedDocument.DnAiNotesOption.IsSet)
                if (issuedDocument.DnAiNotesOption.Value != null)
                    writer.WriteString("dn_ai_notes", issuedDocument.DnAiNotes);
                else
                    writer.WriteNull("dn_ai_notes");

            if (issuedDocument.IsMarkedOption.IsSet)
                if (issuedDocument.IsMarkedOption.Value != null)
                    writer.WriteBoolean("is_marked", issuedDocument.IsMarkedOption.Value!.Value);
                else
                    writer.WriteNull("is_marked");

            if (issuedDocument.AmountNetOption.IsSet)
                if (issuedDocument.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", issuedDocument.AmountNetOption.Value!.Value);
                else
                    writer.WriteNull("amount_net");

            if (issuedDocument.AmountVatOption.IsSet)
                if (issuedDocument.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", issuedDocument.AmountVatOption.Value!.Value);
                else
                    writer.WriteNull("amount_vat");

            if (issuedDocument.AmountGrossOption.IsSet)
                if (issuedDocument.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", issuedDocument.AmountGrossOption.Value!.Value);
                else
                    writer.WriteNull("amount_gross");

            if (issuedDocument.AmountDueDiscountOption.IsSet)
                if (issuedDocument.AmountDueDiscountOption.Value != null)
                    writer.WriteNumber("amount_due_discount", issuedDocument.AmountDueDiscountOption.Value!.Value);
                else
                    writer.WriteNull("amount_due_discount");

            if (issuedDocument.AmountRivalsaOption.IsSet)
                if (issuedDocument.AmountRivalsaOption.Value != null)
                    writer.WriteNumber("amount_rivalsa", issuedDocument.AmountRivalsaOption.Value!.Value);
                else
                    writer.WriteNull("amount_rivalsa");

            if (issuedDocument.AmountRivalsaTaxableOption.IsSet)
                if (issuedDocument.AmountRivalsaTaxableOption.Value != null)
                    writer.WriteNumber("amount_rivalsa_taxable", issuedDocument.AmountRivalsaTaxableOption.Value!.Value);
                else
                    writer.WriteNull("amount_rivalsa_taxable");

            if (issuedDocument.AmountWithholdingTaxOption.IsSet)
                if (issuedDocument.AmountWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax", issuedDocument.AmountWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("amount_withholding_tax");

            if (issuedDocument.AmountWithholdingTaxTaxableOption.IsSet)
                if (issuedDocument.AmountWithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax_taxable", issuedDocument.AmountWithholdingTaxTaxableOption.Value!.Value);
                else
                    writer.WriteNull("amount_withholding_tax_taxable");

            if (issuedDocument.AmountOtherWithholdingTaxOption.IsSet)
                if (issuedDocument.AmountOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax", issuedDocument.AmountOtherWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax");

            if (issuedDocument.AmountOtherWithholdingTaxTaxableOption.IsSet)
                if (issuedDocument.AmountOtherWithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax_taxable", issuedDocument.AmountOtherWithholdingTaxTaxableOption.Value!.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax_taxable");

            if (issuedDocument.AmountEnasarcoTaxableOption.IsSet)
                if (issuedDocument.AmountEnasarcoTaxableOption.Value != null)
                    writer.WriteNumber("amount_enasarco_taxable", issuedDocument.AmountEnasarcoTaxableOption.Value!.Value);
                else
                    writer.WriteNull("amount_enasarco_taxable");

            if (issuedDocument.ExtraDataOption.IsSet)
                if (issuedDocument.ExtraDataOption.Value != null)
                {
                    writer.WritePropertyName("extra_data");
                    JsonSerializer.Serialize(writer, issuedDocument.ExtraData, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("extra_data");
            if (issuedDocument.SeenDateOption.IsSet)
                if (issuedDocument.SeenDateOption.Value != null)
                    writer.WriteString("seen_date", issuedDocument.SeenDateOption.Value!.Value.ToString(SeenDateFormat));
                else
                    writer.WriteNull("seen_date");

            if (issuedDocument.NextDueDateOption.IsSet)
                if (issuedDocument.NextDueDateOption.Value != null)
                    writer.WriteString("next_due_date", issuedDocument.NextDueDateOption.Value!.Value.ToString(NextDueDateFormat));
                else
                    writer.WriteNull("next_due_date");

            if (issuedDocument.UrlOption.IsSet)
                if (issuedDocument.UrlOption.Value != null)
                    writer.WriteString("url", issuedDocument.Url);
                else
                    writer.WriteNull("url");

            if (issuedDocument.DnUrlOption.IsSet)
                if (issuedDocument.DnUrlOption.Value != null)
                    writer.WriteString("dn_url", issuedDocument.DnUrl);
                else
                    writer.WriteNull("dn_url");

            if (issuedDocument.AiUrlOption.IsSet)
                if (issuedDocument.AiUrlOption.Value != null)
                    writer.WriteString("ai_url", issuedDocument.AiUrl);
                else
                    writer.WriteNull("ai_url");

            if (issuedDocument.AttachmentUrlOption.IsSet)
                if (issuedDocument.AttachmentUrlOption.Value != null)
                    writer.WriteString("attachment_url", issuedDocument.AttachmentUrl);
                else
                    writer.WriteNull("attachment_url");

            if (issuedDocument.AttachmentTokenOption.IsSet)
                if (issuedDocument.AttachmentTokenOption.Value != null)
                    writer.WriteString("attachment_token", issuedDocument.AttachmentToken);
                else
                    writer.WriteNull("attachment_token");

            if (issuedDocument.EiRawOption.IsSet)
                if (issuedDocument.EiRawOption.Value != null)
                {
                    writer.WritePropertyName("ei_raw");
                    JsonSerializer.Serialize(writer, issuedDocument.EiRaw, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("ei_raw");
            var eiStatusRawValue = IssuedDocument.EiStatusEnumToJsonValue(issuedDocument.EiStatusOption.Value!.Value);
            if (eiStatusRawValue != null)
                writer.WriteString("ei_status", eiStatusRawValue);
            else
                writer.WriteNull("ei_status");

            if (issuedDocument.PriceListIdOption.IsSet)
                if (issuedDocument.PriceListIdOption.Value != null)
                    writer.WriteString("price_list_id", issuedDocument.PriceListId);
                else
                    writer.WriteNull("price_list_id");

            if (issuedDocument.LockedOption.IsSet)
                if (issuedDocument.LockedOption.Value != null)
                    writer.WriteBoolean("locked", issuedDocument.LockedOption.Value!.Value);
                else
                    writer.WriteNull("locked");

            if (issuedDocument.CreatedAtOption.IsSet)
                if (issuedDocument.CreatedAtOption.Value != null)
                    writer.WriteString("created_at", issuedDocument.CreatedAt);
                else
                    writer.WriteNull("created_at");

            if (issuedDocument.UpdatedAtOption.IsSet)
                if (issuedDocument.UpdatedAtOption.Value != null)
                    writer.WriteString("updated_at", issuedDocument.UpdatedAt);
                else
                    writer.WriteNull("updated_at");
        }
    }
}
