// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Client type
    /// </summary>
    /// <value>Client type</value>
    public enum ClientType
    {
        /// <summary>
        /// Enum Company for value: company
        /// </summary>
        Company = 1,

        /// <summary>
        /// Enum Person for value: person
        /// </summary>
        Person = 2,

        /// <summary>
        /// Enum Pa for value: pa
        /// </summary>
        Pa = 3,

        /// <summary>
        /// Enum Condo for value: condo
        /// </summary>
        Condo = 4
    }

    /// <summary>
    /// Converts <see cref="ClientType"/> to and from the JSON value
    /// </summary>
    public static class ClientTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ClientType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ClientType FromString(string value)
        {
            if (value.Equals("company"))
                return ClientType.Company;

            if (value.Equals("person"))
                return ClientType.Person;

            if (value.Equals("pa"))
                return ClientType.Pa;

            if (value.Equals("condo"))
                return ClientType.Condo;

            throw new NotImplementedException($"Could not convert value to type ClientType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ClientType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ClientType? FromStringOrDefault(string value)
        {
            if (value.Equals("company"))
                return ClientType.Company;

            if (value.Equals("person"))
                return ClientType.Person;

            if (value.Equals("pa"))
                return ClientType.Pa;

            if (value.Equals("condo"))
                return ClientType.Condo;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ClientType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ClientType value)
        {
            if (value == ClientType.Company)
                return "company";

            if (value == ClientType.Person)
                return "person";

            if (value == ClientType.Pa)
                return "pa";

            if (value == ClientType.Condo)
                return "condo";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ClientTypeJsonConverter : JsonConverter<ClientType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ClientType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ClientType? result = rawValue == null
                ? null
                : ClientTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ClientType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ClientType clientType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(ClientTypeValueConverter.ToJsonValue(clientType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClientType"/>
    /// </summary>
    public class ClientTypeNullableJsonConverter : JsonConverter<ClientType?>
    {
        /// <summary>
        /// Returns a ClientType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ClientType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ClientType? result = rawValue == null
                ? null
                : ClientTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ClientType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clientType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ClientType? clientType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(clientType.HasValue ? ClientTypeValueConverter.ToJsonValue(clientType.Value).ToString() : "null");
        }
    }
}
