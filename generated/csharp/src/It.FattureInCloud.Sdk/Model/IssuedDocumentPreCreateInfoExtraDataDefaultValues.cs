// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document extra data default values
    /// </summary>
    [DataContract(Name = "IssuedDocumentPreCreateInfo_extra_data_default_values")]
    public partial class IssuedDocumentPreCreateInfoExtraDataDefaultValues : IEquatable<IssuedDocumentPreCreateInfoExtraDataDefaultValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentPreCreateInfoExtraDataDefaultValues" /> class.
        /// </summary>
        /// <param name="tsCommunication">tsCommunication.</param>
        /// <param name="tsTipoSpesa">tsTipoSpesa.</param>
        /// <param name="tsFlagTipoSpesa">tsFlagTipoSpesa.</param>
        /// <param name="tsPagamentoTracciato">tsPagamentoTracciato.</param>
        public IssuedDocumentPreCreateInfoExtraDataDefaultValues(bool tsCommunication = default, string tsTipoSpesa = default, int tsFlagTipoSpesa = default, bool tsPagamentoTracciato = default)
        {
            this._TsCommunication = tsCommunication;
            if (this.TsCommunication != null)
            {
                this._flagTsCommunication = true;
            }
            this._TsTipoSpesa = tsTipoSpesa;
            if (this.TsTipoSpesa != null)
            {
                this._flagTsTipoSpesa = true;
            }
            this._TsFlagTipoSpesa = tsFlagTipoSpesa;
            if (this.TsFlagTipoSpesa != null)
            {
                this._flagTsFlagTipoSpesa = true;
            }
            this._TsPagamentoTracciato = tsPagamentoTracciato;
            if (this.TsPagamentoTracciato != null)
            {
                this._flagTsPagamentoTracciato = true;
            }
        }

        /// <summary>
        /// Gets or Sets TsCommunication
        /// </summary>
        [DataMember(Name = "ts_communication", EmitDefaultValue = true)]
        public bool TsCommunication
        {
            get{ return _TsCommunication;}
            set
            {
                _TsCommunication = value;
                _flagTsCommunication = true;
            }
        }
        private bool _TsCommunication;
        private bool _flagTsCommunication;

        /// <summary>
        /// Returns false as TsCommunication should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsCommunication()
        {
            return _flagTsCommunication;
        }
        /// <summary>
        /// Gets or Sets TsTipoSpesa
        /// </summary>
        [DataMember(Name = "ts_tipo_spesa", EmitDefaultValue = true)]
        public string TsTipoSpesa
        {
            get{ return _TsTipoSpesa;}
            set
            {
                _TsTipoSpesa = value;
                _flagTsTipoSpesa = true;
            }
        }
        private string _TsTipoSpesa;
        private bool _flagTsTipoSpesa;

        /// <summary>
        /// Returns false as TsTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsTipoSpesa()
        {
            return _flagTsTipoSpesa;
        }
        /// <summary>
        /// Gets or Sets TsFlagTipoSpesa
        /// </summary>
        [DataMember(Name = "ts_flag_tipo_spesa", EmitDefaultValue = true)]
        public int TsFlagTipoSpesa
        {
            get{ return _TsFlagTipoSpesa;}
            set
            {
                _TsFlagTipoSpesa = value;
                _flagTsFlagTipoSpesa = true;
            }
        }
        private int _TsFlagTipoSpesa;
        private bool _flagTsFlagTipoSpesa;

        /// <summary>
        /// Returns false as TsFlagTipoSpesa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsFlagTipoSpesa()
        {
            return _flagTsFlagTipoSpesa;
        }
        /// <summary>
        /// Gets or Sets TsPagamentoTracciato
        /// </summary>
        [DataMember(Name = "ts_pagamento_tracciato", EmitDefaultValue = true)]
        public bool TsPagamentoTracciato
        {
            get{ return _TsPagamentoTracciato;}
            set
            {
                _TsPagamentoTracciato = value;
                _flagTsPagamentoTracciato = true;
            }
        }
        private bool _TsPagamentoTracciato;
        private bool _flagTsPagamentoTracciato;

        /// <summary>
        /// Returns false as TsPagamentoTracciato should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsPagamentoTracciato()
        {
            return _flagTsPagamentoTracciato;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPreCreateInfoExtraDataDefaultValues {\n");
            sb.Append("  TsCommunication: ").Append(TsCommunication).Append("\n");
            sb.Append("  TsTipoSpesa: ").Append(TsTipoSpesa).Append("\n");
            sb.Append("  TsFlagTipoSpesa: ").Append(TsFlagTipoSpesa).Append("\n");
            sb.Append("  TsPagamentoTracciato: ").Append(TsPagamentoTracciato).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentPreCreateInfoExtraDataDefaultValues);
        }

        /// <summary>
        /// Returns true if IssuedDocumentPreCreateInfoExtraDataDefaultValues instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentPreCreateInfoExtraDataDefaultValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentPreCreateInfoExtraDataDefaultValues input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TsCommunication == input.TsCommunication ||
                    this.TsCommunication.Equals(input.TsCommunication)
                ) && 
                (
                    this.TsTipoSpesa == input.TsTipoSpesa ||
                    (this.TsTipoSpesa != null &&
                    this.TsTipoSpesa.Equals(input.TsTipoSpesa))
                ) && 
                (
                    this.TsFlagTipoSpesa == input.TsFlagTipoSpesa ||
                    this.TsFlagTipoSpesa.Equals(input.TsFlagTipoSpesa)
                ) && 
                (
                    this.TsPagamentoTracciato == input.TsPagamentoTracciato ||
                    this.TsPagamentoTracciato.Equals(input.TsPagamentoTracciato)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TsCommunication.GetHashCode();
                if (this.TsTipoSpesa != null)
                {
                    hashCode = (hashCode * 59) + this.TsTipoSpesa.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TsFlagTipoSpesa.GetHashCode();
                hashCode = (hashCode * 59) + this.TsPagamentoTracciato.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentPreCreateInfoExtraDataDefaultValues" />
    /// </summary>
    public class IssuedDocumentPreCreateInfoExtraDataDefaultValuesJsonConverter : JsonConverter<IssuedDocumentPreCreateInfoExtraDataDefaultValues>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentPreCreateInfoExtraDataDefaultValues" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentPreCreateInfoExtraDataDefaultValues Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> tsCommunication = default;
            Option<string?> tsTipoSpesa = default;
            Option<int?> tsFlagTipoSpesa = default;
            Option<bool?> tsPagamentoTracciato = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ts_communication":
                            tsCommunication = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_tipo_spesa":
                            tsTipoSpesa = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ts_flag_tipo_spesa":
                            tsFlagTipoSpesa = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "ts_pagamento_tracciato":
                            tsPagamentoTracciato = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IssuedDocumentPreCreateInfoExtraDataDefaultValues(tsCommunication, tsTipoSpesa, tsFlagTipoSpesa, tsPagamentoTracciato);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentPreCreateInfoExtraDataDefaultValues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfoExtraDataDefaultValues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentPreCreateInfoExtraDataDefaultValues issuedDocumentPreCreateInfoExtraDataDefaultValues, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentPreCreateInfoExtraDataDefaultValues, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentPreCreateInfoExtraDataDefaultValues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfoExtraDataDefaultValues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentPreCreateInfoExtraDataDefaultValues issuedDocumentPreCreateInfoExtraDataDefaultValues, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsCommunicationOption.IsSet)
                if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsCommunicationOption.Value != null)
                    writer.WriteBoolean("ts_communication", issuedDocumentPreCreateInfoExtraDataDefaultValues.TsCommunicationOption.Value!.Value);
                else
                    writer.WriteNull("ts_communication");

            if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsTipoSpesaOption.IsSet)
                if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsTipoSpesaOption.Value != null)
                    writer.WriteString("ts_tipo_spesa", issuedDocumentPreCreateInfoExtraDataDefaultValues.TsTipoSpesa);
                else
                    writer.WriteNull("ts_tipo_spesa");

            if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsFlagTipoSpesaOption.IsSet)
                if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsFlagTipoSpesaOption.Value != null)
                    writer.WriteNumber("ts_flag_tipo_spesa", issuedDocumentPreCreateInfoExtraDataDefaultValues.TsFlagTipoSpesaOption.Value!.Value);
                else
                    writer.WriteNull("ts_flag_tipo_spesa");

            if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsPagamentoTracciatoOption.IsSet)
                if (issuedDocumentPreCreateInfoExtraDataDefaultValues.TsPagamentoTracciatoOption.Value != null)
                    writer.WriteBoolean("ts_pagamento_tracciato", issuedDocumentPreCreateInfoExtraDataDefaultValues.TsPagamentoTracciatoOption.Value!.Value);
                else
                    writer.WriteNull("ts_pagamento_tracciato");
        }
    }
}
