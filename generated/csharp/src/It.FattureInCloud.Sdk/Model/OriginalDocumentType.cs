// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document original document type
    /// </summary>
    /// <value>Issued document original document type</value>
    public enum OriginalDocumentType
    {
        /// <summary>
        /// Enum Ordine for value: ordine
        /// </summary>
        Ordine = 1,

        /// <summary>
        /// Enum Contratto for value: contratto
        /// </summary>
        Contratto = 2,

        /// <summary>
        /// Enum Convenzione for value: convenzione
        /// </summary>
        Convenzione = 3
    }

    /// <summary>
    /// Converts <see cref="OriginalDocumentType"/> to and from the JSON value
    /// </summary>
    public static class OriginalDocumentTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OriginalDocumentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OriginalDocumentType FromString(string value)
        {
            if (value.Equals("ordine"))
                return OriginalDocumentType.Ordine;

            if (value.Equals("contratto"))
                return OriginalDocumentType.Contratto;

            if (value.Equals("convenzione"))
                return OriginalDocumentType.Convenzione;

            throw new NotImplementedException($"Could not convert value to type OriginalDocumentType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="OriginalDocumentType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OriginalDocumentType? FromStringOrDefault(string value)
        {
            if (value.Equals("ordine"))
                return OriginalDocumentType.Ordine;

            if (value.Equals("contratto"))
                return OriginalDocumentType.Contratto;

            if (value.Equals("convenzione"))
                return OriginalDocumentType.Convenzione;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OriginalDocumentType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(OriginalDocumentType value)
        {
            if (value == OriginalDocumentType.Ordine)
                return "ordine";

            if (value == OriginalDocumentType.Contratto)
                return "contratto";

            if (value == OriginalDocumentType.Convenzione)
                return "convenzione";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OriginalDocumentType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OriginalDocumentTypeJsonConverter : JsonConverter<OriginalDocumentType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OriginalDocumentType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OriginalDocumentType? result = rawValue == null
                ? null
                : OriginalDocumentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the OriginalDocumentType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originalDocumentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OriginalDocumentType originalDocumentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(OriginalDocumentTypeValueConverter.ToJsonValue(originalDocumentType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OriginalDocumentType"/>
    /// </summary>
    public class OriginalDocumentTypeNullableJsonConverter : JsonConverter<OriginalDocumentType?>
    {
        /// <summary>
        /// Returns a OriginalDocumentType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OriginalDocumentType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OriginalDocumentType? result = rawValue == null
                ? null
                : OriginalDocumentTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the OriginalDocumentType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originalDocumentType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OriginalDocumentType? originalDocumentType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(originalDocumentType.HasValue ? OriginalDocumentTypeValueConverter.ToJsonValue(originalDocumentType.Value).ToString() : "null");
        }
    }
}
