// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ListF24ResponseAggregation
    /// </summary>
    [DataContract(Name = "ListF24ResponseAggregation")]
    public partial class ListF24ResponseAggregation : IEquatable<ListF24ResponseAggregation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListF24ResponseAggregation" /> class.
        /// </summary>
        /// <param name="aggregatedData">aggregatedData.</param>
        public ListF24ResponseAggregation(ListF24ResponseAggregatedData aggregatedData = default)
        {
            this._AggregatedData = aggregatedData;
            if (this.AggregatedData != null)
            {
                this._flagAggregatedData = true;
            }
        }

        /// <summary>
        /// Gets or Sets AggregatedData
        /// </summary>
        [DataMember(Name = "aggregated_data", EmitDefaultValue = false)]
        public ListF24ResponseAggregatedData AggregatedData
        {
            get{ return _AggregatedData;}
            set
            {
                _AggregatedData = value;
                _flagAggregatedData = true;
            }
        }
        private ListF24ResponseAggregatedData _AggregatedData;
        private bool _flagAggregatedData;

        /// <summary>
        /// Returns false as AggregatedData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAggregatedData()
        {
            return _flagAggregatedData;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListF24ResponseAggregation {\n");
            sb.Append("  AggregatedData: ").Append(AggregatedData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListF24ResponseAggregation);
        }

        /// <summary>
        /// Returns true if ListF24ResponseAggregation instances are equal
        /// </summary>
        /// <param name="input">Instance of ListF24ResponseAggregation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListF24ResponseAggregation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AggregatedData == input.AggregatedData ||
                    (this.AggregatedData != null &&
                    this.AggregatedData.Equals(input.AggregatedData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AggregatedData != null)
                {
                    hashCode = (hashCode * 59) + this.AggregatedData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="ListF24ResponseAggregation" />
    /// </summary>
    public class ListF24ResponseAggregationJsonConverter : JsonConverter<ListF24ResponseAggregation>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListF24ResponseAggregation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListF24ResponseAggregation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ListF24ResponseAggregatedData?> aggregatedData = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "aggregated_data":
                            aggregatedData = new Option<ListF24ResponseAggregatedData?>(JsonSerializer.Deserialize<ListF24ResponseAggregatedData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (aggregatedData.IsSet && aggregatedData.Value == null)
                throw new ArgumentNullException(nameof(aggregatedData), "Property is not nullable for class ListF24ResponseAggregation.");

            return new ListF24ResponseAggregation(aggregatedData);
        }

        /// <summary>
        /// Serializes a <see cref="ListF24ResponseAggregation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listF24ResponseAggregation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListF24ResponseAggregation listF24ResponseAggregation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listF24ResponseAggregation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListF24ResponseAggregation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listF24ResponseAggregation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListF24ResponseAggregation listF24ResponseAggregation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listF24ResponseAggregation.AggregatedDataOption.IsSet && listF24ResponseAggregation.AggregatedData == null)
                throw new ArgumentNullException(nameof(listF24ResponseAggregation.AggregatedData), "Property is required for class ListF24ResponseAggregation.");

            if (listF24ResponseAggregation.AggregatedDataOption.IsSet)
            {
                writer.WritePropertyName("aggregated_data");
                JsonSerializer.Serialize(writer, listF24ResponseAggregation.AggregatedData, jsonSerializerOptions);
            }
        }
    }
}
