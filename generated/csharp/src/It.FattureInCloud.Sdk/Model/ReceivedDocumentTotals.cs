// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocumentTotals
    /// </summary>
    [DataContract(Name = "ReceivedDocumentTotals")]
    public partial class ReceivedDocumentTotals : IEquatable<ReceivedDocumentTotals>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentTotals" /> class.
        /// </summary>
        /// <param name="amountNet">Received document total net amount.</param>
        /// <param name="amountVat">Received document total vat amount.</param>
        /// <param name="amountGross">Received document total gross amount.</param>
        /// <param name="amountWithholdingTax">Received document withholding tax amount.</param>
        /// <param name="amountOtherWithholdingTax">Received document other withholding tax amount.</param>
        /// <param name="amountDue">Received document total amount due.</param>
        /// <param name="paymentsSum">Received document payments sum.</param>
        public ReceivedDocumentTotals(decimal amountNet = default, decimal amountVat = default, decimal amountGross = default, decimal amountWithholdingTax = default, decimal amountOtherWithholdingTax = default, decimal amountDue = default, decimal paymentsSum = default)
        {
            this._AmountNet = amountNet;
            if (this.AmountNet != null)
            {
                this._flagAmountNet = true;
            }
            this._AmountVat = amountVat;
            if (this.AmountVat != null)
            {
                this._flagAmountVat = true;
            }
            this._AmountGross = amountGross;
            if (this.AmountGross != null)
            {
                this._flagAmountGross = true;
            }
            this._AmountWithholdingTax = amountWithholdingTax;
            if (this.AmountWithholdingTax != null)
            {
                this._flagAmountWithholdingTax = true;
            }
            this._AmountOtherWithholdingTax = amountOtherWithholdingTax;
            if (this.AmountOtherWithholdingTax != null)
            {
                this._flagAmountOtherWithholdingTax = true;
            }
            this._AmountDue = amountDue;
            if (this.AmountDue != null)
            {
                this._flagAmountDue = true;
            }
            this._PaymentsSum = paymentsSum;
            if (this.PaymentsSum != null)
            {
                this._flagPaymentsSum = true;
            }
        }

        /// <summary>
        /// Received document total net amount
        /// </summary>
        /// <value>Received document total net amount</value>
        [DataMember(Name = "amount_net", EmitDefaultValue = true)]
        public decimal AmountNet
        {
            get{ return _AmountNet;}
            set
            {
                _AmountNet = value;
                _flagAmountNet = true;
            }
        }
        private decimal _AmountNet;
        private bool _flagAmountNet;

        /// <summary>
        /// Returns false as AmountNet should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountNet()
        {
            return _flagAmountNet;
        }
        /// <summary>
        /// Received document total vat amount
        /// </summary>
        /// <value>Received document total vat amount</value>
        [DataMember(Name = "amount_vat", EmitDefaultValue = true)]
        public decimal AmountVat
        {
            get{ return _AmountVat;}
            set
            {
                _AmountVat = value;
                _flagAmountVat = true;
            }
        }
        private decimal _AmountVat;
        private bool _flagAmountVat;

        /// <summary>
        /// Returns false as AmountVat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountVat()
        {
            return _flagAmountVat;
        }
        /// <summary>
        /// Received document total gross amount
        /// </summary>
        /// <value>Received document total gross amount</value>
        [DataMember(Name = "amount_gross", EmitDefaultValue = true)]
        public decimal AmountGross
        {
            get{ return _AmountGross;}
            set
            {
                _AmountGross = value;
                _flagAmountGross = true;
            }
        }
        private decimal _AmountGross;
        private bool _flagAmountGross;

        /// <summary>
        /// Returns false as AmountGross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountGross()
        {
            return _flagAmountGross;
        }
        /// <summary>
        /// Received document withholding tax amount
        /// </summary>
        /// <value>Received document withholding tax amount</value>
        [DataMember(Name = "amount_withholding_tax", EmitDefaultValue = true)]
        public decimal AmountWithholdingTax
        {
            get{ return _AmountWithholdingTax;}
            set
            {
                _AmountWithholdingTax = value;
                _flagAmountWithholdingTax = true;
            }
        }
        private decimal _AmountWithholdingTax;
        private bool _flagAmountWithholdingTax;

        /// <summary>
        /// Returns false as AmountWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountWithholdingTax()
        {
            return _flagAmountWithholdingTax;
        }
        /// <summary>
        /// Received document other withholding tax amount
        /// </summary>
        /// <value>Received document other withholding tax amount</value>
        [DataMember(Name = "amount_other_withholding_tax", EmitDefaultValue = true)]
        public decimal AmountOtherWithholdingTax
        {
            get{ return _AmountOtherWithholdingTax;}
            set
            {
                _AmountOtherWithholdingTax = value;
                _flagAmountOtherWithholdingTax = true;
            }
        }
        private decimal _AmountOtherWithholdingTax;
        private bool _flagAmountOtherWithholdingTax;

        /// <summary>
        /// Returns false as AmountOtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOtherWithholdingTax()
        {
            return _flagAmountOtherWithholdingTax;
        }
        /// <summary>
        /// Received document total amount due
        /// </summary>
        /// <value>Received document total amount due</value>
        [DataMember(Name = "amount_due", EmitDefaultValue = true)]
        public decimal AmountDue
        {
            get{ return _AmountDue;}
            set
            {
                _AmountDue = value;
                _flagAmountDue = true;
            }
        }
        private decimal _AmountDue;
        private bool _flagAmountDue;

        /// <summary>
        /// Returns false as AmountDue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountDue()
        {
            return _flagAmountDue;
        }
        /// <summary>
        /// Received document payments sum
        /// </summary>
        /// <value>Received document payments sum</value>
        [DataMember(Name = "payments_sum", EmitDefaultValue = true)]
        public decimal PaymentsSum
        {
            get{ return _PaymentsSum;}
            set
            {
                _PaymentsSum = value;
                _flagPaymentsSum = true;
            }
        }
        private decimal _PaymentsSum;
        private bool _flagPaymentsSum;

        /// <summary>
        /// Returns false as PaymentsSum should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentsSum()
        {
            return _flagPaymentsSum;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentTotals {\n");
            sb.Append("  AmountNet: ").Append(AmountNet).Append("\n");
            sb.Append("  AmountVat: ").Append(AmountVat).Append("\n");
            sb.Append("  AmountGross: ").Append(AmountGross).Append("\n");
            sb.Append("  AmountWithholdingTax: ").Append(AmountWithholdingTax).Append("\n");
            sb.Append("  AmountOtherWithholdingTax: ").Append(AmountOtherWithholdingTax).Append("\n");
            sb.Append("  AmountDue: ").Append(AmountDue).Append("\n");
            sb.Append("  PaymentsSum: ").Append(PaymentsSum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceivedDocumentTotals);
        }

        /// <summary>
        /// Returns true if ReceivedDocumentTotals instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocumentTotals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocumentTotals input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AmountNet == input.AmountNet ||
                    this.AmountNet.Equals(input.AmountNet)
                ) && 
                (
                    this.AmountVat == input.AmountVat ||
                    this.AmountVat.Equals(input.AmountVat)
                ) && 
                (
                    this.AmountGross == input.AmountGross ||
                    this.AmountGross.Equals(input.AmountGross)
                ) && 
                (
                    this.AmountWithholdingTax == input.AmountWithholdingTax ||
                    this.AmountWithholdingTax.Equals(input.AmountWithholdingTax)
                ) && 
                (
                    this.AmountOtherWithholdingTax == input.AmountOtherWithholdingTax ||
                    this.AmountOtherWithholdingTax.Equals(input.AmountOtherWithholdingTax)
                ) && 
                (
                    this.AmountDue == input.AmountDue ||
                    this.AmountDue.Equals(input.AmountDue)
                ) && 
                (
                    this.PaymentsSum == input.PaymentsSum ||
                    this.PaymentsSum.Equals(input.PaymentsSum)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AmountNet.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountVat.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountGross.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountOtherWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountDue.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentsSum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentTotals" />
    /// </summary>
    public class ReceivedDocumentTotalsJsonConverter : JsonConverter<ReceivedDocumentTotals>
    {
        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocumentTotals" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocumentTotals Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> amountNet = default;
            Option<decimal?> amountVat = default;
            Option<decimal?> amountGross = default;
            Option<decimal?> amountWithholdingTax = default;
            Option<decimal?> amountOtherWithholdingTax = default;
            Option<decimal?> amountDue = default;
            Option<decimal?> paymentsSum = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount_net":
                            amountNet = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_vat":
                            amountVat = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_gross":
                            amountGross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_withholding_tax":
                            amountWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_other_withholding_tax":
                            amountOtherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "amount_due":
                            amountDue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "payments_sum":
                            paymentsSum = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReceivedDocumentTotals(amountNet, amountVat, amountGross, amountWithholdingTax, amountOtherWithholdingTax, amountDue, paymentsSum);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocumentTotals" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentTotals"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentTotals receivedDocumentTotals, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocumentTotals, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocumentTotals" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentTotals"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocumentTotals receivedDocumentTotals, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocumentTotals.AmountNetOption.IsSet)
                if (receivedDocumentTotals.AmountNetOption.Value != null)
                    writer.WriteNumber("amount_net", receivedDocumentTotals.AmountNetOption.Value!.Value);
                else
                    writer.WriteNull("amount_net");

            if (receivedDocumentTotals.AmountVatOption.IsSet)
                if (receivedDocumentTotals.AmountVatOption.Value != null)
                    writer.WriteNumber("amount_vat", receivedDocumentTotals.AmountVatOption.Value!.Value);
                else
                    writer.WriteNull("amount_vat");

            if (receivedDocumentTotals.AmountGrossOption.IsSet)
                if (receivedDocumentTotals.AmountGrossOption.Value != null)
                    writer.WriteNumber("amount_gross", receivedDocumentTotals.AmountGrossOption.Value!.Value);
                else
                    writer.WriteNull("amount_gross");

            if (receivedDocumentTotals.AmountWithholdingTaxOption.IsSet)
                if (receivedDocumentTotals.AmountWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_withholding_tax", receivedDocumentTotals.AmountWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("amount_withholding_tax");

            if (receivedDocumentTotals.AmountOtherWithholdingTaxOption.IsSet)
                if (receivedDocumentTotals.AmountOtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("amount_other_withholding_tax", receivedDocumentTotals.AmountOtherWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("amount_other_withholding_tax");

            if (receivedDocumentTotals.AmountDueOption.IsSet)
                if (receivedDocumentTotals.AmountDueOption.Value != null)
                    writer.WriteNumber("amount_due", receivedDocumentTotals.AmountDueOption.Value!.Value);
                else
                    writer.WriteNull("amount_due");

            if (receivedDocumentTotals.PaymentsSumOption.IsSet)
                if (receivedDocumentTotals.PaymentsSumOption.Value != null)
                    writer.WriteNumber("payments_sum", receivedDocumentTotals.PaymentsSumOption.Value!.Value);
                else
                    writer.WriteNull("payments_sum");
        }
    }
}
