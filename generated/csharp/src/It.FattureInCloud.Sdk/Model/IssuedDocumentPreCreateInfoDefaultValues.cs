// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document default values
    /// </summary>
    [DataContract(Name = "IssuedDocumentPreCreateInfo_default_values")]
    public partial class IssuedDocumentPreCreateInfoDefaultValues : IEquatable<IssuedDocumentPreCreateInfoDefaultValues>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IssuedDocumentPreCreateInfoDefaultValues" /> class.
        /// </summary>
        /// <param name="defaultTemplate">defaultTemplate.</param>
        /// <param name="dnTemplate">dnTemplate.</param>
        /// <param name="aiTemplate">aiTemplate.</param>
        /// <param name="notes">Default notes..</param>
        /// <param name="rivalsa">Default rivalsa percentage..</param>
        /// <param name="cassa">Default cassa percentage..</param>
        /// <param name="withholdingTax">Default withholding tax percentage..</param>
        /// <param name="withholdingTaxTaxable">Default withholding tax taxable percentage..</param>
        /// <param name="otherWithholdingTax">Default other withholding tax percentage..</param>
        /// <param name="useGrossPrices">Use gross price by default..</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        public IssuedDocumentPreCreateInfoDefaultValues(DocumentTemplate defaultTemplate = default, DocumentTemplate dnTemplate = default, DocumentTemplate aiTemplate = default, string notes = default, decimal rivalsa = default, decimal cassa = default, decimal withholdingTax = default, decimal withholdingTaxTaxable = default, decimal otherWithholdingTax = default, bool useGrossPrices = default, PaymentMethod paymentMethod = default)
        {
            this._DefaultTemplate = defaultTemplate;
            if (this.DefaultTemplate != null)
            {
                this._flagDefaultTemplate = true;
            }
            this._DnTemplate = dnTemplate;
            if (this.DnTemplate != null)
            {
                this._flagDnTemplate = true;
            }
            this._AiTemplate = aiTemplate;
            if (this.AiTemplate != null)
            {
                this._flagAiTemplate = true;
            }
            this._Notes = notes;
            if (this.Notes != null)
            {
                this._flagNotes = true;
            }
            this._Rivalsa = rivalsa;
            if (this.Rivalsa != null)
            {
                this._flagRivalsa = true;
            }
            this._Cassa = cassa;
            if (this.Cassa != null)
            {
                this._flagCassa = true;
            }
            this._WithholdingTax = withholdingTax;
            if (this.WithholdingTax != null)
            {
                this._flagWithholdingTax = true;
            }
            this._WithholdingTaxTaxable = withholdingTaxTaxable;
            if (this.WithholdingTaxTaxable != null)
            {
                this._flagWithholdingTaxTaxable = true;
            }
            this._OtherWithholdingTax = otherWithholdingTax;
            if (this.OtherWithholdingTax != null)
            {
                this._flagOtherWithholdingTax = true;
            }
            this._UseGrossPrices = useGrossPrices;
            if (this.UseGrossPrices != null)
            {
                this._flagUseGrossPrices = true;
            }
            this._PaymentMethod = paymentMethod;
            if (this.PaymentMethod != null)
            {
                this._flagPaymentMethod = true;
            }
        }

        /// <summary>
        /// Gets or Sets DefaultTemplate
        /// </summary>
        [DataMember(Name = "default_template", EmitDefaultValue = false)]
        public DocumentTemplate DefaultTemplate
        {
            get{ return _DefaultTemplate;}
            set
            {
                _DefaultTemplate = value;
                _flagDefaultTemplate = true;
            }
        }
        private DocumentTemplate _DefaultTemplate;
        private bool _flagDefaultTemplate;

        /// <summary>
        /// Returns false as DefaultTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultTemplate()
        {
            return _flagDefaultTemplate;
        }
        /// <summary>
        /// Gets or Sets DnTemplate
        /// </summary>
        [DataMember(Name = "dn_template", EmitDefaultValue = false)]
        public DocumentTemplate DnTemplate
        {
            get{ return _DnTemplate;}
            set
            {
                _DnTemplate = value;
                _flagDnTemplate = true;
            }
        }
        private DocumentTemplate _DnTemplate;
        private bool _flagDnTemplate;

        /// <summary>
        /// Returns false as DnTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDnTemplate()
        {
            return _flagDnTemplate;
        }
        /// <summary>
        /// Gets or Sets AiTemplate
        /// </summary>
        [DataMember(Name = "ai_template", EmitDefaultValue = false)]
        public DocumentTemplate AiTemplate
        {
            get{ return _AiTemplate;}
            set
            {
                _AiTemplate = value;
                _flagAiTemplate = true;
            }
        }
        private DocumentTemplate _AiTemplate;
        private bool _flagAiTemplate;

        /// <summary>
        /// Returns false as AiTemplate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAiTemplate()
        {
            return _flagAiTemplate;
        }
        /// <summary>
        /// Default notes.
        /// </summary>
        /// <value>Default notes.</value>
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get{ return _Notes;}
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }
        private string _Notes;
        private bool _flagNotes;

        /// <summary>
        /// Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }
        /// <summary>
        /// Default rivalsa percentage.
        /// </summary>
        /// <value>Default rivalsa percentage.</value>
        [DataMember(Name = "rivalsa", EmitDefaultValue = true)]
        public decimal Rivalsa
        {
            get{ return _Rivalsa;}
            set
            {
                _Rivalsa = value;
                _flagRivalsa = true;
            }
        }
        private decimal _Rivalsa;
        private bool _flagRivalsa;

        /// <summary>
        /// Returns false as Rivalsa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRivalsa()
        {
            return _flagRivalsa;
        }
        /// <summary>
        /// Default cassa percentage.
        /// </summary>
        /// <value>Default cassa percentage.</value>
        [DataMember(Name = "cassa", EmitDefaultValue = true)]
        public decimal Cassa
        {
            get{ return _Cassa;}
            set
            {
                _Cassa = value;
                _flagCassa = true;
            }
        }
        private decimal _Cassa;
        private bool _flagCassa;

        /// <summary>
        /// Returns false as Cassa should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCassa()
        {
            return _flagCassa;
        }
        /// <summary>
        /// Default withholding tax percentage.
        /// </summary>
        /// <value>Default withholding tax percentage.</value>
        [DataMember(Name = "withholding_tax", EmitDefaultValue = true)]
        public decimal WithholdingTax
        {
            get{ return _WithholdingTax;}
            set
            {
                _WithholdingTax = value;
                _flagWithholdingTax = true;
            }
        }
        private decimal _WithholdingTax;
        private bool _flagWithholdingTax;

        /// <summary>
        /// Returns false as WithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTax()
        {
            return _flagWithholdingTax;
        }
        /// <summary>
        /// Default withholding tax taxable percentage.
        /// </summary>
        /// <value>Default withholding tax taxable percentage.</value>
        [DataMember(Name = "withholding_tax_taxable", EmitDefaultValue = true)]
        public decimal WithholdingTaxTaxable
        {
            get{ return _WithholdingTaxTaxable;}
            set
            {
                _WithholdingTaxTaxable = value;
                _flagWithholdingTaxTaxable = true;
            }
        }
        private decimal _WithholdingTaxTaxable;
        private bool _flagWithholdingTaxTaxable;

        /// <summary>
        /// Returns false as WithholdingTaxTaxable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWithholdingTaxTaxable()
        {
            return _flagWithholdingTaxTaxable;
        }
        /// <summary>
        /// Default other withholding tax percentage.
        /// </summary>
        /// <value>Default other withholding tax percentage.</value>
        [DataMember(Name = "other_withholding_tax", EmitDefaultValue = true)]
        public decimal OtherWithholdingTax
        {
            get{ return _OtherWithholdingTax;}
            set
            {
                _OtherWithholdingTax = value;
                _flagOtherWithholdingTax = true;
            }
        }
        private decimal _OtherWithholdingTax;
        private bool _flagOtherWithholdingTax;

        /// <summary>
        /// Returns false as OtherWithholdingTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOtherWithholdingTax()
        {
            return _flagOtherWithholdingTax;
        }
        /// <summary>
        /// Use gross price by default.
        /// </summary>
        /// <value>Use gross price by default.</value>
        [DataMember(Name = "use_gross_prices", EmitDefaultValue = true)]
        public bool UseGrossPrices
        {
            get{ return _UseGrossPrices;}
            set
            {
                _UseGrossPrices = value;
                _flagUseGrossPrices = true;
            }
        }
        private bool _UseGrossPrices;
        private bool _flagUseGrossPrices;

        /// <summary>
        /// Returns false as UseGrossPrices should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseGrossPrices()
        {
            return _flagUseGrossPrices;
        }
        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "payment_method", EmitDefaultValue = false)]
        public PaymentMethod PaymentMethod
        {
            get{ return _PaymentMethod;}
            set
            {
                _PaymentMethod = value;
                _flagPaymentMethod = true;
            }
        }
        private PaymentMethod _PaymentMethod;
        private bool _flagPaymentMethod;

        /// <summary>
        /// Returns false as PaymentMethod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethod()
        {
            return _flagPaymentMethod;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IssuedDocumentPreCreateInfoDefaultValues {\n");
            sb.Append("  DefaultTemplate: ").Append(DefaultTemplate).Append("\n");
            sb.Append("  DnTemplate: ").Append(DnTemplate).Append("\n");
            sb.Append("  AiTemplate: ").Append(AiTemplate).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  Rivalsa: ").Append(Rivalsa).Append("\n");
            sb.Append("  Cassa: ").Append(Cassa).Append("\n");
            sb.Append("  WithholdingTax: ").Append(WithholdingTax).Append("\n");
            sb.Append("  WithholdingTaxTaxable: ").Append(WithholdingTaxTaxable).Append("\n");
            sb.Append("  OtherWithholdingTax: ").Append(OtherWithholdingTax).Append("\n");
            sb.Append("  UseGrossPrices: ").Append(UseGrossPrices).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IssuedDocumentPreCreateInfoDefaultValues);
        }

        /// <summary>
        /// Returns true if IssuedDocumentPreCreateInfoDefaultValues instances are equal
        /// </summary>
        /// <param name="input">Instance of IssuedDocumentPreCreateInfoDefaultValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssuedDocumentPreCreateInfoDefaultValues input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DefaultTemplate == input.DefaultTemplate ||
                    (this.DefaultTemplate != null &&
                    this.DefaultTemplate.Equals(input.DefaultTemplate))
                ) && 
                (
                    this.DnTemplate == input.DnTemplate ||
                    (this.DnTemplate != null &&
                    this.DnTemplate.Equals(input.DnTemplate))
                ) && 
                (
                    this.AiTemplate == input.AiTemplate ||
                    (this.AiTemplate != null &&
                    this.AiTemplate.Equals(input.AiTemplate))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.Rivalsa == input.Rivalsa ||
                    this.Rivalsa.Equals(input.Rivalsa)
                ) && 
                (
                    this.Cassa == input.Cassa ||
                    this.Cassa.Equals(input.Cassa)
                ) && 
                (
                    this.WithholdingTax == input.WithholdingTax ||
                    this.WithholdingTax.Equals(input.WithholdingTax)
                ) && 
                (
                    this.WithholdingTaxTaxable == input.WithholdingTaxTaxable ||
                    this.WithholdingTaxTaxable.Equals(input.WithholdingTaxTaxable)
                ) && 
                (
                    this.OtherWithholdingTax == input.OtherWithholdingTax ||
                    this.OtherWithholdingTax.Equals(input.OtherWithholdingTax)
                ) && 
                (
                    this.UseGrossPrices == input.UseGrossPrices ||
                    this.UseGrossPrices.Equals(input.UseGrossPrices)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultTemplate.GetHashCode();
                }
                if (this.DnTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.DnTemplate.GetHashCode();
                }
                if (this.AiTemplate != null)
                {
                    hashCode = (hashCode * 59) + this.AiTemplate.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rivalsa.GetHashCode();
                hashCode = (hashCode * 59) + this.Cassa.GetHashCode();
                hashCode = (hashCode * 59) + this.WithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.WithholdingTaxTaxable.GetHashCode();
                hashCode = (hashCode * 59) + this.OtherWithholdingTax.GetHashCode();
                hashCode = (hashCode * 59) + this.UseGrossPrices.GetHashCode();
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
    /// </summary>
    public class IssuedDocumentPreCreateInfoDefaultValuesJsonConverter : JsonConverter<IssuedDocumentPreCreateInfoDefaultValues>
    {
        /// <summary>
        /// Deserializes json to <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IssuedDocumentPreCreateInfoDefaultValues Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DocumentTemplate?> defaultTemplate = default;
            Option<DocumentTemplate?> dnTemplate = default;
            Option<DocumentTemplate?> aiTemplate = default;
            Option<string?> notes = default;
            Option<decimal?> rivalsa = default;
            Option<decimal?> cassa = default;
            Option<decimal?> withholdingTax = default;
            Option<decimal?> withholdingTaxTaxable = default;
            Option<decimal?> otherWithholdingTax = default;
            Option<bool?> useGrossPrices = default;
            Option<PaymentMethod?> paymentMethod = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "default_template":
                            defaultTemplate = new Option<DocumentTemplate?>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dn_template":
                            dnTemplate = new Option<DocumentTemplate?>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ai_template":
                            aiTemplate = new Option<DocumentTemplate?>(JsonSerializer.Deserialize<DocumentTemplate>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rivalsa":
                            rivalsa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "cassa":
                            cassa = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax":
                            withholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "withholding_tax_taxable":
                            withholdingTaxTaxable = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "other_withholding_tax":
                            otherWithholdingTax = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "use_gross_prices":
                            useGrossPrices = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "payment_method":
                            paymentMethod = new Option<PaymentMethod?>(JsonSerializer.Deserialize<PaymentMethod>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (defaultTemplate.IsSet && defaultTemplate.Value == null)
                throw new ArgumentNullException(nameof(defaultTemplate), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (dnTemplate.IsSet && dnTemplate.Value == null)
                throw new ArgumentNullException(nameof(dnTemplate), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (aiTemplate.IsSet && aiTemplate.Value == null)
                throw new ArgumentNullException(nameof(aiTemplate), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (paymentMethod.IsSet && paymentMethod.Value == null)
                throw new ArgumentNullException(nameof(paymentMethod), "Property is not nullable for class IssuedDocumentPreCreateInfoDefaultValues.");

            return new IssuedDocumentPreCreateInfoDefaultValues(defaultTemplate, dnTemplate, aiTemplate, notes, rivalsa, cassa, withholdingTax, withholdingTaxTaxable, otherWithholdingTax, useGrossPrices, paymentMethod);
        }

        /// <summary>
        /// Serializes a <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfoDefaultValues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentPreCreateInfoDefaultValues issuedDocumentPreCreateInfoDefaultValues, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, issuedDocumentPreCreateInfoDefaultValues, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IssuedDocumentPreCreateInfoDefaultValues" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentPreCreateInfoDefaultValues"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IssuedDocumentPreCreateInfoDefaultValues issuedDocumentPreCreateInfoDefaultValues, JsonSerializerOptions jsonSerializerOptions)
        {
            if (issuedDocumentPreCreateInfoDefaultValues.DefaultTemplateOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.DefaultTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.DefaultTemplate), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.DnTemplateOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.DnTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.DnTemplate), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.AiTemplateOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.AiTemplate == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.AiTemplate), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.PaymentMethodOption.IsSet && issuedDocumentPreCreateInfoDefaultValues.PaymentMethod == null)
                throw new ArgumentNullException(nameof(issuedDocumentPreCreateInfoDefaultValues.PaymentMethod), "Property is required for class IssuedDocumentPreCreateInfoDefaultValues.");

            if (issuedDocumentPreCreateInfoDefaultValues.DefaultTemplateOption.IsSet)
            {
                writer.WritePropertyName("default_template");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.DefaultTemplate, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfoDefaultValues.DnTemplateOption.IsSet)
            {
                writer.WritePropertyName("dn_template");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.DnTemplate, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfoDefaultValues.AiTemplateOption.IsSet)
            {
                writer.WritePropertyName("ai_template");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.AiTemplate, jsonSerializerOptions);
            }
            if (issuedDocumentPreCreateInfoDefaultValues.NotesOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.NotesOption.Value != null)
                    writer.WriteString("notes", issuedDocumentPreCreateInfoDefaultValues.Notes);
                else
                    writer.WriteNull("notes");

            if (issuedDocumentPreCreateInfoDefaultValues.RivalsaOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.RivalsaOption.Value != null)
                    writer.WriteNumber("rivalsa", issuedDocumentPreCreateInfoDefaultValues.RivalsaOption.Value!.Value);
                else
                    writer.WriteNull("rivalsa");

            if (issuedDocumentPreCreateInfoDefaultValues.CassaOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.CassaOption.Value != null)
                    writer.WriteNumber("cassa", issuedDocumentPreCreateInfoDefaultValues.CassaOption.Value!.Value);
                else
                    writer.WriteNull("cassa");

            if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxOption.Value != null)
                    writer.WriteNumber("withholding_tax", issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("withholding_tax");

            if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxTaxableOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxTaxableOption.Value != null)
                    writer.WriteNumber("withholding_tax_taxable", issuedDocumentPreCreateInfoDefaultValues.WithholdingTaxTaxableOption.Value!.Value);
                else
                    writer.WriteNull("withholding_tax_taxable");

            if (issuedDocumentPreCreateInfoDefaultValues.OtherWithholdingTaxOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.OtherWithholdingTaxOption.Value != null)
                    writer.WriteNumber("other_withholding_tax", issuedDocumentPreCreateInfoDefaultValues.OtherWithholdingTaxOption.Value!.Value);
                else
                    writer.WriteNull("other_withholding_tax");

            if (issuedDocumentPreCreateInfoDefaultValues.UseGrossPricesOption.IsSet)
                if (issuedDocumentPreCreateInfoDefaultValues.UseGrossPricesOption.Value != null)
                    writer.WriteBoolean("use_gross_prices", issuedDocumentPreCreateInfoDefaultValues.UseGrossPricesOption.Value!.Value);
                else
                    writer.WriteNull("use_gross_prices");

            if (issuedDocumentPreCreateInfoDefaultValues.PaymentMethodOption.IsSet)
            {
                writer.WritePropertyName("payment_method");
                JsonSerializer.Serialize(writer, issuedDocumentPreCreateInfoDefaultValues.PaymentMethod, jsonSerializerOptions);
            }
        }
    }
}
