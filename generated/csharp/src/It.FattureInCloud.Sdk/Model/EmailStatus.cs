// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Email status
    /// </summary>
    /// <value>Email status</value>
    public enum EmailStatus
    {
        /// <summary>
        /// Enum Sending for value: sending
        /// </summary>
        Sending = 1,

        /// <summary>
        /// Enum Pending for value: pending
        /// </summary>
        Pending = 2,

        /// <summary>
        /// Enum Sent for value: sent
        /// </summary>
        Sent = 3
    }

    /// <summary>
    /// Converts <see cref="EmailStatus"/> to and from the JSON value
    /// </summary>
    public static class EmailStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="EmailStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmailStatus FromString(string value)
        {
            if (value.Equals("sending"))
                return EmailStatus.Sending;

            if (value.Equals("pending"))
                return EmailStatus.Pending;

            if (value.Equals("sent"))
                return EmailStatus.Sent;

            throw new NotImplementedException($"Could not convert value to type EmailStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="EmailStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EmailStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("sending"))
                return EmailStatus.Sending;

            if (value.Equals("pending"))
                return EmailStatus.Pending;

            if (value.Equals("sent"))
                return EmailStatus.Sent;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EmailStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(EmailStatus value)
        {
            if (value == EmailStatus.Sending)
                return "sending";

            if (value == EmailStatus.Pending)
                return "pending";

            if (value == EmailStatus.Sent)
                return "sent";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class EmailStatusJsonConverter : JsonConverter<EmailStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmailStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmailStatus? result = rawValue == null
                ? null
                : EmailStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmailStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmailStatus emailStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(EmailStatusValueConverter.ToJsonValue(emailStatus).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EmailStatus"/>
    /// </summary>
    public class EmailStatusNullableJsonConverter : JsonConverter<EmailStatus?>
    {
        /// <summary>
        /// Returns a EmailStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override EmailStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            EmailStatus? result = rawValue == null
                ? null
                : EmailStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the EmailStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="emailStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, EmailStatus? emailStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(emailStatus.HasValue ? EmailStatusValueConverter.ToJsonValue(emailStatus.Value).ToString() : "null");
        }
    }
}
