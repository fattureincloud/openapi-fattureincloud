// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// VerifyEInvoiceXmlErrorResponseError
    /// </summary>
    [DataContract(Name = "VerifyEInvoiceXmlErrorResponse_error")]
    public partial class VerifyEInvoiceXmlErrorResponseError : IEquatable<VerifyEInvoiceXmlErrorResponseError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyEInvoiceXmlErrorResponseError" /> class.
        /// </summary>
        /// <param name="message">message.</param>
        /// <param name="validationResult">validationResult.</param>
        public VerifyEInvoiceXmlErrorResponseError(string message = default, VerifyEInvoiceXmlErrorResponseErrorValidationResult validationResult = default)
        {
            this._Message = message;
            if (this.Message != null)
            {
                this._flagMessage = true;
            }
            this._ValidationResult = validationResult;
            if (this.ValidationResult != null)
            {
                this._flagValidationResult = true;
            }
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message
        {
            get{ return _Message;}
            set
            {
                _Message = value;
                _flagMessage = true;
            }
        }
        private string _Message;
        private bool _flagMessage;

        /// <summary>
        /// Returns false as Message should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMessage()
        {
            return _flagMessage;
        }
        /// <summary>
        /// Gets or Sets ValidationResult
        /// </summary>
        [DataMember(Name = "validation_result", EmitDefaultValue = true)]
        public VerifyEInvoiceXmlErrorResponseErrorValidationResult ValidationResult
        {
            get{ return _ValidationResult;}
            set
            {
                _ValidationResult = value;
                _flagValidationResult = true;
            }
        }
        private VerifyEInvoiceXmlErrorResponseErrorValidationResult _ValidationResult;
        private bool _flagValidationResult;

        /// <summary>
        /// Returns false as ValidationResult should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationResult()
        {
            return _flagValidationResult;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyEInvoiceXmlErrorResponseError {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ValidationResult: ").Append(ValidationResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyEInvoiceXmlErrorResponseError);
        }

        /// <summary>
        /// Returns true if VerifyEInvoiceXmlErrorResponseError instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyEInvoiceXmlErrorResponseError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyEInvoiceXmlErrorResponseError input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.ValidationResult == input.ValidationResult ||
                    (this.ValidationResult != null &&
                    this.ValidationResult.Equals(input.ValidationResult))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.ValidationResult != null)
                {
                    hashCode = (hashCode * 59) + this.ValidationResult.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="VerifyEInvoiceXmlErrorResponseError" />
    /// </summary>
    public class VerifyEInvoiceXmlErrorResponseErrorJsonConverter : JsonConverter<VerifyEInvoiceXmlErrorResponseError>
    {
        /// <summary>
        /// Deserializes json to <see cref="VerifyEInvoiceXmlErrorResponseError" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VerifyEInvoiceXmlErrorResponseError Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> message = default;
            Option<VerifyEInvoiceXmlErrorResponseErrorValidationResult?> validationResult = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "validation_result":
                            validationResult = new Option<VerifyEInvoiceXmlErrorResponseErrorValidationResult?>(JsonSerializer.Deserialize<VerifyEInvoiceXmlErrorResponseErrorValidationResult>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new VerifyEInvoiceXmlErrorResponseError(message, validationResult);
        }

        /// <summary>
        /// Serializes a <see cref="VerifyEInvoiceXmlErrorResponseError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyEInvoiceXmlErrorResponseError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VerifyEInvoiceXmlErrorResponseError verifyEInvoiceXmlErrorResponseError, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, verifyEInvoiceXmlErrorResponseError, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VerifyEInvoiceXmlErrorResponseError" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyEInvoiceXmlErrorResponseError"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VerifyEInvoiceXmlErrorResponseError verifyEInvoiceXmlErrorResponseError, JsonSerializerOptions jsonSerializerOptions)
        {
            if (verifyEInvoiceXmlErrorResponseError.MessageOption.IsSet)
                if (verifyEInvoiceXmlErrorResponseError.MessageOption.Value != null)
                    writer.WriteString("message", verifyEInvoiceXmlErrorResponseError.Message);
                else
                    writer.WriteNull("message");

            if (verifyEInvoiceXmlErrorResponseError.ValidationResultOption.IsSet)
                if (verifyEInvoiceXmlErrorResponseError.ValidationResultOption.Value != null)
                {
                    writer.WritePropertyName("validation_result");
                    JsonSerializer.Serialize(writer, verifyEInvoiceXmlErrorResponseError.ValidationResult, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("validation_result");
        }
    }
}
