// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Payment terms type
    /// </summary>
    /// <value>Payment terms type</value>
    public enum PaymentTermsType
    {
        /// <summary>
        /// Enum Standard for value: standard
        /// </summary>
        Standard = 1,

        /// <summary>
        /// Enum EndOfMonth for value: end_of_month
        /// </summary>
        EndOfMonth = 2
    }

    /// <summary>
    /// Converts <see cref="PaymentTermsType"/> to and from the JSON value
    /// </summary>
    public static class PaymentTermsTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PaymentTermsType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentTermsType FromString(string value)
        {
            if (value.Equals("standard"))
                return PaymentTermsType.Standard;

            if (value.Equals("end_of_month"))
                return PaymentTermsType.EndOfMonth;

            throw new NotImplementedException($"Could not convert value to type PaymentTermsType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PaymentTermsType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentTermsType? FromStringOrDefault(string value)
        {
            if (value.Equals("standard"))
                return PaymentTermsType.Standard;

            if (value.Equals("end_of_month"))
                return PaymentTermsType.EndOfMonth;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PaymentTermsType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PaymentTermsType value)
        {
            if (value == PaymentTermsType.Standard)
                return "standard";

            if (value == PaymentTermsType.EndOfMonth)
                return "end_of_month";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentTermsType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PaymentTermsTypeJsonConverter : JsonConverter<PaymentTermsType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PaymentTermsType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PaymentTermsType? result = rawValue == null
                ? null
                : PaymentTermsTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PaymentTermsType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentTermsType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PaymentTermsType paymentTermsType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PaymentTermsTypeValueConverter.ToJsonValue(paymentTermsType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentTermsType"/>
    /// </summary>
    public class PaymentTermsTypeNullableJsonConverter : JsonConverter<PaymentTermsType?>
    {
        /// <summary>
        /// Returns a PaymentTermsType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PaymentTermsType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PaymentTermsType? result = rawValue == null
                ? null
                : PaymentTermsTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PaymentTermsType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentTermsType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PaymentTermsType? paymentTermsType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(paymentTermsType.HasValue ? PaymentTermsTypeValueConverter.ToJsonValue(paymentTermsType.Value).ToString() : "null");
        }
    }
}
