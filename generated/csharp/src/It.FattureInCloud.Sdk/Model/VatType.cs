// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// VatType
    /// </summary>
    [DataContract(Name = "VatType")]
    public partial class VatType : IEquatable<VatType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VatType" /> class.
        /// </summary>
        /// <param name="id">Vat type id.</param>
        /// <param name="value">[Read Only] Vat type percentual value.</param>
        /// <param name="description">Vat type short description.</param>
        /// <param name="notes">Vat type notes shown in documents.</param>
        /// <param name="eInvoice">Vat type is usable for e-invoices.</param>
        /// <param name="eiType">Vat type e-invoice type (natura).</param>
        /// <param name="eiDescription">Vat type e-invoice description.</param>
        /// <param name="isDisabled">Is the vat type disabled.</param>
        /// <param name="varDefault">If the vat type is default.</param>
        public VatType(int id = default, decimal value = default, string description = default, string notes = default, bool eInvoice = default, string eiType = default, string eiDescription = default, bool isDisabled = default, bool varDefault = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Value = value;
            if (this.Value != null)
            {
                this._flagValue = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Notes = notes;
            if (this.Notes != null)
            {
                this._flagNotes = true;
            }
            this._EInvoice = eInvoice;
            if (this.EInvoice != null)
            {
                this._flagEInvoice = true;
            }
            this._EiType = eiType;
            if (this.EiType != null)
            {
                this._flagEiType = true;
            }
            this._EiDescription = eiDescription;
            if (this.EiDescription != null)
            {
                this._flagEiDescription = true;
            }
            this._IsDisabled = isDisabled;
            if (this.IsDisabled != null)
            {
                this._flagIsDisabled = true;
            }
            this._Default = varDefault;
            if (this.Default != null)
            {
                this._flagDefault = true;
            }
        }

        /// <summary>
        /// Vat type id
        /// </summary>
        /// <value>Vat type id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// [Read Only] Vat type percentual value
        /// </summary>
        /// <value>[Read Only] Vat type percentual value</value>
        /*
        <example>22</example>
        */
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public decimal Value
        {
            get{ return _Value;}
            set
            {
                _Value = value;
                _flagValue = true;
            }
        }
        private decimal _Value;
        private bool _flagValue;

        /// <summary>
        /// Returns false as Value should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValue()
        {
            return _flagValue;
        }
        /// <summary>
        /// Vat type short description
        /// </summary>
        /// <value>Vat type short description</value>
        /*
        <example>Non imponibile art. 123</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Vat type notes shown in documents
        /// </summary>
        /// <value>Vat type notes shown in documents</value>
        /*
        <example>IVA non imponibile ai sensi dell&#39;articolo 123, comma 2</example>
        */
        [DataMember(Name = "notes", EmitDefaultValue = true)]
        public string Notes
        {
            get{ return _Notes;}
            set
            {
                _Notes = value;
                _flagNotes = true;
            }
        }
        private string _Notes;
        private bool _flagNotes;

        /// <summary>
        /// Returns false as Notes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotes()
        {
            return _flagNotes;
        }
        /// <summary>
        /// Vat type is usable for e-invoices
        /// </summary>
        /// <value>Vat type is usable for e-invoices</value>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool EInvoice
        {
            get{ return _EInvoice;}
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }
        private bool _EInvoice;
        private bool _flagEInvoice;

        /// <summary>
        /// Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }
        /// <summary>
        /// Vat type e-invoice type (natura)
        /// </summary>
        /// <value>Vat type e-invoice type (natura)</value>
        /*
        <example>2</example>
        */
        [DataMember(Name = "ei_type", EmitDefaultValue = true)]
        public string EiType
        {
            get{ return _EiType;}
            set
            {
                _EiType = value;
                _flagEiType = true;
            }
        }
        private string _EiType;
        private bool _flagEiType;

        /// <summary>
        /// Returns false as EiType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiType()
        {
            return _flagEiType;
        }
        /// <summary>
        /// Vat type e-invoice description
        /// </summary>
        /// <value>Vat type e-invoice description</value>
        [DataMember(Name = "ei_description", EmitDefaultValue = true)]
        public string EiDescription
        {
            get{ return _EiDescription;}
            set
            {
                _EiDescription = value;
                _flagEiDescription = true;
            }
        }
        private string _EiDescription;
        private bool _flagEiDescription;

        /// <summary>
        /// Returns false as EiDescription should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEiDescription()
        {
            return _flagEiDescription;
        }
        /// <summary>
        /// [Read Only] Is the vat type is editable.
        /// </summary>
        /// <value>[Read Only] Is the vat type is editable.</value>
        [DataMember(Name = "editable", EmitDefaultValue = true)]
        public bool Editable { get; private set; }

        /// <summary>
        /// Returns false as Editable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEditable()
        {
            return false;
        }
        /// <summary>
        /// Is the vat type disabled
        /// </summary>
        /// <value>Is the vat type disabled</value>
        [DataMember(Name = "is_disabled", EmitDefaultValue = true)]
        public bool IsDisabled
        {
            get{ return _IsDisabled;}
            set
            {
                _IsDisabled = value;
                _flagIsDisabled = true;
            }
        }
        private bool _IsDisabled;
        private bool _flagIsDisabled;

        /// <summary>
        /// Returns false as IsDisabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDisabled()
        {
            return _flagIsDisabled;
        }
        /// <summary>
        /// If the vat type is default
        /// </summary>
        /// <value>If the vat type is default</value>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool Default
        {
            get{ return _Default;}
            set
            {
                _Default = value;
                _flagDefault = true;
            }
        }
        private bool _Default;
        private bool _flagDefault;

        /// <summary>
        /// Returns false as Default should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefault()
        {
            return _flagDefault;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VatType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  EiType: ").Append(EiType).Append("\n");
            sb.Append("  EiDescription: ").Append(EiDescription).Append("\n");
            sb.Append("  Editable: ").Append(Editable).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VatType);
        }

        /// <summary>
        /// Returns true if VatType instances are equal
        /// </summary>
        /// <param name="input">Instance of VatType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VatType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Notes == input.Notes ||
                    (this.Notes != null &&
                    this.Notes.Equals(input.Notes))
                ) && 
                (
                    this.EInvoice == input.EInvoice ||
                    this.EInvoice.Equals(input.EInvoice)
                ) && 
                (
                    this.EiType == input.EiType ||
                    (this.EiType != null &&
                    this.EiType.Equals(input.EiType))
                ) && 
                (
                    this.EiDescription == input.EiDescription ||
                    (this.EiDescription != null &&
                    this.EiDescription.Equals(input.EiDescription))
                ) && 
                (
                    this.Editable == input.Editable ||
                    this.Editable.Equals(input.Editable)
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    this.IsDisabled.Equals(input.IsDisabled)
                ) && 
                (
                    this.Default == input.Default ||
                    this.Default.Equals(input.Default)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Notes != null)
                {
                    hashCode = (hashCode * 59) + this.Notes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EInvoice.GetHashCode();
                if (this.EiType != null)
                {
                    hashCode = (hashCode * 59) + this.EiType.GetHashCode();
                }
                if (this.EiDescription != null)
                {
                    hashCode = (hashCode * 59) + this.EiDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Editable.GetHashCode();
                hashCode = (hashCode * 59) + this.IsDisabled.GetHashCode();
                hashCode = (hashCode * 59) + this.Default.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="VatType" />
    /// </summary>
    public class VatTypeJsonConverter : JsonConverter<VatType>
    {
        /// <summary>
        /// Deserializes json to <see cref="VatType" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VatType Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<decimal?> value = default;
            Option<string?> description = default;
            Option<string?> notes = default;
            Option<bool?> eInvoice = default;
            Option<string?> eiType = default;
            Option<string?> eiDescription = default;
            Option<bool?> editable = default;
            Option<bool?> isDisabled = default;
            Option<bool?> varDefault = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "value":
                            value = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "notes":
                            notes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ei_type":
                            eiType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ei_description":
                            eiDescription = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "editable":
                            editable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "is_disabled":
                            isDisabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "default":
                            varDefault = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new VatType(id, value, description, notes, eInvoice, eiType, eiDescription, editable, isDisabled, varDefault);
        }

        /// <summary>
        /// Serializes a <see cref="VatType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VatType vatType, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vatType, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VatType" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vatType"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VatType vatType, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vatType.IdOption.IsSet)
                if (vatType.IdOption.Value != null)
                    writer.WriteNumber("id", vatType.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (vatType.ValueOption.IsSet)
                if (vatType.ValueOption.Value != null)
                    writer.WriteNumber("value", vatType.ValueOption.Value!.Value);
                else
                    writer.WriteNull("value");

            if (vatType.DescriptionOption.IsSet)
                if (vatType.DescriptionOption.Value != null)
                    writer.WriteString("description", vatType.Description);
                else
                    writer.WriteNull("description");

            if (vatType.NotesOption.IsSet)
                if (vatType.NotesOption.Value != null)
                    writer.WriteString("notes", vatType.Notes);
                else
                    writer.WriteNull("notes");

            if (vatType.EInvoiceOption.IsSet)
                if (vatType.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", vatType.EInvoiceOption.Value!.Value);
                else
                    writer.WriteNull("e_invoice");

            if (vatType.EiTypeOption.IsSet)
                if (vatType.EiTypeOption.Value != null)
                    writer.WriteString("ei_type", vatType.EiType);
                else
                    writer.WriteNull("ei_type");

            if (vatType.EiDescriptionOption.IsSet)
                if (vatType.EiDescriptionOption.Value != null)
                    writer.WriteString("ei_description", vatType.EiDescription);
                else
                    writer.WriteNull("ei_description");

            if (vatType.EditableOption.IsSet)
                if (vatType.EditableOption.Value != null)
                    writer.WriteBoolean("editable", vatType.EditableOption.Value!.Value);
                else
                    writer.WriteNull("editable");

            if (vatType.IsDisabledOption.IsSet)
                if (vatType.IsDisabledOption.Value != null)
                    writer.WriteBoolean("is_disabled", vatType.IsDisabledOption.Value!.Value);
                else
                    writer.WriteNull("is_disabled");

            if (vatType.DefaultOption.IsSet)
                if (vatType.DefaultOption.Value != null)
                    writer.WriteBoolean("default", vatType.DefaultOption.Value!.Value);
                else
                    writer.WriteNull("default");
        }
    }
}
