// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// ReceivedDocumentPaymentsListItem
    /// </summary>
    [DataContract(Name = "ReceivedDocumentPaymentsListItem")]
    public partial class ReceivedDocumentPaymentsListItem : IEquatable<ReceivedDocumentPaymentsListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceivedDocumentPaymentsListItem" /> class.
        /// </summary>
        /// <param name="id">Received document payment id.</param>
        /// <param name="amount">Received document payment total amount.</param>
        /// <param name="dueDate">Due date.</param>
        /// <param name="paidDate">Received document payment paid date.</param>
        /// <param name="paymentTerms">paymentTerms.</param>
        /// <param name="status">Received document payment status.</param>
        /// <param name="paymentAccount">paymentAccount.</param>
        public ReceivedDocumentPaymentsListItem(int id = default, decimal amount = default, DateOnly dueDate = default, DateOnly paidDate = default, ReceivedDocumentPaymentsListItemPaymentTerms paymentTerms = default, string status = default, PaymentAccount paymentAccount = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
            this._DueDate = dueDate;
            if (this.DueDate != null)
            {
                this._flagDueDate = true;
            }
            this._PaidDate = paidDate;
            if (this.PaidDate != null)
            {
                this._flagPaidDate = true;
            }
            this._PaymentTerms = paymentTerms;
            if (this.PaymentTerms != null)
            {
                this._flagPaymentTerms = true;
            }
            this._Status = status;
            if (this.Status != null)
            {
                this._flagStatus = true;
            }
            this._PaymentAccount = paymentAccount;
            if (this.PaymentAccount != null)
            {
                this._flagPaymentAccount = true;
            }
        }

        /// <summary>
        /// Received document payment id
        /// </summary>
        /// <value>Received document payment id</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Received document payment total amount
        /// </summary>
        /// <value>Received document payment total amount</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private decimal _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// Due date
        /// </summary>
        /// <value>Due date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "due_date", EmitDefaultValue = true)]
        public DateOnly DueDate
        {
            get{ return _DueDate;}
            set
            {
                _DueDate = value;
                _flagDueDate = true;
            }
        }
        private DateOnly _DueDate;
        private bool _flagDueDate;

        /// <summary>
        /// Returns false as DueDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDueDate()
        {
            return _flagDueDate;
        }
        /// <summary>
        /// Received document payment paid date
        /// </summary>
        /// <value>Received document payment paid date</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "paid_date", EmitDefaultValue = true)]
        public DateOnly PaidDate
        {
            get{ return _PaidDate;}
            set
            {
                _PaidDate = value;
                _flagPaidDate = true;
            }
        }
        private DateOnly _PaidDate;
        private bool _flagPaidDate;

        /// <summary>
        /// Returns false as PaidDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaidDate()
        {
            return _flagPaidDate;
        }
        /// <summary>
        /// Gets or Sets PaymentTerms
        /// </summary>
        [DataMember(Name = "payment_terms", EmitDefaultValue = true)]
        public ReceivedDocumentPaymentsListItemPaymentTerms PaymentTerms
        {
            get{ return _PaymentTerms;}
            set
            {
                _PaymentTerms = value;
                _flagPaymentTerms = true;
            }
        }
        private ReceivedDocumentPaymentsListItemPaymentTerms _PaymentTerms;
        private bool _flagPaymentTerms;

        /// <summary>
        /// Returns false as PaymentTerms should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentTerms()
        {
            return _flagPaymentTerms;
        }
        /// <summary>
        /// Received document payment status
        /// </summary>
        /// <value>Received document payment status</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private string _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// Gets or Sets PaymentAccount
        /// </summary>
        [DataMember(Name = "payment_account", EmitDefaultValue = true)]
        public PaymentAccount PaymentAccount
        {
            get{ return _PaymentAccount;}
            set
            {
                _PaymentAccount = value;
                _flagPaymentAccount = true;
            }
        }
        private PaymentAccount _PaymentAccount;
        private bool _flagPaymentAccount;

        /// <summary>
        /// Returns false as PaymentAccount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccount()
        {
            return _flagPaymentAccount;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReceivedDocumentPaymentsListItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  PaymentTerms: ").Append(PaymentTerms).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PaymentAccount: ").Append(PaymentAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceivedDocumentPaymentsListItem);
        }

        /// <summary>
        /// Returns true if ReceivedDocumentPaymentsListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceivedDocumentPaymentsListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceivedDocumentPaymentsListItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    this.DueDate.Equals(input.DueDate)
                ) && 
                (
                    this.PaidDate == input.PaidDate ||
                    this.PaidDate.Equals(input.PaidDate)
                ) && 
                (
                    this.PaymentTerms == input.PaymentTerms ||
                    (this.PaymentTerms != null &&
                    this.PaymentTerms.Equals(input.PaymentTerms))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PaymentAccount == input.PaymentAccount ||
                    (this.PaymentAccount != null &&
                    this.PaymentAccount.Equals(input.PaymentAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                hashCode = (hashCode * 59) + this.DueDate.GetHashCode();
                hashCode = (hashCode * 59) + this.PaidDate.GetHashCode();
                if (this.PaymentTerms != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentTerms.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.PaymentAccount != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccount.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="ReceivedDocumentPaymentsListItem" />
    /// </summary>
    public class ReceivedDocumentPaymentsListItemJsonConverter : JsonConverter<ReceivedDocumentPaymentsListItem>
    {
        /// <summary>
        /// The format to use to serialize DueDate
        /// </summary>
        public static string DueDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// The format to use to serialize PaidDate
        /// </summary>
        public static string PaidDateFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="ReceivedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReceivedDocumentPaymentsListItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<decimal?> amount = default;
            Option<DateOnly?> dueDate = default;
            Option<DateOnly?> paidDate = default;
            Option<ReceivedDocumentPaymentsListItemPaymentTerms?> paymentTerms = default;
            Option<string?> status = default;
            Option<PaymentAccount?> paymentAccount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "amount":
                            amount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "due_date":
                            dueDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "paid_date":
                            paidDate = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_terms":
                            paymentTerms = new Option<ReceivedDocumentPaymentsListItemPaymentTerms?>(JsonSerializer.Deserialize<ReceivedDocumentPaymentsListItemPaymentTerms>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "payment_account":
                            paymentAccount = new Option<PaymentAccount?>(JsonSerializer.Deserialize<PaymentAccount>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReceivedDocumentPaymentsListItem(id, amount, dueDate, paidDate, paymentTerms, status, paymentAccount);
        }

        /// <summary>
        /// Serializes a <see cref="ReceivedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentPaymentsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReceivedDocumentPaymentsListItem receivedDocumentPaymentsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, receivedDocumentPaymentsListItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ReceivedDocumentPaymentsListItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="receivedDocumentPaymentsListItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ReceivedDocumentPaymentsListItem receivedDocumentPaymentsListItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (receivedDocumentPaymentsListItem.IdOption.IsSet)
                if (receivedDocumentPaymentsListItem.IdOption.Value != null)
                    writer.WriteNumber("id", receivedDocumentPaymentsListItem.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (receivedDocumentPaymentsListItem.AmountOption.IsSet)
                if (receivedDocumentPaymentsListItem.AmountOption.Value != null)
                    writer.WriteNumber("amount", receivedDocumentPaymentsListItem.AmountOption.Value!.Value);
                else
                    writer.WriteNull("amount");

            if (receivedDocumentPaymentsListItem.DueDateOption.IsSet)
                if (receivedDocumentPaymentsListItem.DueDateOption.Value != null)
                    writer.WriteString("due_date", receivedDocumentPaymentsListItem.DueDateOption.Value!.Value.ToString(DueDateFormat));
                else
                    writer.WriteNull("due_date");

            if (receivedDocumentPaymentsListItem.PaidDateOption.IsSet)
                if (receivedDocumentPaymentsListItem.PaidDateOption.Value != null)
                    writer.WriteString("paid_date", receivedDocumentPaymentsListItem.PaidDateOption.Value!.Value.ToString(PaidDateFormat));
                else
                    writer.WriteNull("paid_date");

            if (receivedDocumentPaymentsListItem.PaymentTermsOption.IsSet)
                if (receivedDocumentPaymentsListItem.PaymentTermsOption.Value != null)
                {
                    writer.WritePropertyName("payment_terms");
                    JsonSerializer.Serialize(writer, receivedDocumentPaymentsListItem.PaymentTerms, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_terms");
            if (receivedDocumentPaymentsListItem.StatusOption.IsSet)
                if (receivedDocumentPaymentsListItem.StatusOption.Value != null)
                    writer.WriteString("status", receivedDocumentPaymentsListItem.Status);
                else
                    writer.WriteNull("status");

            if (receivedDocumentPaymentsListItem.PaymentAccountOption.IsSet)
                if (receivedDocumentPaymentsListItem.PaymentAccountOption.Value != null)
                {
                    writer.WritePropertyName("payment_account");
                    JsonSerializer.Serialize(writer, receivedDocumentPaymentsListItem.PaymentAccount, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_account");
        }
    }
}
