// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// GetUserInfoResponseInfo
    /// </summary>
    [DataContract(Name = "GetUserInfoResponse_info")]
    public partial class GetUserInfoResponseInfo : IEquatable<GetUserInfoResponseInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserInfoResponseInfo" /> class.
        /// </summary>
        /// <param name="needMarketingConsentsConfirmation">needMarketingConsentsConfirmation.</param>
        /// <param name="needPasswordChange">needPasswordChange.</param>
        /// <param name="needTermsOfServiceConfirmation">needTermsOfServiceConfirmation.</param>
        public GetUserInfoResponseInfo(bool needMarketingConsentsConfirmation = default, bool needPasswordChange = default, bool needTermsOfServiceConfirmation = default)
        {
            this._NeedMarketingConsentsConfirmation = needMarketingConsentsConfirmation;
            if (this.NeedMarketingConsentsConfirmation != null)
            {
                this._flagNeedMarketingConsentsConfirmation = true;
            }
            this._NeedPasswordChange = needPasswordChange;
            if (this.NeedPasswordChange != null)
            {
                this._flagNeedPasswordChange = true;
            }
            this._NeedTermsOfServiceConfirmation = needTermsOfServiceConfirmation;
            if (this.NeedTermsOfServiceConfirmation != null)
            {
                this._flagNeedTermsOfServiceConfirmation = true;
            }
        }

        /// <summary>
        /// Gets or Sets NeedMarketingConsentsConfirmation
        /// </summary>
        [DataMember(Name = "need_marketing_consents_confirmation", EmitDefaultValue = true)]
        public bool NeedMarketingConsentsConfirmation
        {
            get{ return _NeedMarketingConsentsConfirmation;}
            set
            {
                _NeedMarketingConsentsConfirmation = value;
                _flagNeedMarketingConsentsConfirmation = true;
            }
        }
        private bool _NeedMarketingConsentsConfirmation;
        private bool _flagNeedMarketingConsentsConfirmation;

        /// <summary>
        /// Returns false as NeedMarketingConsentsConfirmation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNeedMarketingConsentsConfirmation()
        {
            return _flagNeedMarketingConsentsConfirmation;
        }
        /// <summary>
        /// Gets or Sets NeedPasswordChange
        /// </summary>
        [DataMember(Name = "need_password_change", EmitDefaultValue = true)]
        public bool NeedPasswordChange
        {
            get{ return _NeedPasswordChange;}
            set
            {
                _NeedPasswordChange = value;
                _flagNeedPasswordChange = true;
            }
        }
        private bool _NeedPasswordChange;
        private bool _flagNeedPasswordChange;

        /// <summary>
        /// Returns false as NeedPasswordChange should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNeedPasswordChange()
        {
            return _flagNeedPasswordChange;
        }
        /// <summary>
        /// Gets or Sets NeedTermsOfServiceConfirmation
        /// </summary>
        [DataMember(Name = "need_terms_of_service_confirmation", EmitDefaultValue = true)]
        public bool NeedTermsOfServiceConfirmation
        {
            get{ return _NeedTermsOfServiceConfirmation;}
            set
            {
                _NeedTermsOfServiceConfirmation = value;
                _flagNeedTermsOfServiceConfirmation = true;
            }
        }
        private bool _NeedTermsOfServiceConfirmation;
        private bool _flagNeedTermsOfServiceConfirmation;

        /// <summary>
        /// Returns false as NeedTermsOfServiceConfirmation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNeedTermsOfServiceConfirmation()
        {
            return _flagNeedTermsOfServiceConfirmation;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserInfoResponseInfo {\n");
            sb.Append("  NeedMarketingConsentsConfirmation: ").Append(NeedMarketingConsentsConfirmation).Append("\n");
            sb.Append("  NeedPasswordChange: ").Append(NeedPasswordChange).Append("\n");
            sb.Append("  NeedTermsOfServiceConfirmation: ").Append(NeedTermsOfServiceConfirmation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetUserInfoResponseInfo);
        }

        /// <summary>
        /// Returns true if GetUserInfoResponseInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of GetUserInfoResponseInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUserInfoResponseInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NeedMarketingConsentsConfirmation == input.NeedMarketingConsentsConfirmation ||
                    this.NeedMarketingConsentsConfirmation.Equals(input.NeedMarketingConsentsConfirmation)
                ) && 
                (
                    this.NeedPasswordChange == input.NeedPasswordChange ||
                    this.NeedPasswordChange.Equals(input.NeedPasswordChange)
                ) && 
                (
                    this.NeedTermsOfServiceConfirmation == input.NeedTermsOfServiceConfirmation ||
                    this.NeedTermsOfServiceConfirmation.Equals(input.NeedTermsOfServiceConfirmation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.NeedMarketingConsentsConfirmation.GetHashCode();
                hashCode = (hashCode * 59) + this.NeedPasswordChange.GetHashCode();
                hashCode = (hashCode * 59) + this.NeedTermsOfServiceConfirmation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="GetUserInfoResponseInfo" />
    /// </summary>
    public class GetUserInfoResponseInfoJsonConverter : JsonConverter<GetUserInfoResponseInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetUserInfoResponseInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetUserInfoResponseInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> needMarketingConsentsConfirmation = default;
            Option<bool?> needPasswordChange = default;
            Option<bool?> needTermsOfServiceConfirmation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "need_marketing_consents_confirmation":
                            needMarketingConsentsConfirmation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "need_password_change":
                            needPasswordChange = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "need_terms_of_service_confirmation":
                            needTermsOfServiceConfirmation = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new GetUserInfoResponseInfo(needMarketingConsentsConfirmation, needPasswordChange, needTermsOfServiceConfirmation);
        }

        /// <summary>
        /// Serializes a <see cref="GetUserInfoResponseInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserInfoResponseInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetUserInfoResponseInfo getUserInfoResponseInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, getUserInfoResponseInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetUserInfoResponseInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getUserInfoResponseInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GetUserInfoResponseInfo getUserInfoResponseInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getUserInfoResponseInfo.NeedMarketingConsentsConfirmationOption.IsSet)
                if (getUserInfoResponseInfo.NeedMarketingConsentsConfirmationOption.Value != null)
                    writer.WriteBoolean("need_marketing_consents_confirmation", getUserInfoResponseInfo.NeedMarketingConsentsConfirmationOption.Value!.Value);
                else
                    writer.WriteNull("need_marketing_consents_confirmation");

            if (getUserInfoResponseInfo.NeedPasswordChangeOption.IsSet)
                if (getUserInfoResponseInfo.NeedPasswordChangeOption.Value != null)
                    writer.WriteBoolean("need_password_change", getUserInfoResponseInfo.NeedPasswordChangeOption.Value!.Value);
                else
                    writer.WriteNull("need_password_change");

            if (getUserInfoResponseInfo.NeedTermsOfServiceConfirmationOption.IsSet)
                if (getUserInfoResponseInfo.NeedTermsOfServiceConfirmationOption.Value != null)
                    writer.WriteBoolean("need_terms_of_service_confirmation", getUserInfoResponseInfo.NeedTermsOfServiceConfirmationOption.Value!.Value);
                else
                    writer.WriteNull("need_terms_of_service_confirmation");
        }
    }
}
