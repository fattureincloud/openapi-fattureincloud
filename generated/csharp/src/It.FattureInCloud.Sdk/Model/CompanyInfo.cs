// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// CompanyInfo
    /// </summary>
    [DataContract(Name = "CompanyInfo")]
    public partial class CompanyInfo : IEquatable<CompanyInfo>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = false)]
        public CompanyType? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private CompanyType? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }

        /// <summary>
        /// Gets or Sets FicPlanName
        /// </summary>

        [DataMember(Name = "fic_plan_name", EmitDefaultValue = false)]
        public FattureInCloudPlanType? FicPlanName
        {
            get{ return _FicPlanName;}
            set
            {
                _FicPlanName = value;
                _flagFicPlanName = true;
            }
        }
        private FattureInCloudPlanType? _FicPlanName;
        private bool _flagFicPlanName;

        /// <summary>
        /// Returns false as FicPlanName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicPlanName()
        {
            return _flagFicPlanName;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfo" /> class.
        /// </summary>
        /// <param name="id">Company id.</param>
        /// <param name="name">Company name.</param>
        /// <param name="email">Company email.</param>
        /// <param name="type">type.</param>
        /// <param name="accessInfo">accessInfo.</param>
        /// <param name="ficLicenseExpire">ficLicenseExpire.</param>
        /// <param name="ficPlanName">ficPlanName.</param>
        /// <param name="planInfo">planInfo.</param>
        /// <param name="accountantId">Company accountant id.</param>
        /// <param name="isAccountant">Is the logged account an accountant..</param>
        public CompanyInfo(int id = default, string name = default, string email = default, CompanyType? type = default, CompanyInfoAccessInfo accessInfo = default, DateOnly ficLicenseExpire = default, FattureInCloudPlanType? ficPlanName = default, CompanyInfoPlanInfo planInfo = default, int accountantId = default, bool isAccountant = default)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Email = email;
            if (this.Email != null)
            {
                this._flagEmail = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._AccessInfo = accessInfo;
            if (this.AccessInfo != null)
            {
                this._flagAccessInfo = true;
            }
            this._FicLicenseExpire = ficLicenseExpire;
            if (this.FicLicenseExpire != null)
            {
                this._flagFicLicenseExpire = true;
            }
            this._FicPlanName = ficPlanName;
            if (this.FicPlanName != null)
            {
                this._flagFicPlanName = true;
            }
            this._PlanInfo = planInfo;
            if (this.PlanInfo != null)
            {
                this._flagPlanInfo = true;
            }
            this._AccountantId = accountantId;
            if (this.AccountantId != null)
            {
                this._flagAccountantId = true;
            }
            this._IsAccountant = isAccountant;
            if (this.IsAccountant != null)
            {
                this._flagIsAccountant = true;
            }
        }

        /// <summary>
        /// Company id
        /// </summary>
        /// <value>Company id</value>
        /*
        <example>12345</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private int _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Company name
        /// </summary>
        /// <value>Company name</value>
        /*
        <example>Mario Rossi S.r.l.</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Company email
        /// </summary>
        /// <value>Company email</value>
        /*
        <example>mario@rossi-example.it</example>
        */
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get{ return _Email;}
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }
        private string _Email;
        private bool _flagEmail;

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }
        /// <summary>
        /// Gets or Sets AccessInfo
        /// </summary>
        [DataMember(Name = "access_info", EmitDefaultValue = true)]
        public CompanyInfoAccessInfo AccessInfo
        {
            get{ return _AccessInfo;}
            set
            {
                _AccessInfo = value;
                _flagAccessInfo = true;
            }
        }
        private CompanyInfoAccessInfo _AccessInfo;
        private bool _flagAccessInfo;

        /// <summary>
        /// Returns false as AccessInfo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccessInfo()
        {
            return _flagAccessInfo;
        }
        /// <summary>
        /// Gets or Sets FicLicenseExpire
        /// </summary>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "fic_license_expire", EmitDefaultValue = true)]
        public DateOnly FicLicenseExpire
        {
            get{ return _FicLicenseExpire;}
            set
            {
                _FicLicenseExpire = value;
                _flagFicLicenseExpire = true;
            }
        }
        private DateOnly _FicLicenseExpire;
        private bool _flagFicLicenseExpire;

        /// <summary>
        /// Returns false as FicLicenseExpire should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFicLicenseExpire()
        {
            return _flagFicLicenseExpire;
        }
        /// <summary>
        /// Gets or Sets PlanInfo
        /// </summary>
        [DataMember(Name = "plan_info", EmitDefaultValue = true)]
        public CompanyInfoPlanInfo PlanInfo
        {
            get{ return _PlanInfo;}
            set
            {
                _PlanInfo = value;
                _flagPlanInfo = true;
            }
        }
        private CompanyInfoPlanInfo _PlanInfo;
        private bool _flagPlanInfo;

        /// <summary>
        /// Returns false as PlanInfo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePlanInfo()
        {
            return _flagPlanInfo;
        }
        /// <summary>
        /// Company accountant id
        /// </summary>
        /// <value>Company accountant id</value>
        [DataMember(Name = "accountant_id", EmitDefaultValue = true)]
        public int AccountantId
        {
            get{ return _AccountantId;}
            set
            {
                _AccountantId = value;
                _flagAccountantId = true;
            }
        }
        private int _AccountantId;
        private bool _flagAccountantId;

        /// <summary>
        /// Returns false as AccountantId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountantId()
        {
            return _flagAccountantId;
        }
        /// <summary>
        /// Is the logged account an accountant.
        /// </summary>
        /// <value>Is the logged account an accountant.</value>
        [DataMember(Name = "is_accountant", EmitDefaultValue = true)]
        public bool IsAccountant
        {
            get{ return _IsAccountant;}
            set
            {
                _IsAccountant = value;
                _flagIsAccountant = true;
            }
        }
        private bool _IsAccountant;
        private bool _flagIsAccountant;

        /// <summary>
        /// Returns false as IsAccountant should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAccountant()
        {
            return _flagIsAccountant;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AccessInfo: ").Append(AccessInfo).Append("\n");
            sb.Append("  FicLicenseExpire: ").Append(FicLicenseExpire).Append("\n");
            sb.Append("  FicPlanName: ").Append(FicPlanName).Append("\n");
            sb.Append("  PlanInfo: ").Append(PlanInfo).Append("\n");
            sb.Append("  AccountantId: ").Append(AccountantId).Append("\n");
            sb.Append("  IsAccountant: ").Append(IsAccountant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyInfo);
        }

        /// <summary>
        /// Returns true if CompanyInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.AccessInfo == input.AccessInfo ||
                    (this.AccessInfo != null &&
                    this.AccessInfo.Equals(input.AccessInfo))
                ) && 
                (
                    this.FicLicenseExpire == input.FicLicenseExpire ||
                    this.FicLicenseExpire.Equals(input.FicLicenseExpire)
                ) && 
                (
                    this.FicPlanName == input.FicPlanName ||
                    this.FicPlanName.Equals(input.FicPlanName)
                ) && 
                (
                    this.PlanInfo == input.PlanInfo ||
                    (this.PlanInfo != null &&
                    this.PlanInfo.Equals(input.PlanInfo))
                ) && 
                (
                    this.AccountantId == input.AccountantId ||
                    this.AccountantId.Equals(input.AccountantId)
                ) && 
                (
                    this.IsAccountant == input.IsAccountant ||
                    this.IsAccountant.Equals(input.IsAccountant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.AccessInfo != null)
                {
                    hashCode = (hashCode * 59) + this.AccessInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FicLicenseExpire.GetHashCode();
                hashCode = (hashCode * 59) + this.FicPlanName.GetHashCode();
                if (this.PlanInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PlanInfo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AccountantId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsAccountant.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="CompanyInfo" />
    /// </summary>
    public class CompanyInfoJsonConverter : JsonConverter<CompanyInfo>
    {
        /// <summary>
        /// The format to use to serialize FicLicenseExpire
        /// </summary>
        public static string FicLicenseExpireFormat { get; set; } = "yyyy'-'MM'-'dd";

        /// <summary>
        /// Deserializes json to <see cref="CompanyInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CompanyInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<string?> email = default;
            Option<CompanyType?> type = default;
            Option<CompanyInfoAccessInfo?> accessInfo = default;
            Option<DateOnly?> ficLicenseExpire = default;
            Option<FattureInCloudPlanType?> ficPlanName = default;
            Option<CompanyInfoPlanInfo?> planInfo = default;
            Option<int?> accountantId = default;
            Option<bool?> isAccountant = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<CompanyType?>(CompanyTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "access_info":
                            accessInfo = new Option<CompanyInfoAccessInfo?>(JsonSerializer.Deserialize<CompanyInfoAccessInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fic_license_expire":
                            ficLicenseExpire = new Option<DateOnly?>(JsonSerializer.Deserialize<DateOnly?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fic_plan_name":
                            string? ficPlanNameRawValue = utf8JsonReader.GetString();
                            if (ficPlanNameRawValue != null)
                                ficPlanName = new Option<FattureInCloudPlanType?>(FattureInCloudPlanTypeValueConverter.FromStringOrDefault(ficPlanNameRawValue));
                            break;
                        case "plan_info":
                            planInfo = new Option<CompanyInfoPlanInfo?>(JsonSerializer.Deserialize<CompanyInfoPlanInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "accountant_id":
                            accountantId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "is_accountant":
                            isAccountant = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class CompanyInfo.");

            if (ficPlanName.IsSet && ficPlanName.Value == null)
                throw new ArgumentNullException(nameof(ficPlanName), "Property is not nullable for class CompanyInfo.");

            return new CompanyInfo(id, name, email, type, accessInfo, ficLicenseExpire, ficPlanName, planInfo, accountantId, isAccountant);
        }

        /// <summary>
        /// Serializes a <see cref="CompanyInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CompanyInfo companyInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, companyInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CompanyInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CompanyInfo companyInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (companyInfo.IdOption.IsSet)
                if (companyInfo.IdOption.Value != null)
                    writer.WriteNumber("id", companyInfo.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (companyInfo.NameOption.IsSet)
                if (companyInfo.NameOption.Value != null)
                    writer.WriteString("name", companyInfo.Name);
                else
                    writer.WriteNull("name");

            if (companyInfo.EmailOption.IsSet)
                if (companyInfo.EmailOption.Value != null)
                    writer.WriteString("email", companyInfo.Email);
                else
                    writer.WriteNull("email");

            if (companyInfo.TypeOption.IsSet)
            {
                var typeRawValue = CompanyTypeValueConverter.ToJsonValue(companyInfo.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (companyInfo.AccessInfoOption.IsSet)
                if (companyInfo.AccessInfoOption.Value != null)
                {
                    writer.WritePropertyName("access_info");
                    JsonSerializer.Serialize(writer, companyInfo.AccessInfo, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("access_info");
            if (companyInfo.FicLicenseExpireOption.IsSet)
                if (companyInfo.FicLicenseExpireOption.Value != null)
                    writer.WriteString("fic_license_expire", companyInfo.FicLicenseExpireOption.Value!.Value.ToString(FicLicenseExpireFormat));
                else
                    writer.WriteNull("fic_license_expire");

            if (companyInfo.FicPlanNameOption.IsSet)
            {
                var ficPlanNameRawValue = FattureInCloudPlanTypeValueConverter.ToJsonValue(companyInfo.FicPlanName!.Value);
                writer.WriteString("fic_plan_name", ficPlanNameRawValue);
            }
            if (companyInfo.PlanInfoOption.IsSet)
                if (companyInfo.PlanInfoOption.Value != null)
                {
                    writer.WritePropertyName("plan_info");
                    JsonSerializer.Serialize(writer, companyInfo.PlanInfo, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("plan_info");
            if (companyInfo.AccountantIdOption.IsSet)
                if (companyInfo.AccountantIdOption.Value != null)
                    writer.WriteNumber("accountant_id", companyInfo.AccountantIdOption.Value!.Value);
                else
                    writer.WriteNull("accountant_id");

            if (companyInfo.IsAccountantOption.IsSet)
                if (companyInfo.IsAccountantOption.Value != null)
                    writer.WriteBoolean("is_accountant", companyInfo.IsAccountantOption.Value!.Value);
                else
                    writer.WriteNull("is_accountant");
        }
    }
}
