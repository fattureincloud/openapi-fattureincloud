// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Access to functions for this company.
    /// </summary>
    [DataContract(Name = "CompanyInfo_plan_info_functions")]
    public partial class CompanyInfoPlanInfoFunctions : IEquatable<CompanyInfoPlanInfoFunctions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyInfoPlanInfoFunctions" /> class.
        /// </summary>
        /// <param name="archive">archive.</param>
        /// <param name="cerved">cerved.</param>
        /// <param name="documentAttachments">documentAttachments.</param>
        /// <param name="eInvoice">eInvoice.</param>
        /// <param name="genius">genius.</param>
        /// <param name="mailTracking">mailTracking.</param>
        /// <param name="paymentNotifications">paymentNotifications.</param>
        /// <param name="paypal">paypal.</param>
        /// <param name="receipts">receipts.</param>
        /// <param name="recurring">recurring.</param>
        /// <param name="smtp">smtp.</param>
        /// <param name="stock">stock.</param>
        /// <param name="subaccounts">subaccounts.</param>
        /// <param name="tesseraSanitaria">tesseraSanitaria.</param>
        /// <param name="tsDigital">tsDigital.</param>
        /// <param name="tsInvoiceTrading">tsInvoiceTrading.</param>
        /// <param name="tsPay">tsPay.</param>
        public CompanyInfoPlanInfoFunctions(bool archive = default, bool cerved = default, bool documentAttachments = default, bool eInvoice = default, bool genius = default, bool mailTracking = default, bool paymentNotifications = default, bool paypal = default, bool receipts = default, bool recurring = default, bool smtp = default, bool stock = default, bool subaccounts = default, bool tesseraSanitaria = default, bool tsDigital = default, bool tsInvoiceTrading = default, bool tsPay = default)
        {
            this._Archive = archive;
            if (this.Archive != null)
            {
                this._flagArchive = true;
            }
            this._Cerved = cerved;
            if (this.Cerved != null)
            {
                this._flagCerved = true;
            }
            this._DocumentAttachments = documentAttachments;
            if (this.DocumentAttachments != null)
            {
                this._flagDocumentAttachments = true;
            }
            this._EInvoice = eInvoice;
            if (this.EInvoice != null)
            {
                this._flagEInvoice = true;
            }
            this._Genius = genius;
            if (this.Genius != null)
            {
                this._flagGenius = true;
            }
            this._MailTracking = mailTracking;
            if (this.MailTracking != null)
            {
                this._flagMailTracking = true;
            }
            this._PaymentNotifications = paymentNotifications;
            if (this.PaymentNotifications != null)
            {
                this._flagPaymentNotifications = true;
            }
            this._Paypal = paypal;
            if (this.Paypal != null)
            {
                this._flagPaypal = true;
            }
            this._Receipts = receipts;
            if (this.Receipts != null)
            {
                this._flagReceipts = true;
            }
            this._Recurring = recurring;
            if (this.Recurring != null)
            {
                this._flagRecurring = true;
            }
            this._Smtp = smtp;
            if (this.Smtp != null)
            {
                this._flagSmtp = true;
            }
            this._Stock = stock;
            if (this.Stock != null)
            {
                this._flagStock = true;
            }
            this._Subaccounts = subaccounts;
            if (this.Subaccounts != null)
            {
                this._flagSubaccounts = true;
            }
            this._TesseraSanitaria = tesseraSanitaria;
            if (this.TesseraSanitaria != null)
            {
                this._flagTesseraSanitaria = true;
            }
            this._TsDigital = tsDigital;
            if (this.TsDigital != null)
            {
                this._flagTsDigital = true;
            }
            this._TsInvoiceTrading = tsInvoiceTrading;
            if (this.TsInvoiceTrading != null)
            {
                this._flagTsInvoiceTrading = true;
            }
            this._TsPay = tsPay;
            if (this.TsPay != null)
            {
                this._flagTsPay = true;
            }
        }

        /// <summary>
        /// Gets or Sets Archive
        /// </summary>
        [DataMember(Name = "archive", EmitDefaultValue = true)]
        public bool Archive
        {
            get{ return _Archive;}
            set
            {
                _Archive = value;
                _flagArchive = true;
            }
        }
        private bool _Archive;
        private bool _flagArchive;

        /// <summary>
        /// Returns false as Archive should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeArchive()
        {
            return _flagArchive;
        }
        /// <summary>
        /// Gets or Sets Cerved
        /// </summary>
        [DataMember(Name = "cerved", EmitDefaultValue = true)]
        public bool Cerved
        {
            get{ return _Cerved;}
            set
            {
                _Cerved = value;
                _flagCerved = true;
            }
        }
        private bool _Cerved;
        private bool _flagCerved;

        /// <summary>
        /// Returns false as Cerved should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCerved()
        {
            return _flagCerved;
        }
        /// <summary>
        /// Gets or Sets DocumentAttachments
        /// </summary>
        [DataMember(Name = "document_attachments", EmitDefaultValue = true)]
        public bool DocumentAttachments
        {
            get{ return _DocumentAttachments;}
            set
            {
                _DocumentAttachments = value;
                _flagDocumentAttachments = true;
            }
        }
        private bool _DocumentAttachments;
        private bool _flagDocumentAttachments;

        /// <summary>
        /// Returns false as DocumentAttachments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDocumentAttachments()
        {
            return _flagDocumentAttachments;
        }
        /// <summary>
        /// Gets or Sets EInvoice
        /// </summary>
        [DataMember(Name = "e_invoice", EmitDefaultValue = true)]
        public bool EInvoice
        {
            get{ return _EInvoice;}
            set
            {
                _EInvoice = value;
                _flagEInvoice = true;
            }
        }
        private bool _EInvoice;
        private bool _flagEInvoice;

        /// <summary>
        /// Returns false as EInvoice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEInvoice()
        {
            return _flagEInvoice;
        }
        /// <summary>
        /// Gets or Sets Genius
        /// </summary>
        [DataMember(Name = "genius", EmitDefaultValue = true)]
        public bool Genius
        {
            get{ return _Genius;}
            set
            {
                _Genius = value;
                _flagGenius = true;
            }
        }
        private bool _Genius;
        private bool _flagGenius;

        /// <summary>
        /// Returns false as Genius should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGenius()
        {
            return _flagGenius;
        }
        /// <summary>
        /// Gets or Sets MailTracking
        /// </summary>
        [DataMember(Name = "mail_tracking", EmitDefaultValue = true)]
        public bool MailTracking
        {
            get{ return _MailTracking;}
            set
            {
                _MailTracking = value;
                _flagMailTracking = true;
            }
        }
        private bool _MailTracking;
        private bool _flagMailTracking;

        /// <summary>
        /// Returns false as MailTracking should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMailTracking()
        {
            return _flagMailTracking;
        }
        /// <summary>
        /// Gets or Sets PaymentNotifications
        /// </summary>
        [DataMember(Name = "payment_notifications", EmitDefaultValue = true)]
        public bool PaymentNotifications
        {
            get{ return _PaymentNotifications;}
            set
            {
                _PaymentNotifications = value;
                _flagPaymentNotifications = true;
            }
        }
        private bool _PaymentNotifications;
        private bool _flagPaymentNotifications;

        /// <summary>
        /// Returns false as PaymentNotifications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentNotifications()
        {
            return _flagPaymentNotifications;
        }
        /// <summary>
        /// Gets or Sets Paypal
        /// </summary>
        [DataMember(Name = "paypal", EmitDefaultValue = true)]
        public bool Paypal
        {
            get{ return _Paypal;}
            set
            {
                _Paypal = value;
                _flagPaypal = true;
            }
        }
        private bool _Paypal;
        private bool _flagPaypal;

        /// <summary>
        /// Returns false as Paypal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaypal()
        {
            return _flagPaypal;
        }
        /// <summary>
        /// Gets or Sets Receipts
        /// </summary>
        [DataMember(Name = "receipts", EmitDefaultValue = true)]
        public bool Receipts
        {
            get{ return _Receipts;}
            set
            {
                _Receipts = value;
                _flagReceipts = true;
            }
        }
        private bool _Receipts;
        private bool _flagReceipts;

        /// <summary>
        /// Returns false as Receipts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReceipts()
        {
            return _flagReceipts;
        }
        /// <summary>
        /// Gets or Sets Recurring
        /// </summary>
        [DataMember(Name = "recurring", EmitDefaultValue = true)]
        public bool Recurring
        {
            get{ return _Recurring;}
            set
            {
                _Recurring = value;
                _flagRecurring = true;
            }
        }
        private bool _Recurring;
        private bool _flagRecurring;

        /// <summary>
        /// Returns false as Recurring should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecurring()
        {
            return _flagRecurring;
        }
        /// <summary>
        /// Gets or Sets Smtp
        /// </summary>
        [DataMember(Name = "smtp", EmitDefaultValue = true)]
        public bool Smtp
        {
            get{ return _Smtp;}
            set
            {
                _Smtp = value;
                _flagSmtp = true;
            }
        }
        private bool _Smtp;
        private bool _flagSmtp;

        /// <summary>
        /// Returns false as Smtp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSmtp()
        {
            return _flagSmtp;
        }
        /// <summary>
        /// Gets or Sets Stock
        /// </summary>
        [DataMember(Name = "stock", EmitDefaultValue = true)]
        public bool Stock
        {
            get{ return _Stock;}
            set
            {
                _Stock = value;
                _flagStock = true;
            }
        }
        private bool _Stock;
        private bool _flagStock;

        /// <summary>
        /// Returns false as Stock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStock()
        {
            return _flagStock;
        }
        /// <summary>
        /// Gets or Sets Subaccounts
        /// </summary>
        [DataMember(Name = "subaccounts", EmitDefaultValue = true)]
        public bool Subaccounts
        {
            get{ return _Subaccounts;}
            set
            {
                _Subaccounts = value;
                _flagSubaccounts = true;
            }
        }
        private bool _Subaccounts;
        private bool _flagSubaccounts;

        /// <summary>
        /// Returns false as Subaccounts should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubaccounts()
        {
            return _flagSubaccounts;
        }
        /// <summary>
        /// Gets or Sets TesseraSanitaria
        /// </summary>
        [DataMember(Name = "tessera_sanitaria", EmitDefaultValue = true)]
        public bool TesseraSanitaria
        {
            get{ return _TesseraSanitaria;}
            set
            {
                _TesseraSanitaria = value;
                _flagTesseraSanitaria = true;
            }
        }
        private bool _TesseraSanitaria;
        private bool _flagTesseraSanitaria;

        /// <summary>
        /// Returns false as TesseraSanitaria should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTesseraSanitaria()
        {
            return _flagTesseraSanitaria;
        }
        /// <summary>
        /// Gets or Sets TsDigital
        /// </summary>
        [DataMember(Name = "ts_digital", EmitDefaultValue = true)]
        public bool TsDigital
        {
            get{ return _TsDigital;}
            set
            {
                _TsDigital = value;
                _flagTsDigital = true;
            }
        }
        private bool _TsDigital;
        private bool _flagTsDigital;

        /// <summary>
        /// Returns false as TsDigital should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsDigital()
        {
            return _flagTsDigital;
        }
        /// <summary>
        /// Gets or Sets TsInvoiceTrading
        /// </summary>
        [DataMember(Name = "ts_invoice_trading", EmitDefaultValue = true)]
        public bool TsInvoiceTrading
        {
            get{ return _TsInvoiceTrading;}
            set
            {
                _TsInvoiceTrading = value;
                _flagTsInvoiceTrading = true;
            }
        }
        private bool _TsInvoiceTrading;
        private bool _flagTsInvoiceTrading;

        /// <summary>
        /// Returns false as TsInvoiceTrading should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsInvoiceTrading()
        {
            return _flagTsInvoiceTrading;
        }
        /// <summary>
        /// Gets or Sets TsPay
        /// </summary>
        [DataMember(Name = "ts_pay", EmitDefaultValue = true)]
        public bool TsPay
        {
            get{ return _TsPay;}
            set
            {
                _TsPay = value;
                _flagTsPay = true;
            }
        }
        private bool _TsPay;
        private bool _flagTsPay;

        /// <summary>
        /// Returns false as TsPay should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTsPay()
        {
            return _flagTsPay;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompanyInfoPlanInfoFunctions {\n");
            sb.Append("  Archive: ").Append(Archive).Append("\n");
            sb.Append("  Cerved: ").Append(Cerved).Append("\n");
            sb.Append("  DocumentAttachments: ").Append(DocumentAttachments).Append("\n");
            sb.Append("  EInvoice: ").Append(EInvoice).Append("\n");
            sb.Append("  Genius: ").Append(Genius).Append("\n");
            sb.Append("  MailTracking: ").Append(MailTracking).Append("\n");
            sb.Append("  PaymentNotifications: ").Append(PaymentNotifications).Append("\n");
            sb.Append("  Paypal: ").Append(Paypal).Append("\n");
            sb.Append("  Receipts: ").Append(Receipts).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("  Smtp: ").Append(Smtp).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Subaccounts: ").Append(Subaccounts).Append("\n");
            sb.Append("  TesseraSanitaria: ").Append(TesseraSanitaria).Append("\n");
            sb.Append("  TsDigital: ").Append(TsDigital).Append("\n");
            sb.Append("  TsInvoiceTrading: ").Append(TsInvoiceTrading).Append("\n");
            sb.Append("  TsPay: ").Append(TsPay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompanyInfoPlanInfoFunctions);
        }

        /// <summary>
        /// Returns true if CompanyInfoPlanInfoFunctions instances are equal
        /// </summary>
        /// <param name="input">Instance of CompanyInfoPlanInfoFunctions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompanyInfoPlanInfoFunctions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Archive == input.Archive ||
                    this.Archive.Equals(input.Archive)
                ) && 
                (
                    this.Cerved == input.Cerved ||
                    this.Cerved.Equals(input.Cerved)
                ) && 
                (
                    this.DocumentAttachments == input.DocumentAttachments ||
                    this.DocumentAttachments.Equals(input.DocumentAttachments)
                ) && 
                (
                    this.EInvoice == input.EInvoice ||
                    this.EInvoice.Equals(input.EInvoice)
                ) && 
                (
                    this.Genius == input.Genius ||
                    this.Genius.Equals(input.Genius)
                ) && 
                (
                    this.MailTracking == input.MailTracking ||
                    this.MailTracking.Equals(input.MailTracking)
                ) && 
                (
                    this.PaymentNotifications == input.PaymentNotifications ||
                    this.PaymentNotifications.Equals(input.PaymentNotifications)
                ) && 
                (
                    this.Paypal == input.Paypal ||
                    this.Paypal.Equals(input.Paypal)
                ) && 
                (
                    this.Receipts == input.Receipts ||
                    this.Receipts.Equals(input.Receipts)
                ) && 
                (
                    this.Recurring == input.Recurring ||
                    this.Recurring.Equals(input.Recurring)
                ) && 
                (
                    this.Smtp == input.Smtp ||
                    this.Smtp.Equals(input.Smtp)
                ) && 
                (
                    this.Stock == input.Stock ||
                    this.Stock.Equals(input.Stock)
                ) && 
                (
                    this.Subaccounts == input.Subaccounts ||
                    this.Subaccounts.Equals(input.Subaccounts)
                ) && 
                (
                    this.TesseraSanitaria == input.TesseraSanitaria ||
                    this.TesseraSanitaria.Equals(input.TesseraSanitaria)
                ) && 
                (
                    this.TsDigital == input.TsDigital ||
                    this.TsDigital.Equals(input.TsDigital)
                ) && 
                (
                    this.TsInvoiceTrading == input.TsInvoiceTrading ||
                    this.TsInvoiceTrading.Equals(input.TsInvoiceTrading)
                ) && 
                (
                    this.TsPay == input.TsPay ||
                    this.TsPay.Equals(input.TsPay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Archive.GetHashCode();
                hashCode = (hashCode * 59) + this.Cerved.GetHashCode();
                hashCode = (hashCode * 59) + this.DocumentAttachments.GetHashCode();
                hashCode = (hashCode * 59) + this.EInvoice.GetHashCode();
                hashCode = (hashCode * 59) + this.Genius.GetHashCode();
                hashCode = (hashCode * 59) + this.MailTracking.GetHashCode();
                hashCode = (hashCode * 59) + this.PaymentNotifications.GetHashCode();
                hashCode = (hashCode * 59) + this.Paypal.GetHashCode();
                hashCode = (hashCode * 59) + this.Receipts.GetHashCode();
                hashCode = (hashCode * 59) + this.Recurring.GetHashCode();
                hashCode = (hashCode * 59) + this.Smtp.GetHashCode();
                hashCode = (hashCode * 59) + this.Stock.GetHashCode();
                hashCode = (hashCode * 59) + this.Subaccounts.GetHashCode();
                hashCode = (hashCode * 59) + this.TesseraSanitaria.GetHashCode();
                hashCode = (hashCode * 59) + this.TsDigital.GetHashCode();
                hashCode = (hashCode * 59) + this.TsInvoiceTrading.GetHashCode();
                hashCode = (hashCode * 59) + this.TsPay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="CompanyInfoPlanInfoFunctions" />
    /// </summary>
    public class CompanyInfoPlanInfoFunctionsJsonConverter : JsonConverter<CompanyInfoPlanInfoFunctions>
    {
        /// <summary>
        /// Deserializes json to <see cref="CompanyInfoPlanInfoFunctions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CompanyInfoPlanInfoFunctions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> archive = default;
            Option<bool?> cerved = default;
            Option<bool?> documentAttachments = default;
            Option<bool?> eInvoice = default;
            Option<bool?> genius = default;
            Option<bool?> mailTracking = default;
            Option<bool?> paymentNotifications = default;
            Option<bool?> paypal = default;
            Option<bool?> receipts = default;
            Option<bool?> recurring = default;
            Option<bool?> smtp = default;
            Option<bool?> stock = default;
            Option<bool?> subaccounts = default;
            Option<bool?> tesseraSanitaria = default;
            Option<bool?> tsDigital = default;
            Option<bool?> tsInvoiceTrading = default;
            Option<bool?> tsPay = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "archive":
                            archive = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "cerved":
                            cerved = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "document_attachments":
                            documentAttachments = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "e_invoice":
                            eInvoice = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "genius":
                            genius = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "mail_tracking":
                            mailTracking = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "payment_notifications":
                            paymentNotifications = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "paypal":
                            paypal = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "receipts":
                            receipts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "recurring":
                            recurring = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "smtp":
                            smtp = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "stock":
                            stock = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "subaccounts":
                            subaccounts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "tessera_sanitaria":
                            tesseraSanitaria = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_digital":
                            tsDigital = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_invoice_trading":
                            tsInvoiceTrading = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ts_pay":
                            tsPay = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CompanyInfoPlanInfoFunctions(archive, cerved, documentAttachments, eInvoice, genius, mailTracking, paymentNotifications, paypal, receipts, recurring, smtp, stock, subaccounts, tesseraSanitaria, tsDigital, tsInvoiceTrading, tsPay);
        }

        /// <summary>
        /// Serializes a <see cref="CompanyInfoPlanInfoFunctions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfoPlanInfoFunctions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CompanyInfoPlanInfoFunctions companyInfoPlanInfoFunctions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, companyInfoPlanInfoFunctions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CompanyInfoPlanInfoFunctions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="companyInfoPlanInfoFunctions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CompanyInfoPlanInfoFunctions companyInfoPlanInfoFunctions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (companyInfoPlanInfoFunctions.ArchiveOption.IsSet)
                if (companyInfoPlanInfoFunctions.ArchiveOption.Value != null)
                    writer.WriteBoolean("archive", companyInfoPlanInfoFunctions.ArchiveOption.Value!.Value);
                else
                    writer.WriteNull("archive");

            if (companyInfoPlanInfoFunctions.CervedOption.IsSet)
                if (companyInfoPlanInfoFunctions.CervedOption.Value != null)
                    writer.WriteBoolean("cerved", companyInfoPlanInfoFunctions.CervedOption.Value!.Value);
                else
                    writer.WriteNull("cerved");

            if (companyInfoPlanInfoFunctions.DocumentAttachmentsOption.IsSet)
                if (companyInfoPlanInfoFunctions.DocumentAttachmentsOption.Value != null)
                    writer.WriteBoolean("document_attachments", companyInfoPlanInfoFunctions.DocumentAttachmentsOption.Value!.Value);
                else
                    writer.WriteNull("document_attachments");

            if (companyInfoPlanInfoFunctions.EInvoiceOption.IsSet)
                if (companyInfoPlanInfoFunctions.EInvoiceOption.Value != null)
                    writer.WriteBoolean("e_invoice", companyInfoPlanInfoFunctions.EInvoiceOption.Value!.Value);
                else
                    writer.WriteNull("e_invoice");

            if (companyInfoPlanInfoFunctions.GeniusOption.IsSet)
                if (companyInfoPlanInfoFunctions.GeniusOption.Value != null)
                    writer.WriteBoolean("genius", companyInfoPlanInfoFunctions.GeniusOption.Value!.Value);
                else
                    writer.WriteNull("genius");

            if (companyInfoPlanInfoFunctions.MailTrackingOption.IsSet)
                if (companyInfoPlanInfoFunctions.MailTrackingOption.Value != null)
                    writer.WriteBoolean("mail_tracking", companyInfoPlanInfoFunctions.MailTrackingOption.Value!.Value);
                else
                    writer.WriteNull("mail_tracking");

            if (companyInfoPlanInfoFunctions.PaymentNotificationsOption.IsSet)
                if (companyInfoPlanInfoFunctions.PaymentNotificationsOption.Value != null)
                    writer.WriteBoolean("payment_notifications", companyInfoPlanInfoFunctions.PaymentNotificationsOption.Value!.Value);
                else
                    writer.WriteNull("payment_notifications");

            if (companyInfoPlanInfoFunctions.PaypalOption.IsSet)
                if (companyInfoPlanInfoFunctions.PaypalOption.Value != null)
                    writer.WriteBoolean("paypal", companyInfoPlanInfoFunctions.PaypalOption.Value!.Value);
                else
                    writer.WriteNull("paypal");

            if (companyInfoPlanInfoFunctions.ReceiptsOption.IsSet)
                if (companyInfoPlanInfoFunctions.ReceiptsOption.Value != null)
                    writer.WriteBoolean("receipts", companyInfoPlanInfoFunctions.ReceiptsOption.Value!.Value);
                else
                    writer.WriteNull("receipts");

            if (companyInfoPlanInfoFunctions.RecurringOption.IsSet)
                if (companyInfoPlanInfoFunctions.RecurringOption.Value != null)
                    writer.WriteBoolean("recurring", companyInfoPlanInfoFunctions.RecurringOption.Value!.Value);
                else
                    writer.WriteNull("recurring");

            if (companyInfoPlanInfoFunctions.SmtpOption.IsSet)
                if (companyInfoPlanInfoFunctions.SmtpOption.Value != null)
                    writer.WriteBoolean("smtp", companyInfoPlanInfoFunctions.SmtpOption.Value!.Value);
                else
                    writer.WriteNull("smtp");

            if (companyInfoPlanInfoFunctions.StockOption.IsSet)
                if (companyInfoPlanInfoFunctions.StockOption.Value != null)
                    writer.WriteBoolean("stock", companyInfoPlanInfoFunctions.StockOption.Value!.Value);
                else
                    writer.WriteNull("stock");

            if (companyInfoPlanInfoFunctions.SubaccountsOption.IsSet)
                if (companyInfoPlanInfoFunctions.SubaccountsOption.Value != null)
                    writer.WriteBoolean("subaccounts", companyInfoPlanInfoFunctions.SubaccountsOption.Value!.Value);
                else
                    writer.WriteNull("subaccounts");

            if (companyInfoPlanInfoFunctions.TesseraSanitariaOption.IsSet)
                if (companyInfoPlanInfoFunctions.TesseraSanitariaOption.Value != null)
                    writer.WriteBoolean("tessera_sanitaria", companyInfoPlanInfoFunctions.TesseraSanitariaOption.Value!.Value);
                else
                    writer.WriteNull("tessera_sanitaria");

            if (companyInfoPlanInfoFunctions.TsDigitalOption.IsSet)
                if (companyInfoPlanInfoFunctions.TsDigitalOption.Value != null)
                    writer.WriteBoolean("ts_digital", companyInfoPlanInfoFunctions.TsDigitalOption.Value!.Value);
                else
                    writer.WriteNull("ts_digital");

            if (companyInfoPlanInfoFunctions.TsInvoiceTradingOption.IsSet)
                if (companyInfoPlanInfoFunctions.TsInvoiceTradingOption.Value != null)
                    writer.WriteBoolean("ts_invoice_trading", companyInfoPlanInfoFunctions.TsInvoiceTradingOption.Value!.Value);
                else
                    writer.WriteNull("ts_invoice_trading");

            if (companyInfoPlanInfoFunctions.TsPayOption.IsSet)
                if (companyInfoPlanInfoFunctions.TsPayOption.Value != null)
                    writer.WriteBoolean("ts_pay", companyInfoPlanInfoFunctions.TsPayOption.Value!.Value);
                else
                    writer.WriteNull("ts_pay");
        }
    }
}
