// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Payment method type
    /// </summary>
    /// <value>Payment method type</value>
    public enum PaymentMethodType
    {
        /// <summary>
        /// Enum Standard for value: standard
        /// </summary>
        Standard = 1,

        /// <summary>
        /// Enum Riba for value: riba
        /// </summary>
        Riba = 2
    }

    /// <summary>
    /// Converts <see cref="PaymentMethodType"/> to and from the JSON value
    /// </summary>
    public static class PaymentMethodTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PaymentMethodType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentMethodType FromString(string value)
        {
            if (value.Equals("standard"))
                return PaymentMethodType.Standard;

            if (value.Equals("riba"))
                return PaymentMethodType.Riba;

            throw new NotImplementedException($"Could not convert value to type PaymentMethodType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PaymentMethodType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PaymentMethodType? FromStringOrDefault(string value)
        {
            if (value.Equals("standard"))
                return PaymentMethodType.Standard;

            if (value.Equals("riba"))
                return PaymentMethodType.Riba;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PaymentMethodType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(PaymentMethodType value)
        {
            if (value == PaymentMethodType.Standard)
                return "standard";

            if (value == PaymentMethodType.Riba)
                return "riba";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentMethodType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PaymentMethodTypeJsonConverter : JsonConverter<PaymentMethodType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PaymentMethodType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PaymentMethodType? result = rawValue == null
                ? null
                : PaymentMethodTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PaymentMethodType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethodType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PaymentMethodType paymentMethodType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PaymentMethodTypeValueConverter.ToJsonValue(paymentMethodType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PaymentMethodType"/>
    /// </summary>
    public class PaymentMethodTypeNullableJsonConverter : JsonConverter<PaymentMethodType?>
    {
        /// <summary>
        /// Returns a PaymentMethodType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PaymentMethodType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PaymentMethodType? result = rawValue == null
                ? null
                : PaymentMethodTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PaymentMethodType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="paymentMethodType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PaymentMethodType? paymentMethodType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(paymentMethodType.HasValue ? PaymentMethodTypeValueConverter.ToJsonValue(paymentMethodType.Value).ToString() : "null");
        }
    }
}
