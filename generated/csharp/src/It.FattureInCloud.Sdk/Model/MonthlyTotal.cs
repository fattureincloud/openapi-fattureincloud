// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// MonthlyTotal
    /// </summary>
    [DataContract(Name = "MonthlyTotal")]
    public partial class MonthlyTotal : IEquatable<MonthlyTotal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlyTotal" /> class.
        /// </summary>
        /// <param name="net">Monthly total net amount.</param>
        /// <param name="gross">Monthly total gross amount.</param>
        /// <param name="count">Monthly total receipt number.</param>
        public MonthlyTotal(decimal net = default, decimal gross = default, decimal count = default)
        {
            this._Net = net;
            if (this.Net != null)
            {
                this._flagNet = true;
            }
            this._Gross = gross;
            if (this.Gross != null)
            {
                this._flagGross = true;
            }
            this._Count = count;
            if (this.Count != null)
            {
                this._flagCount = true;
            }
        }

        /// <summary>
        /// Monthly total net amount
        /// </summary>
        /// <value>Monthly total net amount</value>
        [DataMember(Name = "net", EmitDefaultValue = true)]
        public decimal Net
        {
            get{ return _Net;}
            set
            {
                _Net = value;
                _flagNet = true;
            }
        }
        private decimal _Net;
        private bool _flagNet;

        /// <summary>
        /// Returns false as Net should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNet()
        {
            return _flagNet;
        }
        /// <summary>
        /// Monthly total gross amount
        /// </summary>
        /// <value>Monthly total gross amount</value>
        [DataMember(Name = "gross", EmitDefaultValue = true)]
        public decimal Gross
        {
            get{ return _Gross;}
            set
            {
                _Gross = value;
                _flagGross = true;
            }
        }
        private decimal _Gross;
        private bool _flagGross;

        /// <summary>
        /// Returns false as Gross should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGross()
        {
            return _flagGross;
        }
        /// <summary>
        /// Monthly total receipt number
        /// </summary>
        /// <value>Monthly total receipt number</value>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public decimal Count
        {
            get{ return _Count;}
            set
            {
                _Count = value;
                _flagCount = true;
            }
        }
        private decimal _Count;
        private bool _flagCount;

        /// <summary>
        /// Returns false as Count should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCount()
        {
            return _flagCount;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonthlyTotal {\n");
            sb.Append("  Net: ").Append(Net).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonthlyTotal);
        }

        /// <summary>
        /// Returns true if MonthlyTotal instances are equal
        /// </summary>
        /// <param name="input">Instance of MonthlyTotal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonthlyTotal input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Net == input.Net ||
                    this.Net.Equals(input.Net)
                ) && 
                (
                    this.Gross == input.Gross ||
                    this.Gross.Equals(input.Gross)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Net.GetHashCode();
                hashCode = (hashCode * 59) + this.Gross.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="MonthlyTotal" />
    /// </summary>
    public class MonthlyTotalJsonConverter : JsonConverter<MonthlyTotal>
    {
        /// <summary>
        /// Deserializes json to <see cref="MonthlyTotal" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MonthlyTotal Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> net = default;
            Option<decimal?> gross = default;
            Option<decimal?> count = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "net":
                            net = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "gross":
                            gross = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "count":
                            count = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MonthlyTotal(net, gross, count);
        }

        /// <summary>
        /// Serializes a <see cref="MonthlyTotal" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="monthlyTotal"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MonthlyTotal monthlyTotal, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, monthlyTotal, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MonthlyTotal" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="monthlyTotal"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MonthlyTotal monthlyTotal, JsonSerializerOptions jsonSerializerOptions)
        {
            if (monthlyTotal.NetOption.IsSet)
                if (monthlyTotal.NetOption.Value != null)
                    writer.WriteNumber("net", monthlyTotal.NetOption.Value!.Value);
                else
                    writer.WriteNull("net");

            if (monthlyTotal.GrossOption.IsSet)
                if (monthlyTotal.GrossOption.Value != null)
                    writer.WriteNumber("gross", monthlyTotal.GrossOption.Value!.Value);
                else
                    writer.WriteNull("gross");

            if (monthlyTotal.CountOption.IsSet)
                if (monthlyTotal.CountOption.Value != null)
                    writer.WriteNumber("count", monthlyTotal.CountOption.Value!.Value);
                else
                    writer.WriteNull("count");
        }
    }
}
