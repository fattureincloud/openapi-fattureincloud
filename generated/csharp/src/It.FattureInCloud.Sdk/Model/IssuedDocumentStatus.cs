// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// Issued document status
    /// </summary>
    /// <value>Issued document status</value>
    public enum IssuedDocumentStatus
    {
        /// <summary>
        /// Enum NotPaid for value: not_paid
        /// </summary>
        NotPaid = 1,

        /// <summary>
        /// Enum Paid for value: paid
        /// </summary>
        Paid = 2,

        /// <summary>
        /// Enum Reversed for value: reversed
        /// </summary>
        Reversed = 3
    }

    /// <summary>
    /// Converts <see cref="IssuedDocumentStatus"/> to and from the JSON value
    /// </summary>
    public static class IssuedDocumentStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="IssuedDocumentStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IssuedDocumentStatus FromString(string value)
        {
            if (value.Equals("not_paid"))
                return IssuedDocumentStatus.NotPaid;

            if (value.Equals("paid"))
                return IssuedDocumentStatus.Paid;

            if (value.Equals("reversed"))
                return IssuedDocumentStatus.Reversed;

            throw new NotImplementedException($"Could not convert value to type IssuedDocumentStatus: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="IssuedDocumentStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IssuedDocumentStatus? FromStringOrDefault(string value)
        {
            if (value.Equals("not_paid"))
                return IssuedDocumentStatus.NotPaid;

            if (value.Equals("paid"))
                return IssuedDocumentStatus.Paid;

            if (value.Equals("reversed"))
                return IssuedDocumentStatus.Reversed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IssuedDocumentStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(IssuedDocumentStatus value)
        {
            if (value == IssuedDocumentStatus.NotPaid)
                return "not_paid";

            if (value == IssuedDocumentStatus.Paid)
                return "paid";

            if (value == IssuedDocumentStatus.Reversed)
                return "reversed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class IssuedDocumentStatusJsonConverter : JsonConverter<IssuedDocumentStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IssuedDocumentStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IssuedDocumentStatus? result = rawValue == null
                ? null
                : IssuedDocumentStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IssuedDocumentStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentStatus issuedDocumentStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(IssuedDocumentStatusValueConverter.ToJsonValue(issuedDocumentStatus).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IssuedDocumentStatus"/>
    /// </summary>
    public class IssuedDocumentStatusNullableJsonConverter : JsonConverter<IssuedDocumentStatus?>
    {
        /// <summary>
        /// Returns a IssuedDocumentStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override IssuedDocumentStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            IssuedDocumentStatus? result = rawValue == null
                ? null
                : IssuedDocumentStatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the IssuedDocumentStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="issuedDocumentStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, IssuedDocumentStatus? issuedDocumentStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(issuedDocumentStatus.HasValue ? IssuedDocumentStatusValueConverter.ToJsonValue(issuedDocumentStatus.Value).ToString() : "null");
        }
    }
}
