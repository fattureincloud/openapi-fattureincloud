// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// F24 status
    /// </summary>
    /// <value>F24 status</value>
    public enum F24Status
    {
        /// <summary>
        /// Enum Paid for value: paid
        /// </summary>
        Paid = 1,

        /// <summary>
        /// Enum NotPaid for value: not_paid
        /// </summary>
        NotPaid = 2,

        /// <summary>
        /// Enum Reversed for value: reversed
        /// </summary>
        Reversed = 3
    }

    /// <summary>
    /// Converts <see cref="F24Status"/> to and from the JSON value
    /// </summary>
    public static class F24StatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="F24Status"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static F24Status FromString(string value)
        {
            if (value.Equals("paid"))
                return F24Status.Paid;

            if (value.Equals("not_paid"))
                return F24Status.NotPaid;

            if (value.Equals("reversed"))
                return F24Status.Reversed;

            throw new NotImplementedException($"Could not convert value to type F24Status: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="F24Status"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static F24Status? FromStringOrDefault(string value)
        {
            if (value.Equals("paid"))
                return F24Status.Paid;

            if (value.Equals("not_paid"))
                return F24Status.NotPaid;

            if (value.Equals("reversed"))
                return F24Status.Reversed;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="F24Status"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(F24Status value)
        {
            if (value == F24Status.Paid)
                return "paid";

            if (value == F24Status.NotPaid)
                return "not_paid";

            if (value == F24Status.Reversed)
                return "reversed";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="F24Status"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class F24StatusJsonConverter : JsonConverter<F24Status>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override F24Status Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            F24Status? result = rawValue == null
                ? null
                : F24StatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the F24Status to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="f24Status"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, F24Status f24Status, JsonSerializerOptions options)
        {
            writer.WriteStringValue(F24StatusValueConverter.ToJsonValue(f24Status).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="F24Status"/>
    /// </summary>
    public class F24StatusNullableJsonConverter : JsonConverter<F24Status?>
    {
        /// <summary>
        /// Returns a F24Status from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override F24Status? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            F24Status? result = rawValue == null
                ? null
                : F24StatusValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the F24Status to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="f24Status"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, F24Status? f24Status, JsonSerializerOptions options)
        {
            writer.WriteStringValue(f24Status.HasValue ? F24StatusValueConverter.ToJsonValue(f24Status.Value).ToString() : "null");
        }
    }
}
