// <auto-generated>
/*
 * Fatture in Cloud API v2 - API Reference
 *
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 500.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.1.5
 * Contact: info@fattureincloud.it
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using It.FattureInCloud.Sdk.Client;

namespace It.FattureInCloud.Sdk.Model
{
    /// <summary>
    /// EntityClientPreCreateInfo
    /// </summary>
    [DataContract(Name = "EntityClientPreCreateInfo")]
    public partial class EntityClientPreCreateInfo : IEquatable<EntityClientPreCreateInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityClientPreCreateInfo" /> class.
        /// </summary>
        /// <param name="countriesList">Countries list.</param>
        /// <param name="paymentMethodsList">Entity payment methods list.</param>
        /// <param name="paymentAccountsList">Entity payment accounts list.</param>
        /// <param name="vatTypesList">Vat types list.</param>
        /// <param name="priceLists">Entity price lists.</param>
        /// <param name="limit">Entity limit.</param>
        /// <param name="usage">Entity usage.</param>
        public EntityClientPreCreateInfo(List<string> countriesList = default, List<PaymentMethod> paymentMethodsList = default, List<PaymentAccount> paymentAccountsList = default, List<VatType> vatTypesList = default, List<PriceList> priceLists = default, decimal limit = default, decimal usage = default)
        {
            this._CountriesList = countriesList;
            if (this.CountriesList != null)
            {
                this._flagCountriesList = true;
            }
            this._PaymentMethodsList = paymentMethodsList;
            if (this.PaymentMethodsList != null)
            {
                this._flagPaymentMethodsList = true;
            }
            this._PaymentAccountsList = paymentAccountsList;
            if (this.PaymentAccountsList != null)
            {
                this._flagPaymentAccountsList = true;
            }
            this._VatTypesList = vatTypesList;
            if (this.VatTypesList != null)
            {
                this._flagVatTypesList = true;
            }
            this._PriceLists = priceLists;
            if (this.PriceLists != null)
            {
                this._flagPriceLists = true;
            }
            this._Limit = limit;
            if (this.Limit != null)
            {
                this._flagLimit = true;
            }
            this._Usage = usage;
            if (this.Usage != null)
            {
                this._flagUsage = true;
            }
        }

        /// <summary>
        /// Countries list
        /// </summary>
        /// <value>Countries list</value>
        [DataMember(Name = "countries_list", EmitDefaultValue = true)]
        public List<string> CountriesList
        {
            get{ return _CountriesList;}
            set
            {
                _CountriesList = value;
                _flagCountriesList = true;
            }
        }
        private List<string> _CountriesList;
        private bool _flagCountriesList;

        /// <summary>
        /// Returns false as CountriesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountriesList()
        {
            return _flagCountriesList;
        }
        /// <summary>
        /// Entity payment methods list
        /// </summary>
        /// <value>Entity payment methods list</value>
        [DataMember(Name = "payment_methods_list", EmitDefaultValue = true)]
        public List<PaymentMethod> PaymentMethodsList
        {
            get{ return _PaymentMethodsList;}
            set
            {
                _PaymentMethodsList = value;
                _flagPaymentMethodsList = true;
            }
        }
        private List<PaymentMethod> _PaymentMethodsList;
        private bool _flagPaymentMethodsList;

        /// <summary>
        /// Returns false as PaymentMethodsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentMethodsList()
        {
            return _flagPaymentMethodsList;
        }
        /// <summary>
        /// Entity payment accounts list
        /// </summary>
        /// <value>Entity payment accounts list</value>
        [DataMember(Name = "payment_accounts_list", EmitDefaultValue = true)]
        public List<PaymentAccount> PaymentAccountsList
        {
            get{ return _PaymentAccountsList;}
            set
            {
                _PaymentAccountsList = value;
                _flagPaymentAccountsList = true;
            }
        }
        private List<PaymentAccount> _PaymentAccountsList;
        private bool _flagPaymentAccountsList;

        /// <summary>
        /// Returns false as PaymentAccountsList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePaymentAccountsList()
        {
            return _flagPaymentAccountsList;
        }
        /// <summary>
        /// Vat types list
        /// </summary>
        /// <value>Vat types list</value>
        [DataMember(Name = "vat_types_list", EmitDefaultValue = true)]
        public List<VatType> VatTypesList
        {
            get{ return _VatTypesList;}
            set
            {
                _VatTypesList = value;
                _flagVatTypesList = true;
            }
        }
        private List<VatType> _VatTypesList;
        private bool _flagVatTypesList;

        /// <summary>
        /// Returns false as VatTypesList should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVatTypesList()
        {
            return _flagVatTypesList;
        }
        /// <summary>
        /// Entity price lists
        /// </summary>
        /// <value>Entity price lists</value>
        [DataMember(Name = "price_lists", EmitDefaultValue = true)]
        public List<PriceList> PriceLists
        {
            get{ return _PriceLists;}
            set
            {
                _PriceLists = value;
                _flagPriceLists = true;
            }
        }
        private List<PriceList> _PriceLists;
        private bool _flagPriceLists;

        /// <summary>
        /// Returns false as PriceLists should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePriceLists()
        {
            return _flagPriceLists;
        }
        /// <summary>
        /// Entity limit
        /// </summary>
        /// <value>Entity limit</value>
        [DataMember(Name = "limit", EmitDefaultValue = true)]
        public decimal Limit
        {
            get{ return _Limit;}
            set
            {
                _Limit = value;
                _flagLimit = true;
            }
        }
        private decimal _Limit;
        private bool _flagLimit;

        /// <summary>
        /// Returns false as Limit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLimit()
        {
            return _flagLimit;
        }
        /// <summary>
        /// Entity usage
        /// </summary>
        /// <value>Entity usage</value>
        [DataMember(Name = "usage", EmitDefaultValue = true)]
        public decimal Usage
        {
            get{ return _Usage;}
            set
            {
                _Usage = value;
                _flagUsage = true;
            }
        }
        private decimal _Usage;
        private bool _flagUsage;

        /// <summary>
        /// Returns false as Usage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUsage()
        {
            return _flagUsage;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityClientPreCreateInfo {\n");
            sb.Append("  CountriesList: ").Append(CountriesList).Append("\n");
            sb.Append("  PaymentMethodsList: ").Append(PaymentMethodsList).Append("\n");
            sb.Append("  PaymentAccountsList: ").Append(PaymentAccountsList).Append("\n");
            sb.Append("  VatTypesList: ").Append(VatTypesList).Append("\n");
            sb.Append("  PriceLists: ").Append(PriceLists).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityClientPreCreateInfo);
        }

        /// <summary>
        /// Returns true if EntityClientPreCreateInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityClientPreCreateInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityClientPreCreateInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountriesList == input.CountriesList ||
                    this.CountriesList != null &&
                    input.CountriesList != null &&
                    this.CountriesList.SequenceEqual(input.CountriesList)
                ) && 
                (
                    this.PaymentMethodsList == input.PaymentMethodsList ||
                    this.PaymentMethodsList != null &&
                    input.PaymentMethodsList != null &&
                    this.PaymentMethodsList.SequenceEqual(input.PaymentMethodsList)
                ) && 
                (
                    this.PaymentAccountsList == input.PaymentAccountsList ||
                    this.PaymentAccountsList != null &&
                    input.PaymentAccountsList != null &&
                    this.PaymentAccountsList.SequenceEqual(input.PaymentAccountsList)
                ) && 
                (
                    this.VatTypesList == input.VatTypesList ||
                    this.VatTypesList != null &&
                    input.VatTypesList != null &&
                    this.VatTypesList.SequenceEqual(input.VatTypesList)
                ) && 
                (
                    this.PriceLists == input.PriceLists ||
                    this.PriceLists != null &&
                    input.PriceLists != null &&
                    this.PriceLists.SequenceEqual(input.PriceLists)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Usage == input.Usage ||
                    this.Usage.Equals(input.Usage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountriesList != null)
                {
                    hashCode = (hashCode * 59) + this.CountriesList.GetHashCode();
                }
                if (this.PaymentMethodsList != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethodsList.GetHashCode();
                }
                if (this.PaymentAccountsList != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentAccountsList.GetHashCode();
                }
                if (this.VatTypesList != null)
                {
                    hashCode = (hashCode * 59) + this.VatTypesList.GetHashCode();
                }
                if (this.PriceLists != null)
                {
                    hashCode = (hashCode * 59) + this.PriceLists.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.Usage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }


    /// <summary>
    /// A Json converter for type <see cref="EntityClientPreCreateInfo" />
    /// </summary>
    public class EntityClientPreCreateInfoJsonConverter : JsonConverter<EntityClientPreCreateInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="EntityClientPreCreateInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EntityClientPreCreateInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> countriesList = default;
            Option<List<PaymentMethod>?> paymentMethodsList = default;
            Option<List<PaymentAccount>?> paymentAccountsList = default;
            Option<List<VatType>?> vatTypesList = default;
            Option<List<PriceList>?> priceLists = default;
            Option<decimal?> limit = default;
            Option<decimal?> usage = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "countries_list":
                            countriesList = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_methods_list":
                            paymentMethodsList = new Option<List<PaymentMethod>?>(JsonSerializer.Deserialize<List<PaymentMethod>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "payment_accounts_list":
                            paymentAccountsList = new Option<List<PaymentAccount>?>(JsonSerializer.Deserialize<List<PaymentAccount>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "vat_types_list":
                            vatTypesList = new Option<List<VatType>?>(JsonSerializer.Deserialize<List<VatType>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price_lists":
                            priceLists = new Option<List<PriceList>?>(JsonSerializer.Deserialize<List<PriceList>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "limit":
                            limit = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "usage":
                            usage = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new EntityClientPreCreateInfo(countriesList, paymentMethodsList, paymentAccountsList, vatTypesList, priceLists, limit, usage);
        }

        /// <summary>
        /// Serializes a <see cref="EntityClientPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityClientPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EntityClientPreCreateInfo entityClientPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, entityClientPreCreateInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EntityClientPreCreateInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="entityClientPreCreateInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EntityClientPreCreateInfo entityClientPreCreateInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (entityClientPreCreateInfo.CountriesListOption.IsSet)
                if (entityClientPreCreateInfo.CountriesListOption.Value != null)
                {
                    writer.WritePropertyName("countries_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.CountriesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("countries_list");
            if (entityClientPreCreateInfo.PaymentMethodsListOption.IsSet)
                if (entityClientPreCreateInfo.PaymentMethodsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_methods_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.PaymentMethodsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_methods_list");
            if (entityClientPreCreateInfo.PaymentAccountsListOption.IsSet)
                if (entityClientPreCreateInfo.PaymentAccountsListOption.Value != null)
                {
                    writer.WritePropertyName("payment_accounts_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.PaymentAccountsList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("payment_accounts_list");
            if (entityClientPreCreateInfo.VatTypesListOption.IsSet)
                if (entityClientPreCreateInfo.VatTypesListOption.Value != null)
                {
                    writer.WritePropertyName("vat_types_list");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.VatTypesList, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("vat_types_list");
            if (entityClientPreCreateInfo.PriceListsOption.IsSet)
                if (entityClientPreCreateInfo.PriceListsOption.Value != null)
                {
                    writer.WritePropertyName("price_lists");
                    JsonSerializer.Serialize(writer, entityClientPreCreateInfo.PriceLists, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("price_lists");
            if (entityClientPreCreateInfo.LimitOption.IsSet)
                if (entityClientPreCreateInfo.LimitOption.Value != null)
                    writer.WriteNumber("limit", entityClientPreCreateInfo.LimitOption.Value!.Value);
                else
                    writer.WriteNull("limit");

            if (entityClientPreCreateInfo.UsageOption.IsSet)
                if (entityClientPreCreateInfo.UsageOption.Value != null)
                    writer.WriteNumber("usage", entityClientPreCreateInfo.UsageOption.Value!.Value);
                else
                    writer.WriteNull("usage");
        }
    }
}
