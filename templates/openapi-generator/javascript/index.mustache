{{>licenseInfo}}

import ApiClient from './ApiClient';
{{#models}}import {{#model}}{{classFilename}}{{/model}} from './{{#modelPackage}}{{.}}/{{/modelPackage}}{{importPath}}';
{{/models}}{{#apiInfo}}{{#apis}}import {{importPath}} from './{{#apiPackage}}{{.}}/{{/apiPackage}}{{importPath}}';
{{/apis}}{{/apiInfo}}

import Condition from './filter/Condition';
import Filter from './filter/Filter';
import Expression from './filter/Expression';
import Conjunction from './filter/Conjunction';
import Disjunction from './filter/Disjunction';
import Operator from './filter/Operator';

import OAuth2AuthorizationCodeManager from './oauth2/OAuth2';
import OAuth2AuthorizationCodeTokenResponse from './oauth2/OAuth2AuthorizationCodeTokenResponse';
import OAuth2AuthorizationCodeParams from './oauth2/OAuth2AuthorizationCodeParams';
import Scope from './oauth2/Scope';


{{#emitJSDoc}}/**{{#projectDescription}}
* {{.}}.<br>{{/projectDescription}}
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var {{moduleName}} = require('{{#invokerPackage}}{{.}}/{{/invokerPackage}}index'); // See note below*.
* var xxxSvc = new {{moduleName}}.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new {{moduleName}}.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['{{#invokerPackage}}{{.}}/{{/invokerPackage}}index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new {{moduleName}}.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new {{moduleName}}.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module {{#invokerPackage}}{{.}}/{{/invokerPackage}}index
* @version {{projectVersion}}
*/{{/emitJSDoc}}
export {
    {{=< >=}}
    <#emitJSDoc>/**
     * The ApiClient constructor.
     * @property {module:<#invokerPackage><invokerPackage>/</invokerPackage>ApiClient}
     */</emitJSDoc>
    ApiClient<#models>,

    <#emitJSDoc>/**
     * The <importPath> model constructor.
     * @property {module:<#invokerPackage><invokerPackage>/</invokerPackage><#modelPackage><modelPackage>/</modelPackage><importPath>}
     */</emitJSDoc>
    <importPath></models><#apiInfo><#apis>,

    <#emitJSDoc>/**
    * The <importPath> service constructor.
    * @property {module:<#invokerPackage><invokerPackage>/</invokerPackage><#apiPackage><apiPackage>/</apiPackage><importPath>}
    */</emitJSDoc>
    <importPath></apis></apiInfo>

    /**
    * The Condition service constructor.
    * @property {module:filter/Condition}
    */
    Condition,

    /**
    * The Conjunction service constructor.
    * @property {module:filter/Conjunction}
    */
    Conjunction,

    /**
    * The Disjunction service constructor.
    * @property {module:filter/Disjunction}
    */
    Disjunction,

    /**
    * The Expression service constructor.
    * @property {module:filter/Expression}
    */
    Expression,

    /**
    * The Filter service constructor.
    * @property {module:filter/Filter}
    */
    Filter,

    /**
    * The Operator service constructor.
    * @property {module:api/Operator}
    */
    Operator,

    /**
    * The OAuth2AuthorizationCodeManager service constructor.
    * @property {module:api/OAuth2AuthorizationCodeManager}
    */
    OAuth2AuthorizationCodeManager,

    /**
    * The Scope service constructor.
    * @property {module:api/Scope}
    */
    Scope,

    /**
    * The OAuth2AuthorizationCodeTokenResponse service constructor.
    * @property {module:api/OAuth2AuthorizationCodeTokenResponse}
    */
    OAuth2AuthorizationCodeTokenResponse,

    /**
    * The OAuth2AuthorizationCodeParams service constructor.
    * @property {module:api/OAuth2AuthorizationCodeParams}
    */
    OAuth2AuthorizationCodeParams

};<={{ }}=>
