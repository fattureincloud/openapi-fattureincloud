plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.spotless" version "6.1.2"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

group = '{{groupId}}'
version = '{{artifactVersion}}'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.6.8'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    {{#openApiNullable}}
    implementation 'org.openapitools:jackson-databind-nullable:0.2.4'
    {{/openApiNullable}}
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    {{#joda}}
    implementation 'joda-time:joda-time:2.9.9'
    {{/joda}}
    {{#dynamicOperations}}
    implementation 'io.swagger.parser.v3:swagger-parser-v3:2.0.30'
    {{/dynamicOperations}}
    implementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation "io.vavr:vavr:0.10.4"
    testImplementation(platform('org.junit:junit-bom:5.9.1'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.1')
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = '{{artifactId}}'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Fatture in Cloud Java SDK'
                description = 'Java SDK for the Fatture in Cloud API'
                url = 'https://github.com/fattureincloud/fattureincloud-java-sdk'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/fattureincloud/openapi-fattureincloud/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'Fatture In Cloud API Team'
                        email = 'info@fattureincloud.it'
                        organization = 'Fatture in Cloud'
                        organizationUrl = 'https://www.fattureincloud.it'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:fattureincloud/fattureincloud-java-sdk.git'
                    developerConnection = 'scm:git:git@github.com:fattureincloud/fattureincloud-java-sdk.git'
                    url = 'https://github.com/fattureincloud/fattureincloud-java-sdk.git'
                }
            }
        }
    }
    /*repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
    }*/
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

signing {
    def signingKeyId = System.getenv("GPG_KEY_ID")
    def signingKey = System.getenv("GPG_KEY")
    def signingPassword = System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


javadoc {
    options.tags = ["http.response.details:a:Http Response Details"]
    options.encoding = 'UTF-8'
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java

        // apply a specific flavor of google-java-format
        googleJavaFormat('1.13.0').aosp().reflowLongStrings()

        removeUnusedImports()
        importOrder()
    }
}
