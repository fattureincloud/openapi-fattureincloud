/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.14
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.api;

import it.fattureincloud.sdk.ApiException;
import it.fattureincloud.sdk.model.CreatePaymentAccountRequest;
import it.fattureincloud.sdk.model.CreatePaymentAccountResponse;
import it.fattureincloud.sdk.model.CreatePaymentMethodRequest;
import it.fattureincloud.sdk.model.CreatePaymentMethodResponse;
import it.fattureincloud.sdk.model.CreateVatTypeRequest;
import it.fattureincloud.sdk.model.CreateVatTypeResponse;
import it.fattureincloud.sdk.model.GetPaymentAccountResponse;
import it.fattureincloud.sdk.model.GetPaymentMethodResponse;
import it.fattureincloud.sdk.model.GetVatTypeResponse;
import it.fattureincloud.sdk.model.ModifyPaymentAccountRequest;
import it.fattureincloud.sdk.model.ModifyPaymentAccountResponse;
import it.fattureincloud.sdk.model.ModifyPaymentMethodRequest;
import it.fattureincloud.sdk.model.ModifyPaymentMethodResponse;
import it.fattureincloud.sdk.model.ModifyVatTypeRequest;
import it.fattureincloud.sdk.model.ModifyVatTypeResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsApi
 */
@Ignore
public class SettingsApiTest {

    private final SettingsApi api = new SettingsApi();

    
    /**
     * Create Payment Account
     *
     * Creates a new payment account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPaymentAccountTest() throws ApiException {
        Integer companyId = null;
        CreatePaymentAccountRequest createPaymentAccountRequest = null;
                CreatePaymentAccountResponse response = api.createPaymentAccount(companyId, createPaymentAccountRequest);
        // TODO: test validations
    }
    
    /**
     * Create Payment Method
     *
     * Creates a new payment method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPaymentMethodTest() throws ApiException {
        Integer companyId = null;
        CreatePaymentMethodRequest createPaymentMethodRequest = null;
                CreatePaymentMethodResponse response = api.createPaymentMethod(companyId, createPaymentMethodRequest);
        // TODO: test validations
    }
    
    /**
     * Create Vat Type
     *
     * Creates a vat type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVatTypeTest() throws ApiException {
        Integer companyId = null;
        CreateVatTypeRequest createVatTypeRequest = null;
                CreateVatTypeResponse response = api.createVatType(companyId, createVatTypeRequest);
        // TODO: test validations
    }
    
    /**
     * Delete Payment Account
     *
     * Deletes the specified payment account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePaymentAccountTest() throws ApiException {
        Integer companyId = null;
        Integer paymentAccountId = null;
                api.deletePaymentAccount(companyId, paymentAccountId);
        // TODO: test validations
    }
    
    /**
     * Delete Payment Method
     *
     * Deletes the specified payment method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePaymentMethodTest() throws ApiException {
        Integer companyId = null;
        Integer paymentMethodId = null;
                api.deletePaymentMethod(companyId, paymentMethodId);
        // TODO: test validations
    }
    
    /**
     * Delete Vat Type
     *
     * Deletes the specified vat type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVatTypeTest() throws ApiException {
        Integer companyId = null;
        Integer vatTypeId = null;
                api.deleteVatType(companyId, vatTypeId);
        // TODO: test validations
    }
    
    /**
     * Get Payment Account
     *
     * Gets the specified payment account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentAccountTest() throws ApiException {
        Integer companyId = null;
        Integer paymentAccountId = null;
        String fields = null;
        String fieldset = null;
                GetPaymentAccountResponse response = api.getPaymentAccount(companyId, paymentAccountId, fields, fieldset);
        // TODO: test validations
    }
    
    /**
     * Get Payment Method
     *
     * Gets the specified payment method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentMethodTest() throws ApiException {
        Integer companyId = null;
        Integer paymentMethodId = null;
        String fields = null;
        String fieldset = null;
                GetPaymentMethodResponse response = api.getPaymentMethod(companyId, paymentMethodId, fields, fieldset);
        // TODO: test validations
    }
    
    /**
     * Get Vat Type
     *
     * Gets the specified vat type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVatTypeTest() throws ApiException {
        Integer companyId = null;
        Integer vatTypeId = null;
                GetVatTypeResponse response = api.getVatType(companyId, vatTypeId);
        // TODO: test validations
    }
    
    /**
     * Modify Payment Account
     *
     * Modifies the specified payment account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyPaymentAccountTest() throws ApiException {
        Integer companyId = null;
        Integer paymentAccountId = null;
        ModifyPaymentAccountRequest modifyPaymentAccountRequest = null;
                ModifyPaymentAccountResponse response = api.modifyPaymentAccount(companyId, paymentAccountId, modifyPaymentAccountRequest);
        // TODO: test validations
    }
    
    /**
     * Modify Payment Method
     *
     * Modifies the specified payment method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyPaymentMethodTest() throws ApiException {
        Integer companyId = null;
        Integer paymentMethodId = null;
        ModifyPaymentMethodRequest modifyPaymentMethodRequest = null;
                ModifyPaymentMethodResponse response = api.modifyPaymentMethod(companyId, paymentMethodId, modifyPaymentMethodRequest);
        // TODO: test validations
    }
    
    /**
     * Modify Vat Type
     *
     * Modifies the specified vat type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyVatTypeTest() throws ApiException {
        Integer companyId = null;
        Integer vatTypeId = null;
        ModifyVatTypeRequest modifyVatTypeRequest = null;
                ModifyVatTypeResponse response = api.modifyVatType(companyId, vatTypeId, modifyVatTypeRequest);
        // TODO: test validations
    }
    
}
