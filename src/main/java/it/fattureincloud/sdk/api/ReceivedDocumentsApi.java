/*
 * Fatture in Cloud API v2 - API Reference
 * Connect your software with Fatture in Cloud, the invoicing platform chosen by more than 400.000 businesses in Italy.   The Fatture in Cloud API is based on REST, and makes possible to interact with the user related data prior authorization via OAuth2 protocol.
 *
 * The version of the OpenAPI document: 2.0.14
 * Contact: info@fattureincloud.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.fattureincloud.sdk.api;

import it.fattureincloud.sdk.ApiCallback;
import it.fattureincloud.sdk.ApiClient;
import it.fattureincloud.sdk.ApiException;
import it.fattureincloud.sdk.ApiResponse;
import it.fattureincloud.sdk.Configuration;
import it.fattureincloud.sdk.Pair;
import it.fattureincloud.sdk.ProgressRequestBody;
import it.fattureincloud.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import it.fattureincloud.sdk.model.CreateReceivedDocumentRequest;
import it.fattureincloud.sdk.model.CreateReceivedDocumentResponse;
import java.io.File;
import it.fattureincloud.sdk.model.GetExistingReceivedDocumentTotalsRequest;
import it.fattureincloud.sdk.model.GetExistingReceivedDocumentTotalsResponse;
import it.fattureincloud.sdk.model.GetNewReceivedDocumentTotalsRequest;
import it.fattureincloud.sdk.model.GetNewReceivedDocumentTotalsResponse;
import it.fattureincloud.sdk.model.GetReceivedDocumentPreCreateInfoResponse;
import it.fattureincloud.sdk.model.GetReceivedDocumentResponse;
import it.fattureincloud.sdk.model.ListReceivedDocumentsResponse;
import it.fattureincloud.sdk.model.ModifyReceivedDocumentRequest;
import it.fattureincloud.sdk.model.ModifyReceivedDocumentResponse;
import it.fattureincloud.sdk.model.UploadReceivedDocumentAttachmentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReceivedDocumentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReceivedDocumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReceivedDocumentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createReceivedDocument
     * @param companyId The ID of the company. (required)
     * @param createReceivedDocumentRequest Document to create (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivedDocumentCall(Integer companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReceivedDocumentRequest;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReceivedDocumentValidateBeforeCall(Integer companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling createReceivedDocument(Async)");
        }
        

        okhttp3.Call localVarCall = createReceivedDocumentCall(companyId, createReceivedDocumentRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Received Document
     * Creates a new document.
     * @param companyId The ID of the company. (required)
     * @param createReceivedDocumentRequest Document to create (optional)
     * @return CreateReceivedDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document created. </td><td>  -  </td></tr>
     </table>
     */
    public CreateReceivedDocumentResponse createReceivedDocument(Integer companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest) throws ApiException {
        ApiResponse<CreateReceivedDocumentResponse> localVarResp = createReceivedDocumentWithHttpInfo(companyId, createReceivedDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * Create Received Document
     * Creates a new document.
     * @param companyId The ID of the company. (required)
     * @param createReceivedDocumentRequest Document to create (optional)
     * @return ApiResponse&lt;CreateReceivedDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReceivedDocumentResponse> createReceivedDocumentWithHttpInfo(Integer companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = createReceivedDocumentValidateBeforeCall(companyId, createReceivedDocumentRequest, null);
        Type localVarReturnType = new TypeToken<CreateReceivedDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Received Document (asynchronously)
     * Creates a new document.
     * @param companyId The ID of the company. (required)
     * @param createReceivedDocumentRequest Document to create (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReceivedDocumentAsync(Integer companyId, CreateReceivedDocumentRequest createReceivedDocumentRequest, final ApiCallback<CreateReceivedDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReceivedDocumentValidateBeforeCall(companyId, createReceivedDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateReceivedDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReceivedDocument
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivedDocumentCall(Integer companyId, Integer documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/{document_id}"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReceivedDocumentValidateBeforeCall(Integer companyId, Integer documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteReceivedDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteReceivedDocument(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReceivedDocumentCall(companyId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Delete Received Document
     * Deletes the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReceivedDocument(Integer companyId, Integer documentId) throws ApiException {
        deleteReceivedDocumentWithHttpInfo(companyId, documentId);
    }

    /**
     * Delete Received Document
     * Deletes the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReceivedDocumentWithHttpInfo(Integer companyId, Integer documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteReceivedDocumentValidateBeforeCall(companyId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Received Document (asynchronously)
     * Deletes the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document removed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivedDocumentAsync(Integer companyId, Integer documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReceivedDocumentValidateBeforeCall(companyId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteReceivedDocumentAttachment
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivedDocumentAttachmentCall(Integer companyId, Integer documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/{document_id}/attachment"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReceivedDocumentAttachmentValidateBeforeCall(Integer companyId, Integer documentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling deleteReceivedDocumentAttachment(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteReceivedDocumentAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteReceivedDocumentAttachmentCall(companyId, documentId, _callback);
        return localVarCall;

    }

    /**
     * Delete Received Document Attachment
     * Removes the attachment of the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReceivedDocumentAttachment(Integer companyId, Integer documentId) throws ApiException {
        deleteReceivedDocumentAttachmentWithHttpInfo(companyId, documentId);
    }

    /**
     * Delete Received Document Attachment
     * Removes the attachment of the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReceivedDocumentAttachmentWithHttpInfo(Integer companyId, Integer documentId) throws ApiException {
        okhttp3.Call localVarCall = deleteReceivedDocumentAttachmentValidateBeforeCall(companyId, documentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Received Document Attachment (asynchronously)
     * Removes the attachment of the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReceivedDocumentAttachmentAsync(Integer companyId, Integer documentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReceivedDocumentAttachmentValidateBeforeCall(companyId, documentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExistingReceivedDocumentTotals
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param getExistingReceivedDocumentTotalsRequest Received document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExistingReceivedDocumentTotalsCall(Integer companyId, Integer documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getExistingReceivedDocumentTotalsRequest;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/{document_id}/totals"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExistingReceivedDocumentTotalsValidateBeforeCall(Integer companyId, Integer documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getExistingReceivedDocumentTotals(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getExistingReceivedDocumentTotals(Async)");
        }
        

        okhttp3.Call localVarCall = getExistingReceivedDocumentTotalsCall(companyId, documentId, getExistingReceivedDocumentTotalsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get Existing Received Document Totals
     * Returns the totals for the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param getExistingReceivedDocumentTotalsRequest Received document. (optional)
     * @return GetExistingReceivedDocumentTotalsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
     </table>
     */
    public GetExistingReceivedDocumentTotalsResponse getExistingReceivedDocumentTotals(Integer companyId, Integer documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest) throws ApiException {
        ApiResponse<GetExistingReceivedDocumentTotalsResponse> localVarResp = getExistingReceivedDocumentTotalsWithHttpInfo(companyId, documentId, getExistingReceivedDocumentTotalsRequest);
        return localVarResp.getData();
    }

    /**
     * Get Existing Received Document Totals
     * Returns the totals for the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param getExistingReceivedDocumentTotalsRequest Received document. (optional)
     * @return ApiResponse&lt;GetExistingReceivedDocumentTotalsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetExistingReceivedDocumentTotalsResponse> getExistingReceivedDocumentTotalsWithHttpInfo(Integer companyId, Integer documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest) throws ApiException {
        okhttp3.Call localVarCall = getExistingReceivedDocumentTotalsValidateBeforeCall(companyId, documentId, getExistingReceivedDocumentTotalsRequest, null);
        Type localVarReturnType = new TypeToken<GetExistingReceivedDocumentTotalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Existing Received Document Totals (asynchronously)
     * Returns the totals for the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param getExistingReceivedDocumentTotalsRequest Received document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExistingReceivedDocumentTotalsAsync(Integer companyId, Integer documentId, GetExistingReceivedDocumentTotalsRequest getExistingReceivedDocumentTotalsRequest, final ApiCallback<GetExistingReceivedDocumentTotalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExistingReceivedDocumentTotalsValidateBeforeCall(companyId, documentId, getExistingReceivedDocumentTotalsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetExistingReceivedDocumentTotalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNewReceivedDocumentTotals
     * @param companyId The ID of the company. (required)
     * @param getNewReceivedDocumentTotalsRequest Received document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewReceivedDocumentTotalsCall(Integer companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getNewReceivedDocumentTotalsRequest;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/totals"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNewReceivedDocumentTotalsValidateBeforeCall(Integer companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getNewReceivedDocumentTotals(Async)");
        }
        

        okhttp3.Call localVarCall = getNewReceivedDocumentTotalsCall(companyId, getNewReceivedDocumentTotalsRequest, _callback);
        return localVarCall;

    }

    /**
     * Get New Received Document Totals
     * Returns the totals for a new document.
     * @param companyId The ID of the company. (required)
     * @param getNewReceivedDocumentTotalsRequest Received document. (optional)
     * @return GetNewReceivedDocumentTotalsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetNewReceivedDocumentTotalsResponse getNewReceivedDocumentTotals(Integer companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest) throws ApiException {
        ApiResponse<GetNewReceivedDocumentTotalsResponse> localVarResp = getNewReceivedDocumentTotalsWithHttpInfo(companyId, getNewReceivedDocumentTotalsRequest);
        return localVarResp.getData();
    }

    /**
     * Get New Received Document Totals
     * Returns the totals for a new document.
     * @param companyId The ID of the company. (required)
     * @param getNewReceivedDocumentTotalsRequest Received document. (optional)
     * @return ApiResponse&lt;GetNewReceivedDocumentTotalsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetNewReceivedDocumentTotalsResponse> getNewReceivedDocumentTotalsWithHttpInfo(Integer companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest) throws ApiException {
        okhttp3.Call localVarCall = getNewReceivedDocumentTotalsValidateBeforeCall(companyId, getNewReceivedDocumentTotalsRequest, null);
        Type localVarReturnType = new TypeToken<GetNewReceivedDocumentTotalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get New Received Document Totals (asynchronously)
     * Returns the totals for a new document.
     * @param companyId The ID of the company. (required)
     * @param getNewReceivedDocumentTotalsRequest Received document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document Totals. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNewReceivedDocumentTotalsAsync(Integer companyId, GetNewReceivedDocumentTotalsRequest getNewReceivedDocumentTotalsRequest, final ApiCallback<GetNewReceivedDocumentTotalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNewReceivedDocumentTotalsValidateBeforeCall(companyId, getNewReceivedDocumentTotalsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetNewReceivedDocumentTotalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceivedDocument
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceivedDocumentCall(Integer companyId, Integer documentId, String fields, String fieldset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/{document_id}"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (fieldset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldset", fieldset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceivedDocumentValidateBeforeCall(Integer companyId, Integer documentId, String fields, String fieldset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getReceivedDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getReceivedDocument(Async)");
        }
        

        okhttp3.Call localVarCall = getReceivedDocumentCall(companyId, documentId, fields, fieldset, _callback);
        return localVarCall;

    }

    /**
     * Get Received Document
     * Gets the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @return GetReceivedDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetReceivedDocumentResponse getReceivedDocument(Integer companyId, Integer documentId, String fields, String fieldset) throws ApiException {
        ApiResponse<GetReceivedDocumentResponse> localVarResp = getReceivedDocumentWithHttpInfo(companyId, documentId, fields, fieldset);
        return localVarResp.getData();
    }

    /**
     * Get Received Document
     * Gets the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @return ApiResponse&lt;GetReceivedDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReceivedDocumentResponse> getReceivedDocumentWithHttpInfo(Integer companyId, Integer documentId, String fields, String fieldset) throws ApiException {
        okhttp3.Call localVarCall = getReceivedDocumentValidateBeforeCall(companyId, documentId, fields, fieldset, null);
        Type localVarReturnType = new TypeToken<GetReceivedDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Received Document (asynchronously)
     * Gets the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Document details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceivedDocumentAsync(Integer companyId, Integer documentId, String fields, String fieldset, final ApiCallback<GetReceivedDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceivedDocumentValidateBeforeCall(companyId, documentId, fields, fieldset, _callback);
        Type localVarReturnType = new TypeToken<GetReceivedDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReceivedDocumentPreCreateInfo
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pre-create info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceivedDocumentPreCreateInfoCall(Integer companyId, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/info"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReceivedDocumentPreCreateInfoValidateBeforeCall(Integer companyId, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getReceivedDocumentPreCreateInfo(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getReceivedDocumentPreCreateInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getReceivedDocumentPreCreateInfoCall(companyId, type, _callback);
        return localVarCall;

    }

    /**
     * Get Received Document Pre-Create Info
     * Retrieves the information useful while creating a new document.
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @return GetReceivedDocumentPreCreateInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pre-create info </td><td>  -  </td></tr>
     </table>
     */
    public GetReceivedDocumentPreCreateInfoResponse getReceivedDocumentPreCreateInfo(Integer companyId, String type) throws ApiException {
        ApiResponse<GetReceivedDocumentPreCreateInfoResponse> localVarResp = getReceivedDocumentPreCreateInfoWithHttpInfo(companyId, type);
        return localVarResp.getData();
    }

    /**
     * Get Received Document Pre-Create Info
     * Retrieves the information useful while creating a new document.
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @return ApiResponse&lt;GetReceivedDocumentPreCreateInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pre-create info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetReceivedDocumentPreCreateInfoResponse> getReceivedDocumentPreCreateInfoWithHttpInfo(Integer companyId, String type) throws ApiException {
        okhttp3.Call localVarCall = getReceivedDocumentPreCreateInfoValidateBeforeCall(companyId, type, null);
        Type localVarReturnType = new TypeToken<GetReceivedDocumentPreCreateInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Received Document Pre-Create Info (asynchronously)
     * Retrieves the information useful while creating a new document.
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pre-create info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReceivedDocumentPreCreateInfoAsync(Integer companyId, String type, final ApiCallback<GetReceivedDocumentPreCreateInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReceivedDocumentPreCreateInfoValidateBeforeCall(companyId, type, _callback);
        Type localVarReturnType = new TypeToken<GetReceivedDocumentPreCreateInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listReceivedDocuments
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @param sort List of comma-separated fields for result sorting (minus for desc sorting). (optional)
     * @param page The page to retrieve. (optional, default to 1)
     * @param perPage The size of the page. (optional, default to 5)
     * @param q Query for filtering the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReceivedDocumentsCall(Integer companyId, String type, String fields, String fieldset, String sort, Integer page, Integer perPage, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (fieldset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldset", fieldset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReceivedDocumentsValidateBeforeCall(Integer companyId, String type, String fields, String fieldset, String sort, Integer page, Integer perPage, String q, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listReceivedDocuments(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling listReceivedDocuments(Async)");
        }
        

        okhttp3.Call localVarCall = listReceivedDocumentsCall(companyId, type, fields, fieldset, sort, page, perPage, q, _callback);
        return localVarCall;

    }

    /**
     * List Received Documents
     * Lists the received documents.
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @param sort List of comma-separated fields for result sorting (minus for desc sorting). (optional)
     * @param page The page to retrieve. (optional, default to 1)
     * @param perPage The size of the page. (optional, default to 5)
     * @param q Query for filtering the results. (optional)
     * @return ListReceivedDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ListReceivedDocumentsResponse listReceivedDocuments(Integer companyId, String type, String fields, String fieldset, String sort, Integer page, Integer perPage, String q) throws ApiException {
        ApiResponse<ListReceivedDocumentsResponse> localVarResp = listReceivedDocumentsWithHttpInfo(companyId, type, fields, fieldset, sort, page, perPage, q);
        return localVarResp.getData();
    }

    /**
     * List Received Documents
     * Lists the received documents.
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @param sort List of comma-separated fields for result sorting (minus for desc sorting). (optional)
     * @param page The page to retrieve. (optional, default to 1)
     * @param perPage The size of the page. (optional, default to 5)
     * @param q Query for filtering the results. (optional)
     * @return ApiResponse&lt;ListReceivedDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListReceivedDocumentsResponse> listReceivedDocumentsWithHttpInfo(Integer companyId, String type, String fields, String fieldset, String sort, Integer page, Integer perPage, String q) throws ApiException {
        okhttp3.Call localVarCall = listReceivedDocumentsValidateBeforeCall(companyId, type, fields, fieldset, sort, page, perPage, q, null);
        Type localVarReturnType = new TypeToken<ListReceivedDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Received Documents (asynchronously)
     * Lists the received documents.
     * @param companyId The ID of the company. (required)
     * @param type The type of the received document. (required)
     * @param fields List of comma-separated fields. (optional)
     * @param fieldset Name of the fieldset. (optional)
     * @param sort List of comma-separated fields for result sorting (minus for desc sorting). (optional)
     * @param page The page to retrieve. (optional, default to 1)
     * @param perPage The size of the page. (optional, default to 5)
     * @param q Query for filtering the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Results list. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listReceivedDocumentsAsync(Integer companyId, String type, String fields, String fieldset, String sort, Integer page, Integer perPage, String q, final ApiCallback<ListReceivedDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReceivedDocumentsValidateBeforeCall(companyId, type, fields, fieldset, sort, page, perPage, q, _callback);
        Type localVarReturnType = new TypeToken<ListReceivedDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyReceivedDocument
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param modifyReceivedDocumentRequest Modified document. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified document. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReceivedDocumentCall(Integer companyId, Integer documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyReceivedDocumentRequest;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/{document_id}"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyReceivedDocumentValidateBeforeCall(Integer companyId, Integer documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling modifyReceivedDocument(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling modifyReceivedDocument(Async)");
        }
        

        okhttp3.Call localVarCall = modifyReceivedDocumentCall(companyId, documentId, modifyReceivedDocumentRequest, _callback);
        return localVarCall;

    }

    /**
     * Modify Received Document
     * Modifies the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param modifyReceivedDocumentRequest Modified document. (optional)
     * @return ModifyReceivedDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified document. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReceivedDocumentResponse modifyReceivedDocument(Integer companyId, Integer documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest) throws ApiException {
        ApiResponse<ModifyReceivedDocumentResponse> localVarResp = modifyReceivedDocumentWithHttpInfo(companyId, documentId, modifyReceivedDocumentRequest);
        return localVarResp.getData();
    }

    /**
     * Modify Received Document
     * Modifies the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param modifyReceivedDocumentRequest Modified document. (optional)
     * @return ApiResponse&lt;ModifyReceivedDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified document. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReceivedDocumentResponse> modifyReceivedDocumentWithHttpInfo(Integer companyId, Integer documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest) throws ApiException {
        okhttp3.Call localVarCall = modifyReceivedDocumentValidateBeforeCall(companyId, documentId, modifyReceivedDocumentRequest, null);
        Type localVarReturnType = new TypeToken<ModifyReceivedDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modify Received Document (asynchronously)
     * Modifies the specified document.
     * @param companyId The ID of the company. (required)
     * @param documentId The ID of the document. (required)
     * @param modifyReceivedDocumentRequest Modified document. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modified document. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifyReceivedDocumentAsync(Integer companyId, Integer documentId, ModifyReceivedDocumentRequest modifyReceivedDocumentRequest, final ApiCallback<ModifyReceivedDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyReceivedDocumentValidateBeforeCall(companyId, documentId, modifyReceivedDocumentRequest, _callback);
        Type localVarReturnType = new TypeToken<ModifyReceivedDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadReceivedDocumentAttachment
     * @param companyId The ID of the company. (required)
     * @param filename Name of the file. (optional)
     * @param attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment Token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadReceivedDocumentAttachmentCall(Integer companyId, String filename, File attachment, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{company_id}/received_documents/attachment"
            .replaceAll("\\{" + "company_id" + "\\}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (attachment != null) {
            localVarFormParams.put("attachment", attachment);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2AuthenticationCodeFlow" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadReceivedDocumentAttachmentValidateBeforeCall(Integer companyId, String filename, File attachment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling uploadReceivedDocumentAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = uploadReceivedDocumentAttachmentCall(companyId, filename, attachment, _callback);
        return localVarCall;

    }

    /**
     * Upload Received Document Attachment
     * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param companyId The ID of the company. (required)
     * @param filename Name of the file. (optional)
     * @param attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx (optional)
     * @return UploadReceivedDocumentAttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment Token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public UploadReceivedDocumentAttachmentResponse uploadReceivedDocumentAttachment(Integer companyId, String filename, File attachment) throws ApiException {
        ApiResponse<UploadReceivedDocumentAttachmentResponse> localVarResp = uploadReceivedDocumentAttachmentWithHttpInfo(companyId, filename, attachment);
        return localVarResp.getData();
    }

    /**
     * Upload Received Document Attachment
     * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param companyId The ID of the company. (required)
     * @param filename Name of the file. (optional)
     * @param attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx (optional)
     * @return ApiResponse&lt;UploadReceivedDocumentAttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment Token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadReceivedDocumentAttachmentResponse> uploadReceivedDocumentAttachmentWithHttpInfo(Integer companyId, String filename, File attachment) throws ApiException {
        okhttp3.Call localVarCall = uploadReceivedDocumentAttachmentValidateBeforeCall(companyId, filename, attachment, null);
        Type localVarReturnType = new TypeToken<UploadReceivedDocumentAttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Received Document Attachment (asynchronously)
     * Uploads an attachment destined to a received document. The actual association between the document and the attachment must be implemented separately, using the returned token.
     * @param companyId The ID of the company. (required)
     * @param filename Name of the file. (optional)
     * @param attachment Valid format: .png, .jpg, .gif, .pdf, .zip, .xls, .xlsx, .doc, .docx (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Attachment Token. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadReceivedDocumentAttachmentAsync(Integer companyId, String filename, File attachment, final ApiCallback<UploadReceivedDocumentAttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadReceivedDocumentAttachmentValidateBeforeCall(companyId, filename, attachment, _callback);
        Type localVarReturnType = new TypeToken<UploadReceivedDocumentAttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
